diff --git a/build/target/product/core.mk b/build/target/product/core.mk
index c5ef2aa..fb239d1 100644
--- a/build/target/product/core.mk
+++ b/build/target/product/core.mk
@@ -23,6 +23,7 @@ PRODUCT_PACKAGES += \
     BasicDreams \
     Browser \
     Contacts \
+    WindowApps \
     DocumentsUI \
     DownloadProviderUi \
     ExternalStorageProvider \
diff --git a/frameworks/base/Android.mk b/frameworks/base/Android.mk
index 3d52f44..fcf352e 100644
--- a/frameworks/base/Android.mk
+++ b/frameworks/base/Android.mk
@@ -161,6 +161,7 @@ LOCAL_SRC_FILES += \
 	core/java/android/os/IUpdateLock.aidl \
 	core/java/android/os/IUserManager.aidl \
 	core/java/android/os/IVibratorService.aidl \
+	core/java/android/os/IWindowApps.aidl \
 	core/java/android/service/notification/INotificationListener.aidl \
 	core/java/android/print/ILayoutResultCallback.aidl \
 	core/java/android/print/IPrinterDiscoveryObserver.aidl \
diff --git a/frameworks/base/api/current.txt b/frameworks/base/api/current.txt
index a98fcfb..13c57b6 100644
--- a/frameworks/base/api/current.txt
+++ b/frameworks/base/api/current.txt
@@ -2952,6 +2952,7 @@ package android.app {
     method public void moveTaskToFront(int, int, android.os.Bundle);
     method public deprecated void restartPackage(java.lang.String);
     field public static final java.lang.String META_HOME_ALTERNATE = "android.app.home.alternate";
+    field public static final int MOVE_TASK_BACK_TASKS_INVISIBLE = 4; // 0x4
     field public static final int MOVE_TASK_NO_USER_ACTION = 2; // 0x2
     field public static final int MOVE_TASK_WITH_HOME = 1; // 0x1
     field public static final int RECENT_IGNORE_UNAVAILABLE = 2; // 0x2
@@ -4395,6 +4396,11 @@ package android.app {
     field public static final java.lang.String WALLPAPER_PREVIEW_META_DATA = "android.wallpaper.preview";
   }
 
+  public class WindowAppsManager {
+    method public java.lang.String getWindowApps();
+    method public void setWindowApps(java.lang.String);
+  }
+
 }
 
 package android.app.admin {
@@ -6016,6 +6022,7 @@ package android.content {
     field public static final java.lang.String WALLPAPER_SERVICE = "wallpaper";
     field public static final java.lang.String WIFI_P2P_SERVICE = "wifip2p";
     field public static final java.lang.String WIFI_SERVICE = "wifi";
+    field public static final java.lang.String WINDOW_APPS_SERVICE = "window_apps";
     field public static final java.lang.String WINDOW_SERVICE = "window";
   }
 
@@ -17583,7 +17590,7 @@ package android.os {
 
   public abstract class CountDownTimer {
     ctor public CountDownTimer(long, long);
-    method public final void cancel();
+    method public final synchronized void cancel();
     method public abstract void onFinish();
     method public abstract void onTick(long);
     method public final synchronized android.os.CountDownTimer start();
@@ -28720,8 +28727,10 @@ package android.view {
     method public java.lang.String debug(java.lang.String);
     method public int describeContents();
     method public final java.lang.CharSequence getTitle();
+    method public void getWindowingParam();
     method public static boolean mayUseInputMethod(int);
     method public final void setTitle(java.lang.CharSequence);
+    method public void setWindowingParam();
     method public void writeToParcel(android.os.Parcel, int);
     field public static final int ALPHA_CHANGED = 128; // 0x80
     field public static final int ANIMATION_CHANGED = 16; // 0x10
@@ -28818,6 +28827,10 @@ package android.view {
     field public static final int TYPE_SYSTEM_OVERLAY = 2006; // 0x7d6
     field public static final int TYPE_TOAST = 2005; // 0x7d5
     field public static final int TYPE_WALLPAPER = 2013; // 0x7dd
+    field public int WindowingH;
+    field public int WindowingW;
+    field public int WindowingX;
+    field public int WindowingY;
     field public float alpha;
     field public float buttonBrightness;
     field public float dimAmount;
@@ -28826,6 +28839,8 @@ package android.view {
     field public int gravity;
     field public float horizontalMargin;
     field public float horizontalWeight;
+    field public boolean isFullscreen;
+    field public boolean isInWindowing;
     field public deprecated int memoryType;
     field public java.lang.String packageName;
     field public int rotationAnimation;
diff --git a/frameworks/base/core/java/android/app/Activity.java b/frameworks/base/core/java/android/app/Activity.java
index 10ef535..1a894d1 100644
--- a/frameworks/base/core/java/android/app/Activity.java
+++ b/frameworks/base/core/java/android/app/Activity.java
@@ -4208,7 +4208,7 @@ public class Activity extends ContextThemeWrapper
                 resultCode = mResultCode;
                 resultData = mResultData;
             }
-            if (false) Log.v(TAG, "Finishing self: token=" + mToken);
+            if (true) Log.v(TAG, "Finishing self: token=" + mToken);
             try {
                 if (resultData != null) {
                     resultData.prepareToLeaveProcess();
diff --git a/frameworks/base/core/java/android/app/ActivityManager.java b/frameworks/base/core/java/android/app/ActivityManager.java
index 7ca3459..efef350 100644
--- a/frameworks/base/core/java/android/app/ActivityManager.java
+++ b/frameworks/base/core/java/android/app/ActivityManager.java
@@ -946,6 +946,17 @@ public class ActivityManager {
      * hint that the user is leaving.
      */
     public static final int MOVE_TASK_NO_USER_ACTION = 0x00000002;
+    /**
+     * Ritter_multi
+     * Flag for {@link #moveTaskToFront(int, int)}: When moveTaskToFront()
+     * called, then resumeTopActivitiesLocked(), updateConfigurationLocked(),
+     * ensureActivitiesVisibleLocked() will be called, when ensure...() called,
+     * the other TASK in the same STACK will be set to visible until a full screen APP shows,
+     * so if we move a non full screen TASK to front, other TASK behind it will show too.
+     * To avoid this situation,
+     * I use this flag to control the BACK TASK in the some STACK not visible.
+     */
+    public static final int MOVE_TASK_BACK_TASKS_INVISIBLE = 0x00000004;
 
     /**
      * Equivalent to calling {@link #moveTaskToFront(int, int, Bundle)}
diff --git a/frameworks/base/core/java/android/app/ActivityManagerNative.java b/frameworks/base/core/java/android/app/ActivityManagerNative.java
index 74266cc..5e0fd4d 100644
--- a/frameworks/base/core/java/android/app/ActivityManagerNative.java
+++ b/frameworks/base/core/java/android/app/ActivityManagerNative.java
@@ -2028,6 +2028,24 @@ public abstract class ActivityManagerNative extends Binder implements IActivityM
             reply.writeNoException();
             return true;
         }
+        
+                //Ritter_Multi
+                case RITTER_MOVE_HOME_TO_TOP: {
+                    data.enforceInterface(IActivityManager.descriptor);
+                    moveHomeToTop();
+                    reply.writeNoException();
+                    return true;
+                }
+        
+                //Ritter_Multi
+        /*        case RITTER_MOVE_TASK_TO_TOP: {
+                    data.enforceInterface(IActivityManager.descriptor);
+                    int taskID = data.readInt();
+                    moveTaskToTop_AM(taskID);
+                    reply.writeNoException();
+                    return true;
+                }*/
+        
         }
 
         return super.onTransact(code, data, reply, flags);
@@ -4661,4 +4679,28 @@ class ActivityManagerProxy implements IActivityManager
     }
 
     private IBinder mRemote;
+    
+    //Ritter_Multi
+        @Override
+        public void moveHomeToTop() throws RemoteException {
+            Parcel data = Parcel.obtain();
+            Parcel reply = Parcel.obtain();
+            data.writeInterfaceToken(IActivityManager.descriptor);
+            mRemote.transact(RITTER_MOVE_HOME_TO_TOP, data, reply, 0);
+            reply.readException();
+            data.recycle();
+            reply.recycle();
+        }
+        //Ritter_Multi
+    /*    @Override
+        public void moveTaskToTop_AM(int taskID) throws RemoteException {
+            Parcel data = Parcel.obtain();
+            Parcel reply = Parcel.obtain();
+            data.writeInterfaceToken(IActivityManager.descriptor);
+            data.writeInt(taskID);
+            mRemote.transact(RITTER_MOVE_TASK_TO_TOP, data, reply, 0);
+            reply.readException();
+            reply.recycle();
+            data.recycle();
+        }*/
 }
diff --git a/frameworks/base/core/java/android/app/ActivityThread.java b/frameworks/base/core/java/android/app/ActivityThread.java
index b103e71..e4f3b17 100644
--- a/frameworks/base/core/java/android/app/ActivityThread.java
+++ b/frameworks/base/core/java/android/app/ActivityThread.java
@@ -556,6 +556,7 @@ public final class ActivityThread {
 
         public final void schedulePauseActivity(IBinder token, boolean finished,
                 boolean userLeaving, int configChanges) {
+            Log.d(TAG,"Ritter::ActivityThread ApplicationThreadNative: schedulePauseActivity()");
             sendMessage(
                     finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,
                     token,
diff --git a/frameworks/base/core/java/android/app/ApplicationThreadNative.java b/frameworks/base/core/java/android/app/ApplicationThreadNative.java
index cb453e2..87e7d22 100644
--- a/frameworks/base/core/java/android/app/ApplicationThreadNative.java
+++ b/frameworks/base/core/java/android/app/ApplicationThreadNative.java
@@ -39,6 +39,7 @@ import java.io.IOException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import android.util.Log;
 
 /** {@hide} */
 public abstract class ApplicationThreadNative extends Binder
@@ -660,6 +661,7 @@ class ApplicationThreadProxy implements IApplicationThread {
     
     public final void schedulePauseActivity(IBinder token, boolean finished,
             boolean userLeaving, int configChanges) throws RemoteException {
+        Log.d("TAG","Ritter::ApplicationThread ApplicationThreadProxy: schedulePauseActivity()");
         Parcel data = Parcel.obtain();
         data.writeInterfaceToken(IApplicationThread.descriptor);
         data.writeStrongBinder(token);
diff --git a/frameworks/base/core/java/android/app/ContextImpl.java b/frameworks/base/core/java/android/app/ContextImpl.java
index 8d127c6..250c95d 100644
--- a/frameworks/base/core/java/android/app/ContextImpl.java
+++ b/frameworks/base/core/java/android/app/ContextImpl.java
@@ -126,6 +126,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.HashMap;
+import android.os.IWindowApps;
 
 class ReceiverRestrictedContext extends ContextWrapper {
     ReceiverRestrictedContext(Context base) {
@@ -574,7 +575,15 @@ class ContextImpl extends Context {
                 return new CameraManager(ctx);
             }
         });
-
+        // Ritter_nulti
+        registerService(WINDOW_APPS_SERVICE, new ServiceFetcher() {
+            public Object createService(ContextImpl ctx) {
+                IBinder b = ServiceManager.getService(Context.WINDOW_APPS_SERVICE);
+                IWindowApps service = IWindowApps.Stub.asInterface(b);
+                return new WindowAppsManager(service, ctx);
+            }
+        });
+        
         registerService(PRINT_SERVICE, new ServiceFetcher() {
             public Object createService(ContextImpl ctx) {
                 IBinder iBinder = ServiceManager.getService(Context.PRINT_SERVICE);
diff --git a/frameworks/base/core/java/android/app/IActivityManager.java b/frameworks/base/core/java/android/app/IActivityManager.java
index 77c2ea0..078cf14 100644
--- a/frameworks/base/core/java/android/app/IActivityManager.java
+++ b/frameworks/base/core/java/android/app/IActivityManager.java
@@ -407,7 +407,11 @@ public interface IActivityManager extends IInterface {
     public void restart() throws RemoteException;
 
     public void performIdleMaintenance() throws RemoteException;
-
+    //Ritter_Multi
+    public void moveHomeToTop() throws RemoteException;
+    
+    //Ritter_Multi
+    //    public void moveTaskToTop_AM(int taskID) throws RemoteException;
     /*
      * Private non-Binder interfaces
      */
@@ -694,4 +698,7 @@ public interface IActivityManager extends IInterface {
     int RELEASE_PERSISTABLE_URI_PERMISSION_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+180;
     int GET_PERSISTED_URI_PERMISSIONS_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+181;
     int APP_NOT_RESPONDING_VIA_PROVIDER_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+182;
+    // Ritter_Multi
+    int RITTER_MOVE_HOME_TO_TOP = IBinder.FIRST_CALL_TRANSACTION + 183;
+    // int RITTER_MOVE_TASK_TO_TOP = IBinder.FIRST_CALL_TRANSACTION+184;
 }
diff --git a/frameworks/base/core/java/android/app/WindowAppsManager.java b/frameworks/base/core/java/android/app/WindowAppsManager.java
new file mode 100644
index 0000000..fe22aed
--- /dev/null
+++ b/frameworks/base/core/java/android/app/WindowAppsManager.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.app;
+
+import android.content.Context;
+import android.os.IWindowApps;
+import android.os.RemoteException;
+import android.util.Log;
+
+/**
+ */
+public class WindowAppsManager {
+    private static final String TAG = "WindowAppsManager";
+    private final IWindowApps mService;
+
+
+    /**
+     * package private on purpose
+     */
+    WindowAppsManager(IWindowApps service, Context ctx) {
+        mService = service;
+        if(mService==null){
+            Log.d("TAG","Ritter::AIDL WindowAppsManager() mService==null");
+        } else {
+            Log.d("TAG","Ritter::AIDL WindowAppsManager() mService!=null");
+        }
+    }
+
+    public void setWindowApps(String pkgNames){
+        try {
+            mService.setWindowApps(pkgNames);
+        } catch (RemoteException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+    }
+
+    public String getWindowApps(){
+        String res = "";
+        try {
+            res = mService.getWindowApps();
+        } catch (RemoteException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return res;
+    }
+
+}
\ No newline at end of file
diff --git a/frameworks/base/core/java/android/content/Context.java b/frameworks/base/core/java/android/content/Context.java
index 2e4e209..843fc46 100644
--- a/frameworks/base/core/java/android/content/Context.java
+++ b/frameworks/base/core/java/android/content/Context.java
@@ -2452,6 +2452,18 @@ public abstract class Context {
      * @see #getSystemService
      * @see android.hardware.ConsumerIrManager
      */
+    
+    // Ritter_multi
+    /**
+     * Use with {@link #getSystemService} to retrieve a
+     * {@link android.os.WindowAppsService} for Windowing APPs list
+     * 
+     * @see #getSystemService
+     * @see android.os.WindowAppsService
+     */
+    public static final String WINDOW_APPS_SERVICE = "window_apps";
+    // end
+    
     public static final String CONSUMER_IR_SERVICE = "consumer_ir";
 
     /**
diff --git a/frameworks/base/core/java/android/os/IWindowApps.aidl b/frameworks/base/core/java/android/os/IWindowApps.aidl
new file mode 100644
index 0000000..55f5d88
--- /dev/null
+++ b/frameworks/base/core/java/android/os/IWindowApps.aidl
@@ -0,0 +1,27 @@
+/* //device/java/android/android/os/IPowerManager.aidl
+**
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+
+package android.os;
+
+/**
+ * {@hide}
+ */
+interface IWindowApps
+{
+    void setWindowApps(String pkgName);
+    String getWindowApps();
+}
\ No newline at end of file
diff --git a/frameworks/base/core/java/android/view/IWindowSession.aidl b/frameworks/base/core/java/android/view/IWindowSession.aidl
index c32a2c9..947f4d8 100644
--- a/frameworks/base/core/java/android/view/IWindowSession.aidl
+++ b/frameworks/base/core/java/android/view/IWindowSession.aidl
@@ -191,4 +191,19 @@ interface IWindowSession {
     void onRectangleOnScreenRequested(IBinder token, in Rect rectangle, boolean immediate);
 
     IWindowId getWindowId(IBinder window);
+    
+     /**
+     * Ritter_Multi
+     */
+    void moveHomeToTop_WS();
+
+    /**
+     * Ritter_Multi
+     */
+    void moveTaskToTop_WS(int taskID);
+
+    /**
+     * Ritter_Multi
+     */
+    boolean getMyWindowStateAttrs(IWindow window, out Rect outRect);
 }
diff --git a/frameworks/base/core/java/android/view/ViewRootImpl.java b/frameworks/base/core/java/android/view/ViewRootImpl.java
index 0f633a0..3ddfc57 100644
--- a/frameworks/base/core/java/android/view/ViewRootImpl.java
+++ b/frameworks/base/core/java/android/view/ViewRootImpl.java
@@ -84,6 +84,9 @@ import java.io.PrintWriter;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.HashSet;
+import android.app.Activity;
+import android.app.WindowAppsManager;
+import java.util.Arrays;
 
 /**
  * The top of a view hierarchy, implementing the needed protocol between View
@@ -100,7 +103,7 @@ public final class ViewRootImpl implements ViewParent,
     private static final boolean LOCAL_LOGV = false;
     /** @noinspection PointlessBooleanExpression*/
     private static final boolean DEBUG_DRAW = false || LOCAL_LOGV;
-    private static final boolean DEBUG_LAYOUT = false || LOCAL_LOGV;
+    private static final boolean DEBUG_LAYOUT = true || LOCAL_LOGV;
     private static final boolean DEBUG_DIALOG = false || LOCAL_LOGV;
     private static final boolean DEBUG_INPUT_RESIZE = false || LOCAL_LOGV;
     private static final boolean DEBUG_ORIENTATION = false || LOCAL_LOGV;
@@ -146,6 +149,13 @@ public final class ViewRootImpl implements ViewParent,
 
     final WindowManager.LayoutParams mWindowAttributes = new WindowManager.LayoutParams();
 
+    // Ritter_multi
+    public WindowManager.LayoutParams getLayoutParams() {
+        return mWindowAttributes;
+    }
+
+    private boolean isFirstAddWindow = false;
+    // end
     final W mWindow;
 
     final int mTargetSdkVersion;
@@ -336,6 +346,7 @@ public final class ViewRootImpl implements ViewParent,
     }
 
     public ViewRootImpl(Context context, Display display) {
+        Log.d(TAG,"Ritter::VRI ViewRootImpl()");
         mContext = context;
         mWindowSession = WindowManagerGlobal.getWindowSession();
         mDisplay = display;
@@ -426,12 +437,22 @@ public final class ViewRootImpl implements ViewParent,
      * We have one child
      */
     public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {
+        Log.d(TAG,"Ritter::VRI setView() attrs x:"+attrs.x+"" +
+                                ",y:"+attrs.y+
+                                ",w:"+attrs.width+
+                                ",h:"+attrs.height+
+                                ",pkgName:"+attrs.packageName+
+                                ",isInWindowing:"+attrs.isInWindowing
+                                );
         synchronized (this) {
             if (mView == null) {
                 mView = view;
                 mViewLayoutDirectionInitial = mView.getRawLayoutDirection();
                 mFallbackEventHandler.setView(view);
                 mWindowAttributes.copyFrom(attrs);
+                //Ritter_multi
+                isFirstAddWindow = true;
+                //end
                 if (mWindowAttributes.packageName == null) {
                     mWindowAttributes.packageName = mBasePackageName;
                 }
@@ -750,6 +771,9 @@ public final class ViewRootImpl implements ViewParent,
     }
 
     void setLayoutParams(WindowManager.LayoutParams attrs, boolean newView) {
+        Log.d(TAG, "Ritter::VRI setLayoutParams() attrs x:" + attrs.x + "" + ",y:" + attrs.y
+                + ",w:" + attrs.width + ",h:" + attrs.height + ",pkgName:" + attrs.packageName
+                + ",isInWindowing:" + attrs.isInWindowing);
         synchronized (this) {
             int oldSoftInputMode = mWindowAttributes.softInputMode;
             // Keep track of the actual window flags supplied by the client.
@@ -825,6 +849,7 @@ public final class ViewRootImpl implements ViewParent,
 
     @Override
     public void requestLayout() {
+        Log.d(TAG,"Ritter VRI W handleMessage requestLayout()");
         if (!mHandlingLayoutInLayoutRequest) {
             checkThread();
             mLayoutRequested = true;
@@ -973,6 +998,7 @@ public final class ViewRootImpl implements ViewParent,
     }
 
     void scheduleTraversals() {
+        Log.d(TAG,"Ritter VRI W handleMessage scheduleTraversals()");
         if (!mTraversalScheduled) {
             mTraversalScheduled = true;
             mTraversalBarrier = mHandler.getLooper().postSyncBarrier();
@@ -1132,6 +1158,7 @@ public final class ViewRootImpl implements ViewParent,
 
     private void performTraversals() {
         // cache mView since it is used so much below...
+        Log.d(TAG,"Ritter::VRI performTraversals()");
         final View host = mView;
 
         if (DBG) {
@@ -1148,8 +1175,64 @@ public final class ViewRootImpl implements ViewParent,
         boolean windowSizeMayChange = false;
         boolean newSurface = false;
         boolean surfaceChanged = false;
-        WindowManager.LayoutParams lp = mWindowAttributes;
 
+        // Ritter_multi new
+        /*
+         * The mWindowAttributes set in WMS::addWindow() will lose, I don't know
+         * why, so I have to use my own method get its value and set here.
+         */
+        if (isFirstAddWindow) {
+            Rect out = new Rect();
+            if (getMyWindowStateAttrs(out)) {
+                Log.d(TAG, "Ritter::VRI performTraversals() out.x:" + out.left + ",y:" + out.top
+                        + ",w:" + (out.right - out.left) + ",h:" + (out.bottom - out.top));
+                mWindowAttributes.x = out.left;
+                mWindowAttributes.y = out.top;
+                mWindowAttributes.width = (out.right - out.left);
+                mWindowAttributes.height = (out.bottom - out.top);
+                mWindowAttributes.setWindowingParam();
+
+                if (mContext instanceof Activity) {
+                    Activity activity = (Activity) mContext;
+                    int screenWidth = activity.getWindowManager().getDefaultDisplay().getWidth();
+                    int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
+
+                    // Get window apps from service
+                    String APPs = "";
+                    WindowAppsManager mWindowAppsManager = (WindowAppsManager) mContext
+                            .getSystemService("window_apps");
+                    try {
+                        APPs = mWindowAppsManager.getWindowApps();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                    ArrayList<String> pkgList = new ArrayList<String>(
+                            Arrays.asList(APPs.split("#")));
+
+                    if (pkgList.contains(activity.getComponentName().getPackageName())
+                            && !activity.getComponentName().getPackageName().isEmpty()) {
+                        mWindowAttributes.isFullscreen = false;
+                    }
+
+                    // if (activity.getComponentName().getPackageName()
+                    // .equals("com.example.activity")) {
+                    // mWindowAttributes.isFullscreen = false;
+                    // }
+                }
+            }
+            isFirstAddWindow = false;
+        }
+        // end
+        
+        
+        WindowManager.LayoutParams lp = mWindowAttributes;
+        // Ritter_multi new
+        Log.d(TAG, "Ritter::VRI performTraversals() mWindowAttributes.mAttrs.x:"
+                + mWindowAttributes.x + ",mAttrs.y:" + mWindowAttributes.y + ",mAttrs.w:"
+                + mWindowAttributes.width + ",mAttrs.h:" + mWindowAttributes.height
+                + ",mAttrs.isInWindowing:" + mWindowAttributes.isInWindowing + ",mAttrs.pkgName:"
+                + mWindowAttributes.packageName);
+        // end
         int desiredWindowWidth;
         int desiredWindowHeight;
 
@@ -1343,6 +1426,11 @@ public final class ViewRootImpl implements ViewParent,
             }
             mAttachInfo.mOverscanRequested = (params.flags
                     & WindowManager.LayoutParams.FLAG_LAYOUT_IN_OVERSCAN) != 0;
+            Log.d(TAG, "Ritter::VRI performTraversals() params != null win.mAttrs.x:" + params.x
+                    + ",mAttrs.y:" + params.y + ",mAttrs.w:" + params.width + ",mAttrs.h:"
+                    + params.height + ",mAttrs.isInWindowing:" + params.isInWindowing
+                    + ",mAttrs.pkgName:" + params.packageName);
+
         }
 
         if (mFitSystemWindowsRequested) {
@@ -1676,7 +1764,27 @@ public final class ViewRootImpl implements ViewParent,
                         || mHeight != host.getMeasuredHeight() || contentInsetsChanged) {
                     int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);
                     int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);
-
+                    // Ritter_multi new
+                    /*int childWidthMeasureSpec, childHeightMeasureSpec;
+                    if (lp.isInWindowing) {
+                        // Force the window APP in here to MATCH_PARENT
+                        // otherwise, the ActionBarView will throw error
+                        childWidthMeasureSpec = getRootMeasureSpec(mWidth,
+                                ViewGroup.LayoutParams.FILL_PARENT);
+                        childHeightMeasureSpec = getRootMeasureSpec(mHeight,
+                                ViewGroup.LayoutParams.FILL_PARENT);
+                    } else {
+                        // childWidthMeasureSpec = getRootMeasureSpec(mWidth,
+                        // lp.width);
+                        // childHeightMeasureSpec = getRootMeasureSpec(mHeight,
+                        // lp.height);
+                        childWidthMeasureSpec = getRootMeasureSpec(mWidth,
+                                ViewGroup.LayoutParams.FILL_PARENT);
+                        childHeightMeasureSpec = getRootMeasureSpec(mHeight,
+                                ViewGroup.LayoutParams.FILL_PARENT);
+                    }*/
+                    // end
+                    
                     if (DEBUG_LAYOUT) Log.v(TAG, "Ooops, something changed!  mWidth="
                             + mWidth + " measuredWidth=" + host.getMeasuredWidth()
                             + " mHeight=" + mHeight
@@ -3057,7 +3165,9 @@ public final class ViewRootImpl implements ViewParent,
                 }
                 } // fall through...
             case MSG_RESIZED_REPORT:
+                Log.d(TAG,"Ritter VRI W handleMessage MSG_RESIZED_REPORT");
                 if (mAdded) {
+                    Log.d(TAG,"Ritter VRI W handleMessage MSG_RESIZED_REPORT mAdded==true");
                     SomeArgs args = (SomeArgs) msg.obj;
 
                     Configuration config = (Configuration) args.arg4;
@@ -5130,7 +5240,13 @@ public final class ViewRootImpl implements ViewParent,
 
     private int relayoutWindow(WindowManager.LayoutParams params, int viewVisibility,
             boolean insetsPending) throws RemoteException {
-
+        Log.d(TAG, "Ritter::VRI relayoutWindow()");
+        if (params != null) {
+            Log.d(TAG, "Ritter::VRI relayoutWindow() win.mAttrs.x:" + params.x + ",mAttrs.y:"
+                    + params.y + ",mAttrs.w:" + params.width + ",mAttrs.h:" + params.height
+                    + ",mAttrs.isInWindowing:" + params.isInWindowing + ",mAttrs.pkgName:"
+                    + params.packageName);
+        }
         float appScale = mAttachInfo.mApplicationScale;
         boolean restore = false;
         if (params != null && mTranslator != null) {
@@ -5335,6 +5451,7 @@ public final class ViewRootImpl implements ViewParent,
     }
 
     void doDie() {
+        Log.d(TAG,"Ritter::VRI doDie()");
         checkThread();
         if (LOCAL_LOGV) Log.v(TAG, "DIE in " + this + " of " + mSurface);
         synchronized (this) {
@@ -5684,6 +5801,72 @@ public final class ViewRootImpl implements ViewParent,
 
         @Override
         public void onInputEvent(InputEvent event) {
+            Log.d(TAG, "Ritter::VRI onInputEvent()");
+            if (event instanceof MotionEvent) {
+                Log.d(TAG, "Ritter::VRI onInputEvent() MotionEvent");
+                final MotionEvent motionEvent = (MotionEvent) event;
+                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
+                    Log.d(TAG, "Ritter::VRI onInputEvent() MotionEvent DOWN");
+                    Log.d(TAG, "Ritter::VRI onInputEvent() mWindowAttributes.packageName:"
+                            + mWindowAttributes.packageName);
+                    Log.d(TAG,
+                            "Ritter::VRI onInputEvent() mContext.getPackageName():"
+                                    + mContext.getPackageName() + ",mContext.getBasePackageName():"
+                                    + mContext.getBasePackageName()
+                                    + ",mContext.getOpPackageName():" + mContext.getOpPackageName());
+
+                    Activity activity = null;
+                    boolean isActivity = false;
+                    if (mContext instanceof Activity) {
+                        activity = (Activity) mContext;
+                        isActivity = true;
+                        Log.d(TAG,
+                                "Ritter::VRI onInputEvent() mContext instanceof Activity a.getTaskId():"
+                                        + activity.getTaskId());
+                    } else {
+                        Log.d(TAG, "Ritter::VRI onInputEvent() mContext !instanceof Activity ");
+                    }
+
+                    if (!mView.hasWindowFocus()) {
+                        // sWindowSession.handleFocusChange(mWindowAttributes.token);
+                        Log.d(TAG, "Ritter::VRI onInputEvent() !hasWindowFocus:"
+                                + mWindowAttributes.packageName);
+                        Log.d(TAG,
+                                "Ritter::VRI onInputEvent() !hasWindowFocus mContext.getPackageName():"
+                                        + mContext.getPackageName()
+                                        + ",mContext.getBasePackageName():"
+                                        + mContext.getBasePackageName()
+                                        + ",mContext.getOpPackageName():"
+                                        + mContext.getOpPackageName());
+                        Log.d(TAG,
+                                "Ritter::VRI onInputEvent() !hasWindowFocus mContext.getApplicationInfo().packageName:"
+                                        + mContext.getApplicationInfo().packageName
+                                        + ",mContext.getApplicationInfo().className:"
+                                        + mContext.getApplicationInfo().className);
+                        // Ritter_Multi
+                        if (isActivity && !mContext.getPackageName().equals("com.android.launcher")) {
+                            Log.d(TAG,
+                                    "Ritter::VRI onInputEvent() !hasWindowFocus: Not Touch on launcher:"
+                                            + mContext.getPackageName());
+                            try {
+                                mWindowSession.moveTaskToTop_WS(activity.getTaskId());
+                                // mWindowSession.moveHomeToTop_WS();
+                            } catch (RemoteException e) {
+                            }
+                        } else {
+                            Log.d(TAG,
+                                    "Ritter::VRI onInputEvent() !hasWindowFocus: Touch on launcher, do nothing");
+                        }
+                    } else {
+                        Log.d(TAG, "Ritter::VRI onInputEvent() hasWindowFocus:"
+                                + mWindowAttributes.packageName);
+                    }
+                } else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE) {
+                    Log.d(TAG, "Ritter::VRI onInputEvent() MotionEvent MOVE");
+                } else if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
+                    Log.d(TAG, "Ritter::VRI onInputEvent() MotionEvent UP");
+                }
+            }
             enqueueInputEvent(event, this, 0, true);
         }
 
@@ -6188,6 +6371,10 @@ public final class ViewRootImpl implements ViewParent,
         @Override
         public void resized(Rect frame, Rect overscanInsets, Rect contentInsets,
                 Rect visibleInsets, boolean reportDraw, Configuration newConfig) {
+            Log.d(TAG, "Ritter VRI W::resized() reportDraw:" + reportDraw);
+            // Ritter_multi new
+            // reportDraw = true;
+            // end
             final ViewRootImpl viewAncestor = mViewAncestor.get();
             if (viewAncestor != null) {
                 viewAncestor.dispatchResized(frame, overscanInsets, contentInsets,
@@ -6197,12 +6384,15 @@ public final class ViewRootImpl implements ViewParent,
 
         @Override
         public void moved(int newX, int newY) {
+            Log.d(TAG,"Ritter VRI W::moved() newX:"+newX+",newY:"+newY);
             final ViewRootImpl viewAncestor = mViewAncestor.get();
             if (viewAncestor != null) {
                 viewAncestor.dispatchMoved(newX, newY);
             }
         }
-
+        
+       
+        
         @Override
         public void dispatchAppVisibility(boolean visible) {
             final ViewRootImpl viewAncestor = mViewAncestor.get();
@@ -6334,6 +6524,87 @@ public final class ViewRootImpl implements ViewParent,
         }
     }
 
+    // Ritter_multi for public
+    @SuppressWarnings("finally")
+    public int relayoutWindowPublic(WindowManager.LayoutParams params, int viewVisibility,
+            boolean insetsPending) {
+        Log.d(TAG, "Ritter::VRI relayoutWindowPublic()");
+        if (params != null)
+            Log.d(TAG, "Ritter::VRI relayoutWindowPublic() params x:" + params.x + ",y:"
+                    + params.y + ",width:" + params.width + ",height:" + params.height
+                    + ",pkgName:" + params.packageName + ",isInWindowing:"
+                    + params.isInWindowing);
+        /*int res = 0;
+        try {
+            res = mWindowSession.relayout(mWindow, mSeq, params, 800, 800, viewVisibility,
+                    insetsPending ? WindowManagerGlobal.RELAYOUT_INSETS_PENDING : 0, mWinFrame,
+                    mPendingOverscanInsets, mPendingContentInsets, mPendingVisibleInsets,
+                    mPendingConfiguration, mSurface);
+        } catch (RemoteException e) {
+        } finally {
+            return res;
+        }*/
+        int res = 0;
+        float appScale = mAttachInfo.mApplicationScale;
+        boolean restore = false;
+        if (params != null && mTranslator != null) {
+            restore = true;
+            params.backup();
+            mTranslator.translateWindowLayout(params);
+        }
+        if (params != null) {
+            if (true)
+                Log.d(TAG, "WindowLayout in layoutWindow:" + params);
+        }
+        mPendingConfiguration.seq = 0;
+        // Log.d(TAG, ">>>>>> CALLING relayout");
+        if (params != null && mOrigWindowType != params.type) {
+            // For compatibility with old apps, don't crash here.
+            if (mTargetSdkVersion < android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                Slog.w(TAG, "Window type can not be changed after "
+                        + "the window is added; ignoring change of " + mView);
+                params.type = mOrigWindowType;
+            }
+        }
+        try {
+            if (params != null)
+                Log.d(TAG, "Ritter::VRI relayoutWindowPublic() before WMS::relayout params x:"
+                        + params.x + ",y:" + params.y + ",width:" + params.width + ",height:"
+                        + params.height + ",pkgName:" + params.packageName + ",isInWindowing:"
+                        + params.isInWindowing);
+            res = mWindowSession.relayout(mWindow, mSeq, params, params.width, params.height,
+                    viewVisibility, insetsPending ? WindowManagerGlobal.RELAYOUT_INSETS_PENDING
+                            : 0, mWinFrame, mPendingOverscanInsets, mPendingContentInsets,
+                    mPendingVisibleInsets, mPendingConfiguration, mSurface);
+        } catch (RemoteException e) {
+            return res;
+        }
+
+        if (restore) {
+            params.restore();
+        }
+
+        if (mTranslator != null) {
+            mTranslator.translateRectInScreenToAppWinFrame(mWinFrame);
+            mTranslator.translateRectInScreenToAppWindow(mPendingOverscanInsets);
+            mTranslator.translateRectInScreenToAppWindow(mPendingContentInsets);
+            mTranslator.translateRectInScreenToAppWindow(mPendingVisibleInsets);
+        }
+        return res;
+    }
+    
+    public boolean getMyWindowStateAttrs(Rect outRect) {
+        Log.d(TAG, "Ritter::VRI getMyWindowStateAttrs()");
+        boolean res = false;
+        try {
+            res = mWindowSession.getMyWindowStateAttrs(mWindow, outRect);
+        } catch (RemoteException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return res;
+    }
+    
     public static final class CalledFromWrongThreadException extends AndroidRuntimeException {
         public CalledFromWrongThreadException(String msg) {
             super(msg);
diff --git a/frameworks/base/core/java/android/view/Window.java b/frameworks/base/core/java/android/view/Window.java
index b3a0699..9b72cac 100644
--- a/frameworks/base/core/java/android/view/Window.java
+++ b/frameworks/base/core/java/android/view/Window.java
@@ -26,6 +26,7 @@ import android.os.Bundle;
 import android.os.IBinder;
 import android.os.SystemProperties;
 import android.view.accessibility.AccessibilityEvent;
+import android.util.Log;
 
 /**
  * Abstract base class for a top-level window look and behavior policy.  An
@@ -792,6 +793,9 @@ public abstract class Window {
      *          current values.
      */
     public void setAttributes(WindowManager.LayoutParams a) {
+        Log.d("Window", "Ritter::Window setAttributes() attrs x:" + a.x + "" + ",y:" + a.y + ",w:"
+                + a.width + ",h:" + a.height + ",pkgName:" + a.packageName + ",isInWindowing:"
+                + a.isInWindowing);
         mWindowAttributes.copyFrom(a);
         if (mCallback != null) {
             mCallback.onWindowAttributesChanged(mWindowAttributes);
diff --git a/frameworks/base/core/java/android/view/WindowManager.java b/frameworks/base/core/java/android/view/WindowManager.java
index 0ce4da5..b0cbcd9 100644
--- a/frameworks/base/core/java/android/view/WindowManager.java
+++ b/frameworks/base/core/java/android/view/WindowManager.java
@@ -104,7 +104,31 @@ public interface WindowManager extends ViewManager {
     public void removeViewImmediate(View view);
 
     public static class LayoutParams extends ViewGroup.LayoutParams
-            implements Parcelable {
+           implements Parcelable {
+        // Ritter_multi add a flag for windowing
+        public boolean isInWindowing = false;
+        public boolean isFullscreen = true;
+        public int WindowingX;
+        public int WindowingY;
+        public int WindowingW;
+        public int WindowingH;
+
+        public void setWindowingParam() {
+            WindowingX = x;
+            WindowingY = y;
+            WindowingW = width;
+            WindowingH = height;
+        }
+
+        public void getWindowingParam() {
+            x = WindowingX;
+            y = WindowingY;
+            width = WindowingW;
+            height = WindowingH;
+        }
+
+        // end
+        
         /**
          * X position for this window.  With the default gravity it is ignored.
          * When using {@link Gravity#LEFT} or {@link Gravity#START} or {@link Gravity#RIGHT} or
@@ -1525,6 +1549,14 @@ public interface WindowManager extends ViewManager {
         }
 
         public void writeToParcel(Parcel out, int parcelableFlags) {
+            // Ritter_multi
+            out.writeByte((byte) (isInWindowing ? 1 : 0));
+            out.writeByte((byte) (isFullscreen ? 1 : 0));
+            out.writeInt(WindowingX);
+            out.writeInt(WindowingY);
+            out.writeInt(WindowingW);
+            out.writeInt(WindowingH);
+            // end
             out.writeInt(width);
             out.writeInt(height);
             out.writeInt(x);
@@ -1567,6 +1599,14 @@ public interface WindowManager extends ViewManager {
     
     
         public LayoutParams(Parcel in) {
+            // Ritter_multi
+            isInWindowing = in.readByte() != 0;
+            isFullscreen = in.readByte() != 0;
+            WindowingX = in.readInt();
+            WindowingY = in.readInt();
+            WindowingW = in.readInt();
+            WindowingH = in.readInt();
+            // end
             width = in.readInt();
             height = in.readInt();
             x = in.readInt();
@@ -1631,8 +1671,44 @@ public interface WindowManager extends ViewManager {
         private int[] mCompatibilityParamsBackup = null;
         
         public final int copyFrom(LayoutParams o) {
+            Log.d("LayoutParams", "Ritter::WM LayoutParams.copyFrom() attrs x:" + o.x + "" + ",y:"
+                    + o.y + ",w:" + o.width + ",h:" + o.height + ",pkgName:" + o.packageName
+                    + ",isInWindowing:" + o.isInWindowing);
+            // Ritter_multi
+            if (packageName != null) {
+                Log.d("LayoutParams", "Ritter::WM LayoutParams.copyFrom() packageName!=null:"
+                        + packageName);
+            } else {
+                Log.d("LayoutParams", "Ritter::WM LayoutParams.copyFrom() packageName==null");
+            }
+            
             int changes = 0;
-    
+            // Ritter_multi
+            if (isInWindowing != o.isInWindowing) {
+                isInWindowing = o.isInWindowing;
+                changes |= LAYOUT_CHANGED;
+            }
+            if (isFullscreen != o.isFullscreen) {
+                isFullscreen = o.isFullscreen;
+                changes |= LAYOUT_CHANGED;
+            }
+            if (WindowingX != o.WindowingX) {
+                WindowingX = o.WindowingX;
+                changes |= LAYOUT_CHANGED;
+            }
+            if (WindowingY != o.WindowingY) {
+                WindowingY = o.WindowingY;
+                changes |= LAYOUT_CHANGED;
+            }
+            if (WindowingW != o.WindowingW) {
+                WindowingW = o.WindowingW;
+                changes |= LAYOUT_CHANGED;
+            }
+            if (WindowingH != o.WindowingH) {
+                WindowingH = o.WindowingH;
+                changes |= LAYOUT_CHANGED;
+            }
+                 
             if (width != o.width) {
                 width = o.width;
                 changes |= LAYOUT_CHANGED;
diff --git a/frameworks/base/core/java/android/view/WindowManagerGlobal.java b/frameworks/base/core/java/android/view/WindowManagerGlobal.java
index 96c0ed2..b3e6e99 100644
--- a/frameworks/base/core/java/android/view/WindowManagerGlobal.java
+++ b/frameworks/base/core/java/android/view/WindowManagerGlobal.java
@@ -113,6 +113,12 @@ public final class WindowManagerGlobal {
     private final ArrayList<ViewRootImpl> mRoots = new ArrayList<ViewRootImpl>();
     private final ArrayList<WindowManager.LayoutParams> mParams =
             new ArrayList<WindowManager.LayoutParams>();
+
+    // Ritter_multi new
+    public ArrayList<WindowManager.LayoutParams> getWindowManagerLayoutParams() {
+        return mParams;
+    }
+    
     private final ArraySet<View> mDyingViews = new ArraySet<View>();
     private boolean mNeedsEglTerminate;
 
@@ -167,6 +173,7 @@ public final class WindowManagerGlobal {
     public String[] getViewRootNames() {
         synchronized (mLock) {
             final int numRoots = mRoots.size();
+            Log.d(TAG,"Ritter::WMG getViewRootNames numRoots:"+numRoots);
             String[] mViewRoots = new String[numRoots];
             for (int i = 0; i < numRoots; ++i) {
                 mViewRoots[i] = getWindowName(mRoots.get(i));
diff --git a/frameworks/base/core/res/res/drawable-hdpi/ic_close.png b/frameworks/base/core/res/res/drawable-hdpi/ic_close.png
new file mode 100644
index 0000000000000000000000000000000000000000..778c7f0812d8d59d7ec939c631119a902e589ee9
GIT binary patch
literal 1391
zcmV-#1(5oQP)<h;3K|Lk000e1NJLTq001xm001xu1ONa4{R=S+00002VoOIv0RM-N
z%)bBt010qNS#tmY07w7;07w8v$!k6U000Sga6xAP001xm001xm&hCs?000DcNkl<Z
zSi|j?Piz}S6vp4%*|md{-C0L1MYYpJz##~!L`_mbypB^M4xyB&q6ZFe;)*EwgTx7m
z1E^9H6M@7DwO7OeP$98JIn<#EssyD7Bv2eg(~TWL6$nXo)9!e7IINR6_S#MnkwD5P
z`8M<Y_KoJfZw#=nef@8R#ou16_7=YcyWVtft91Y*5Nd^!a@R))DA(MkAizbGyWnJ~
zl>ngbTigy2<U)GH9q5ew{HHZ7rV$ljqMAJe5YXG$+aCTlC#Bq<2=cPEQaO-|P@6k&
zrtKO%cL-v^L_2YWe-$$Ji&i<%55~De*XWrxcOcZpMfoR_%8e}6_1Gs(4Ta-MbK~T}
zRdT`X<5_eo>`#dwm3%KVlF_q@R2XQu99UR~Y{iNA92xyBdQg3wFt<n6v=p_7Wu7QQ
z$T%pjE4c)VjYWo$2|_-&d-1mT0rI=3;LZFMCDp8|1~OrQO4HOP>t;Wn+d{~AT70AA
z6Rc+}Is%Re;5fdzgwx{dO1BC?0R94b(Z;l{QUe?j2bHF%P1ej_K94Q{$oP!7uH+L=
z&scOsc=n@<f!WB_huvl1^#B}hV>fpeEs~}xje{fNpwX0WNw(R~=TO4a#lsmdu~%jz
znValoWc4cmaA5%x+%hea)~RNIBMhKgO1GqS^AGOAhLTILSTZs!91*~z_w|`$>;)|N
zTxTBufD7~3%Wcz=Qe}uEW>{M6W3gmpNH`*Z@8C#InT=*T*(G25DgX}=uSA45aIMub
zw(W;=%1k74lzm>szA6B~g<r6bTRRXsom6>CvSp`z2b-*FUjqQ(LKgdqRp?p_91(*?
z`V{pp=0wr{82hY-eN8|Kf=q>VEe0G6hye!$CvYgQ%(i5nU?11CuLJN9%lyMzt2n7O
zQUeO$f(++j)C|r%bY-sad>#ABVdo<R1P~y$M}-R@KuEg^fI1b(I4JHYzxFxCc*|?R
zK?Vsp#6i=i!Yky6nJ9MmKLp75w79X=R!qov9%jJ+w$&GQ#TdK?fQ*CU`=Y&fF(;(a
zTbEa<9s@@hplK;;ll3}Pkm~lQ#C0W~U_Il};mv!W56;NuRCu#5RO$`$S_o3z{yQb-
z4djxxIy|i{SY)&H;-JzrwTR^#Ni_g6KI>~A&D>-wZfi+*ZzGoZTfPV%fPzfCzQaC=
zBRORzlIdo1C}BTeGc75lYb6MqT&RNZ37n(wwz5=WUyPGX2fKs?;ldpDa@(|})K*@o
zG(~OqjRhA%!0G`wEWw&lh>t}_1lzJdoax>g$S%xdKVLI#;vtwYu(@GUCz4pGA2<jA
z-O`iqJ#dyVp-9PMT6MBdONN3Ab9jQUn-)n^RWp!@9{K)I>VU9!75dQ8`Dn5!SRmwG
zXK2YwtMWK;A?u}{ln&FTm;}5%_yy*F-_^4v#1^92#^)N|zw=5yaP`5jvIV~|bYUKk
z^Sg^1IHexAuQT|f{iPY2W-H|t?D^BNLi)e_`1RLbKHp1@ZV&%}>}y~DDg6z^7lFuI
ztd^z#001R)MObuXVRU6WV{&C-bY%cCFflPLFflDNF;p=#IyE;sFflDKI65#eL6wV#
z0000bbVXQnWMOn=I&E)cX=Zr<GB7bQEif@HGci;#GdeXeIx#gZFgQ9eFzWFP&j0`b
x8FWQhbW?9;ba!ELWdK2BZ(?O2No`?gWm08fWO;GPWjp`?002ovPDHLkV1oFUYD544

literal 0
HcmV?d00001

diff --git a/frameworks/base/core/res/res/drawable-hdpi/ic_max.png b/frameworks/base/core/res/res/drawable-hdpi/ic_max.png
new file mode 100644
index 0000000000000000000000000000000000000000..5dcc3a3dae34ac3b9dedbf5900282b11a6dbb315
GIT binary patch
literal 961
zcmeAS@N?(olHy`uVBq!ia0vp^1|ZDA0wn)(8}a}trX+877l!}s{b%+Ad7K3vk;OpT
z1B~5HX4`=T%L*LRfizez!?|}o;XrLCJzX3_A`ZWu?(GqhD0001`R?*{ef<-33KAV>
zM5<g_HMK=#TK9tMi(LCte=mr=pmoCc!m2Pw$8H5CaowWJ*@@i~rb#I&MWw8;-BObF
z?)zM^#}6#-Rj0FQFR__D^XD_`=ilcZ|9ihW@$$dQ$)$g!b9V(A1)Tf5<D`GKsJc+$
z%roJ04o+p|@KSg82%WkqK{9c{jpO~^50<{PE2#SZ^j2jl$5StD4JYBhRoC;R=ltvw
zk$J?>BiU42r=R#|nvmNHyU9&eaUYA;lr!XcKD6zh!{~YLzzZRDA8|`oXCsCCqI0MH
z*)EvZGuzUaEn~sWwzbu}ZMJM#oy~Z9;<o4ZTiN`}?WE_w`tHAL>qO^|cSDO$+`0Mb
zRm@x$(^VV-6Id??g}=6}*_+Nab?ZZy-CO1vO{^8unOu`|+L5K+RDrwT%jJ1{9#1*i
z<)r*pcV*mHCGREk&b;{YVI8~MW41b0g^c3IImcW7+NQ-_Hd<A?ShHQ`TKU;U6K^JG
zKG_!Md3~vGPIuVX1K$_kj#1KP%=e9NXj*93Q_R<xaQ2Q015bh|C+7*B?a>!mEH&5X
zE)7;mtK3+y)uU-in9{aoO}4K$`5vfeSP}4M^4Wix4ptAdqRkx+)Mlvp`CRAUaKWNl
z%)?UE>5?#`pJIFWR2Fub$?dtC3daw66nZgv%x(WMX-*2e?9T;4S}aWwD>)Jl?u*;;
zRCm`CPrhDJQOD3Narato7({C-RQ&sSH0GxIZdD`KR8GlR(HeRoDhC+m{z_>-=+Cjf
zV%EoXwUTwKn#F^8wIu3xyxu8yOzY%=nZ^?|es+0;<^8HiDr_~rufKEmG^Q(zVvdj5
zszcc#a};9~3oeOR9uWTUK_kCQV9lEz&1YH-TTe{bcB-aTD&xc}nUgEMPOg9a=IH8I
z6Kfk8)h1ZXS86!exH8ko^y;3Hmit*^Q|E`yd0{>~WJA!of8Vn2FUvLg&Du4e!N_=N
z{9#}US1oakC`m~yNwrEYN(E93Mh1q4x&|h?MrI)fmR825R>sD<2If`<2K>tFcA{v=
z%}>cptHiCLu1<^<s6i5BLvVgtNqJ&XDuZK6ep0G}XKrG8YEWuoN@d~6R2!fo22WQ%
Jmvv4FO#sNvlKB7t

literal 0
HcmV?d00001

diff --git a/frameworks/base/core/res/res/drawable-hdpi/ic_mini.png b/frameworks/base/core/res/res/drawable-hdpi/ic_mini.png
new file mode 100644
index 0000000000000000000000000000000000000000..d4704a4e94de6e38b676ec00c7e15e243db08d1e
GIT binary patch
literal 687
zcmV;g0#N;lP)<h;3K|Lk000e1NJLTq001xm001xu1ONa4{R=S+00001b5ch_0Itp)
z=>Px#0%A)?L;(MXkIcUS000SaNLh0L01FcU01FcV0GgZ_00007bV*G`2i^t*2qiMg
z^<~!p00J{fL_t(o!|j*PY7<cu#((F|pH6gAG8RiU2yrI}3T{n6p^wmK2*uWgK7t57
zfDP>v6kND-uca?g_i78ZZ4}XBO*NCuTo;q3(@@(<y;D%~-PH^;-*@l%ch7+lMmQ%p
z09;`*^<)q>0Am2S`AC2d%<~8+q~wgEPK0Kze+t8xV1<Y-ng>87^M5MqhY>5pSbXIj
zFk$`#irZ*DQ|o)dI4V8*5(T_G;^-PRAi%}S!_7XEK!AhQ%ZtBEtK)JxP!5*Z=Cbza
zTi-nky){VG1&Zu5!!(*Lz^6#d_Py{|*NSy4DCER-+U|=$oi;nH@rq?`0s#s|`3x43
zw3R!8E|&Moby@r=P8?X5<VEf2>X!Q<T*pCY;_I+Y>llFx><fC3<o?p@=6L)2Gw_~d
z+p&(?8@!~2BwUh`((bMBZGB<UlL!%DmrY%;LQz_DCUOd_F|*lS=KX<yeMo<`xLuuV
zER4lHdMHs6;!LIiAV#sPL{JIiK(W)%P{tF~?z79z9z0*~R2m+U76HETacC25pfz!_
z-waN^xAdkt-VU9NF?6Dnap(X(KbWO~5Mw8#;u5Cg?#3`-I%qEeUm>$Z#B|X#rK)hJ
zY=x4tDVO*_BGEz9<StOcML-bLDNBZy_(ZjT6WIBj;{TIy^OP`l>Hk@xV787NmH5Im
za3>#$!`AV->1uc&p_w<|{3a3?frmT>JoD|lof<uI8bA`lDK6(V-<%g@G!FlZ_zex(
V$a!bHlji^c002ovPDHLkV1jUeF{J<i

literal 0
HcmV?d00001

diff --git a/frameworks/base/core/res/res/drawable-hdpi/ic_resize.png b/frameworks/base/core/res/res/drawable-hdpi/ic_resize.png
new file mode 100644
index 0000000000000000000000000000000000000000..c2fc70d594785f6532d9e587735bf68616b8c448
GIT binary patch
literal 1298
zcmeAS@N?(olHy`uVBq!ia0vp^1|ZDA0wn)(8}a}trX+877l!}s{b%+Ad7K3vk;OpT
z1B~5HX4`=T%L*LRfizez!?|}o;S3BcQl2i3ArXh)PWR3UNfkL>|9toTJyx~ir@S?U
zdlYS)4jp!yAaPjv;*Nr)+`Wd51{;bOYlo}N>M%Uk`YvY127|=J2!}_?vm}ICjvUbt
z49IR&a?NU7IQQk5x$mv@(!AvFSZ`nY%I%zQTH*Vj=l=iM|5>I&;eYhR`l}ZVdAgrO
zSY3Gh&}ePZGkG?FDWY!{2>)nauc_bC*jusO;s3L_=TqIEG)qtQo^$xYd+`G<g}Y=X
zR9)F8wnr{ScV+7jdufMP|JH|WS(D+pcTw>s<-$xu-UXr|KesH*V9j~Vwtewgxxy8T
zelC&dadf;k(QWgEN3xH6*Pe<Bw$Qyar#;}w?~k)j?5%klEBf}#y<6LJ-zq!0>L%x9
zb4C3zzAOAUX?E;nr3lMdIe~pX2@_6EtXi77|H>7!MHi2%->eFmRr%hq$bqfuN=H7I
zf&=T4mZLL!{Fzlh3U->Q#`UDxs@X}ZF^Y6Oo^ns8uH&$g)V>@4%6|FJ)9DLs+Hy=r
ztnli!GbgvjnQYtYlN_+>)6Wm*53?0b;l93o65rYN<z4A#SMV$S6@FY({(IX7X7`-$
zvm#GA^RPyExrKQ&Na;(q{o!vc6x=Q?@%*Mr|IB5fcESz^9$F}xe7dB~q_?SO4#Oj1
zu0k~j=btNAI)6PACgM0l^3*T!nfwlOd?dvuT`HS4qvidrA6IMScNb*`n5de(wEdi_
zz_9xB^lekNebL=rb$5<tO}aYU(nZAud3-!93wGy!xOvU?{o0)uKAwA(a6aGveq6}K
zxjRGWO23x+%=Jm<qmu9%`Pg0MUw`i`y|+6&c=mLe8{fRA@2yzn5N+_`;z{Q`N5`;_
zThE+Q=9j;Az|!#1m%@E-?e;vJedzSt?x1{K`;?u%mzU|xVv_LMwD|7=PA7Fnfd>(f
z`koz&t`fO>_4B1Z?)~hd_e&P2v3b?H%FdHA&C&?nxbJvq&CIv|D&DVJnrdI^Zts>B
z?j*MIhC()zq0!qp4s5JkYfi>|oNSjD;+V|tx25t^-HM7O)+<~~y)Oo^cmF)V?Dnwp
zn_a)pj)y{azNLOVAx6xH^J6;luSaD@cPX8_T>a|jhJU}5;zQoQI>M--Ap7p_y{P<M
zo_!%lFFk$GdS}^JNtw!@r{t&3yIg;F=9&o>3>zJ~<<_w41(t1&UeM-xHn1skcZf-Y
z`krU!y&`Lx3Xfh|pLwp>_0p9s&gZIoc4f|UtL)#@xcAAVKVla*to{7w(bHY~|9reU
zh1Ze8@_6UUOWn79>yu_|TT*+dEwOQL!zzOtRnOEoLf84)i_dpe?os)X@8sXVWQm=6
z%9kR6jWI`<Rob=%N@qE^UOa!~zV+8xTe#*PW`6W^S>ZON8MR%H(t~H*KG9Rm=yojs
zOZUY~7S5IOrm|xH;@>EWF>l}DlzVX7J9n{j4pOs^?J4VJ{}g}fzI6EZ#WLK*Ex;l}
zwZt`|BqgyV)hf9t6-Y4{85kPs8W`#tS%erFS(%tynHuXFSXdbtEb%KkiJ~DlKP5A*
z61Rq{!lz1s8YDqB1m~xflqVLYGB~E>C#5QQ<|d}62BjvZR2H60wE-$(@O1TaS?83{
F1OU;uOX~mt

literal 0
HcmV?d00001

diff --git a/frameworks/base/core/res/res/layout/window_title.xml b/frameworks/base/core/res/res/layout/window_title.xml
new file mode 100644
index 0000000..7f1bd90
--- /dev/null
+++ b/frameworks/base/core/res/res/layout/window_title.xml
@@ -0,0 +1,88 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="left"
+    android:orientation="horizontal" >
+
+<!--     <ImageButton
+        android:id="@+id/IB_resize"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:src="@drawable/ic_resize"/>
+
+    <ImageButton
+        android:id="@+id/IB_close"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentTop="true"
+        android:src="@drawable/ic_close" />
+
+    <ImageButton
+        android:id="@+id/IB_max"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_toLeftOf="@+id/IB_close"
+        android:src="@drawable/ic_max" />
+
+    <ImageButton
+        android:id="@+id/IB_mini"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_toLeftOf="@+id/IB_max"
+        android:src="@drawable/ic_mini" />
+
+    <TextView
+        android:id="@+id/TV_drag"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_toLeftOf="@+id/IB_mini"
+        android:layout_toRightOf="@+id/IB_resize" /> -->
+
+    <TextView
+        android:id="@+id/TV_drag"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_toLeftOf="@+id/IB_resize"
+        android:layout_toRightOf="@+id/IB_max"
+         />
+
+    <ImageButton
+        android:id="@+id/IB_close"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentTop="true"
+        android:src="@drawable/ic_close" />
+
+    <ImageButton
+        android:id="@+id/IB_resize"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentTop="true"
+        android:src="@drawable/ic_resize" />
+
+    <ImageButton
+        android:id="@+id/IB_mini"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_toRightOf="@+id/IB_close"
+        android:src="@drawable/ic_mini" />
+
+    <ImageButton
+        android:id="@+id/IB_max"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_toRightOf="@+id/IB_mini"
+        android:src="@drawable/ic_max" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/frameworks/base/core/res/res/values/symbols.xml b/frameworks/base/core/res/res/values/symbols.xml
index 6d90973..db86d40 100644
--- a/frameworks/base/core/res/res/values/symbols.xml
+++ b/frameworks/base/core/res/res/values/symbols.xml
@@ -1757,4 +1757,16 @@
   <java-symbol type="dimen" name="subtitle_shadow_radius" />
   <java-symbol type="dimen" name="subtitle_shadow_offset" />
   <java-symbol type="dimen" name="subtitle_outline_width" />
+  
+  <!-- For multi window -->
+  <java-symbol type="layout" name="window_title" />
+  <java-symbol type="id" name="TV_drag" />
+  <java-symbol type="id" name="IB_resize" />
+  <java-symbol type="id" name="IB_mini" />
+  <java-symbol type="id" name="IB_max" />
+  <java-symbol type="id" name="IB_close" />
+  <java-symbol type="drawable" name="ic_resize" />
+  <java-symbol type="drawable" name="ic_mini" />
+  <java-symbol type="drawable" name="ic_max" />
+  <java-symbol type="drawable" name="ic_close" />
 </resources>
diff --git a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
index 44fc1f8..567d1bc 100644
--- a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
+++ b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
@@ -20,39 +20,39 @@ import static android.view.View.MeasureSpec.EXACTLY;
 import static android.view.View.MeasureSpec.getMode;
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-import static android.view.WindowManager.LayoutParams.*;
+import static android.view.WindowManager.LayoutParams.FLAG_FULLSCREEN;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_OVERSCAN;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
+import static android.view.WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
+import static android.view.WindowManager.LayoutParams.FLAG_SPLIT_TOUCH;
+import static android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION;
+import static android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;
 
-import android.view.ViewConfiguration;
-
-import com.android.internal.R;
-import com.android.internal.view.RootViewSurfaceTaker;
-import com.android.internal.view.StandaloneActionMode;
-import com.android.internal.view.menu.ContextMenuBuilder;
-import com.android.internal.view.menu.IconMenuPresenter;
-import com.android.internal.view.menu.ListMenuPresenter;
-import com.android.internal.view.menu.MenuBuilder;
-import com.android.internal.view.menu.MenuDialogHelper;
-import com.android.internal.view.menu.MenuPresenter;
-import com.android.internal.view.menu.MenuView;
-import com.android.internal.widget.ActionBarContainer;
-import com.android.internal.widget.ActionBarContextView;
-import com.android.internal.widget.ActionBarOverlayLayout;
-import com.android.internal.widget.ActionBarView;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.AlertDialog;
 import android.app.KeyguardManager;
+import android.app.WindowAppsManager;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.PixelFormat;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.net.Uri;
 import android.os.Bundle;
-import android.os.Debug;
 import android.os.Handler;
 import android.os.Parcel;
 import android.os.Parcelable;
@@ -62,7 +62,6 @@ import android.util.AndroidRuntimeException;
 import android.util.DisplayMetrics;
 import android.util.EventLog;
 import android.util.Log;
-import android.util.Slog;
 import android.util.SparseArray;
 import android.util.TypedValue;
 import android.view.ActionMode;
@@ -80,6 +79,9 @@ import android.view.MenuItem;
 import android.view.MotionEvent;
 import android.view.SurfaceHolder;
 import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnTouchListener;
+import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.view.ViewManager;
 import android.view.ViewParent;
@@ -87,18 +89,35 @@ import android.view.ViewRootImpl;
 import android.view.ViewStub;
 import android.view.Window;
 import android.view.WindowManager;
+import android.view.WindowManagerGlobal;
 import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 import android.widget.FrameLayout;
+import android.widget.ImageButton;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 import android.widget.ProgressBar;
+import android.widget.RelativeLayout;
 import android.widget.TextView;
+import android.widget.Toast;
 
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
+import com.android.internal.R;
+import com.android.internal.view.RootViewSurfaceTaker;
+import com.android.internal.view.StandaloneActionMode;
+import com.android.internal.view.menu.ContextMenuBuilder;
+import com.android.internal.view.menu.IconMenuPresenter;
+import com.android.internal.view.menu.ListMenuPresenter;
+import com.android.internal.view.menu.MenuBuilder;
+import com.android.internal.view.menu.MenuDialogHelper;
+import com.android.internal.view.menu.MenuPresenter;
+import com.android.internal.view.menu.MenuView;
+import com.android.internal.widget.ActionBarContainer;
+import com.android.internal.widget.ActionBarContextView;
+import com.android.internal.widget.ActionBarOverlayLayout;
+import com.android.internal.widget.ActionBarView;
 
 /**
  * Android-specific Window.
@@ -232,9 +251,28 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
     }
 
     static final RotationWatcher sRotationWatcher = new RotationWatcher();
-
+    // Ritter_multi
+    private Context mContext;
+    private String mPKGName = "";
+    static int sDownX = 0;
+    static int sDownY = 0;
+    private long mExitTime = 0l;
+
+    // end
+    
     public PhoneWindow(Context context) {
         super(context);
+        //Ritter_multi
+        mContext = context;
+        if (mContext instanceof Activity) {
+            Activity activity = (Activity) mContext;
+            if (activity != null && activity.getComponentName() != null) {
+                mPKGName = activity.getComponentName().getPackageName();
+            }
+        }
+        Log.d(TAG, "Ritter PW::PhoneWindow() mPKGName:" + mPKGName);
+
+        // end
         mLayoutInflater = LayoutInflater.from(context);
     }
 
@@ -1932,6 +1970,11 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             mFeatureId = featureId;
         }
 
+        // Ritter_multi
+        public Rect getDrawingBounds() {
+            return mDrawingBounds;
+        }
+        
         @Override
         public boolean dispatchKeyEvent(KeyEvent event) {
             final int keyCode = event.getKeyCode();
@@ -2364,6 +2407,7 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
 
         @Override
         public ActionMode startActionMode(ActionMode.Callback callback) {
+            Log.d(TAG,"Ritter::PW startActionMode()");
             if (mActionMode != null) {
                 mActionMode.finish();
             }
@@ -2800,7 +2844,17 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
 
     protected ViewGroup generateLayout(DecorView decor) {
         // Apply data from current theme.
-
+        // Ritter_multi new
+        Log.d(TAG, "Ritter PW::generateLayout() mPKGName:" + mPKGName);
+        if (mContext instanceof Activity) {
+            Activity activity = (Activity) mContext;
+            if (activity != null && activity.getComponentName() != null) {
+                mPKGName = activity.getComponentName().getPackageName();
+            }
+        }
+        Log.d(TAG, "Ritter PW::generateLayout() mPKGName2:" + mPKGName);
+        boolean isAllowToAddWindowTitlebar = false;
+        // end
         TypedArray a = getWindowStyle();
 
         if (false) {
@@ -2812,7 +2866,19 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             }
             System.out.println(s);
         }
-
+        // Ritter_multi
+        if (true) {
+            // System.out.println("From style:");
+            String s = "Attrs:";
+            for (int i = 0; i < com.android.internal.R.styleable.Window.length; i++) {
+                s = s + " " + Integer.toHexString(com.android.internal.R.styleable.Window[i]) + "="
+                        + a.getString(i);
+            }
+            System.out.println(s);
+            Log.d(TAG, "Ritter PW::generateLayout() s:" + s);
+        }
+        // end
+        
         mIsFloating = a.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating, false);
         int flagsToUpdate = (FLAG_LAYOUT_IN_SCREEN|FLAG_LAYOUT_INSET_DECOR)
                 & (~getForcedWindowFlags());
@@ -2965,6 +3031,7 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         int features = getLocalFeatures();
         // System.out.println("Features: 0x" + Integer.toHexString(features));
         if ((features & ((1 << FEATURE_LEFT_ICON) | (1 << FEATURE_RIGHT_ICON))) != 0) {
+            Log.d(TAG, "Ritter PW::generateLayout() features A");
             if (mIsFloating) {
                 TypedValue res = new TypedValue();
                 getContext().getTheme().resolveAttribute(
@@ -2978,11 +3045,15 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             // System.out.println("Title Icons!");
         } else if ((features & ((1 << FEATURE_PROGRESS) | (1 << FEATURE_INDETERMINATE_PROGRESS))) != 0
                 && (features & (1 << FEATURE_ACTION_BAR)) == 0) {
+            Log.d(TAG, "Ritter PW::generateLayout() features B");
             // Special case for a window with only a progress bar (and title).
             // XXX Need to have a no-title version of embedded windows.
             layoutResource = com.android.internal.R.layout.screen_progress;
             // System.out.println("Progress!");
         } else if ((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) {
+            // Ritter multi always action bar APPs
+            Log.d(TAG, "Ritter PW::generateLayout() features C");           
+            
             // Special case for a window with a custom title.
             // If the window is floating, we need a dialog layout
             if (mIsFloating) {
@@ -2998,20 +3069,29 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
         } else if ((features & (1 << FEATURE_NO_TITLE)) == 0) {
             // If no other features and not embedded, only need a title.
             // If the window is floating, we need a dialog layout
+            Log.d(TAG, "Ritter PW::generateLayout() features D");
+            isAllowToAddWindowTitlebar = true;
             if (mIsFloating) {
                 TypedValue res = new TypedValue();
                 getContext().getTheme().resolveAttribute(
                         com.android.internal.R.attr.dialogTitleDecorLayout, res, true);
                 layoutResource = res.resourceId;
             } else if ((features & (1 << FEATURE_ACTION_BAR)) != 0) {
+                // Ritter multi always dialog
+                Log.d(TAG, "Ritter PW::generateLayout() features E");
                 layoutResource = com.android.internal.R.layout.screen_action_bar;
             } else {
+                
                 layoutResource = com.android.internal.R.layout.screen_title;
             }
             // System.out.println("Title!");
         } else if ((features & (1 << FEATURE_ACTION_MODE_OVERLAY)) != 0) {
             layoutResource = com.android.internal.R.layout.screen_simple_overlay_action_mode;
         } else {
+         // Ritter multi always full screen APPs
+            Log.d(TAG, "Ritter PW::generateLayout() features F else");
+            isAllowToAddWindowTitlebar = true;
+            // end
             // Embedded, so no decoration is needed.
             layoutResource = com.android.internal.R.layout.screen_simple;
             // System.out.println("Simple!");
@@ -3019,9 +3099,152 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
 
         mDecor.startChanging();
 
-        View in = mLayoutInflater.inflate(layoutResource, null);
-        decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
+        // Ritter_multi old
+        // View in = mLayoutInflater.inflate(layoutResource, null);
+        // decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT,
+        // MATCH_PARENT));
+
+        // Ritter_multi new
+        // Get window apps from service
+        String APPs = "";
+        WindowAppsManager mWindowAppsManager = (WindowAppsManager) mContext
+                .getSystemService("window_apps");
+        try {
+            APPs = mWindowAppsManager.getWindowApps();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        ArrayList<String> pkgList = new ArrayList<String>(Arrays.asList(APPs.split("#")));
+        Log.d(TAG, "Ritter PW::generateLayout() APPs:" + APPs);
+
+        Log.d(TAG, "Ritter PW::generateLayout() pkgList.size:" + pkgList.size() + " ,pkgList:"
+                + pkgList);
+
+        if (isAllowToAddWindowTitlebar && pkgList.contains(mPKGName) && !mPKGName.isEmpty()) {
+            Log.d(TAG, "Ritter PW::generateLayout() mPKGName:" + mPKGName + " Add title");
+            Log.d(TAG, "Ritter PW::generateLayout() APPs:" + APPs);
+
+            View in = mLayoutInflater.inflate(layoutResource, null);
+
+            LinearLayout out = new LinearLayout(mContext);
+            out.setOrientation(LinearLayout.VERTICAL);
+
+            int window_title_id = com.android.internal.R.layout.window_title;
+            RelativeLayout title = (RelativeLayout) mLayoutInflater.inflate(window_title_id, null);
+            title.setBackgroundColor(Color.BLACK);
+
+            ImageButton closeBtn = (ImageButton) title.findViewById(R.id.IB_close);
+            closeBtn.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Activity activity = (Activity) mContext;
+                    Log.d(TAG,
+                            "Ritter PW::close activity.getComponentName():"
+                                    + activity.getComponentName());
+                    // showForceCloseDialog();
+                    if ((System.currentTimeMillis() - mExitTime) > 2000) {
+                        Toast.makeText(mContext, "One more click to exit", Toast.LENGTH_SHORT)
+                                .show();
+                        mExitTime = System.currentTimeMillis();
+                    } else {
+                        killMyCurrentTask();
+                    }
+                }
+            });
 
+            ImageButton minimumBtn = (ImageButton) title.findViewById(R.id.IB_mini);
+            minimumBtn.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Toast.makeText(mContext, "minimumBtn", Toast.LENGTH_SHORT).show();
+                }
+            });
+
+            final ImageButton resizeBtn = (ImageButton) title.findViewById(R.id.IB_resize);
+            final TextView tv = (TextView) title.findViewById(R.id.TV_drag);
+            ImageButton maxmumBtn = (ImageButton) title.findViewById(R.id.IB_max);
+            maxmumBtn.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    // resizeBtn.setEnabled(!resizeBtn.isEnabled());
+                    if (resizeBtn.getVisibility() == View.VISIBLE) {
+                        resizeBtn.setVisibility(View.INVISIBLE);
+                        tv.setVisibility(View.INVISIBLE);
+                    } else {
+                        resizeBtn.setVisibility(View.VISIBLE);
+                        tv.setVisibility(View.VISIBLE);
+                    }
+                    // int screenWidth =
+                    // getWindowManager().getDefaultDisplay().getWidth();
+                    // int screenHeight =
+                    // getWindowManager().getDefaultDisplay().getHeight();
+                    // Toast.makeText(mContext,
+                    // "maxmumBtn screenWidth:"+screenWidth+",screenHeight:"+screenHeight,
+                    // Toast.LENGTH_SHORT).show();
+                    toggleFullscreen();
+                    /**
+                     * Ritter_multi I don't know why the toggleFullScreen()
+                     * sometimes won't refresh, But the moveAndResizeWindows()
+                     * always refresh, so I call it as a trick.
+                     */
+                    moveAndResizeWindows(0, 0, 0, 0);
+                }
+            });
+
+            tv.setText("Drag Area");
+            tv.setTextSize(20);
+            tv.setOnTouchListener(new OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                        sDownX = (int) event.getRawX();
+                        sDownY = (int) event.getRawY();
+                    } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                        int newX = (int) event.getRawX();
+                        int newY = (int) event.getRawY();
+                        Log.d(TAG, "Ritter::PW onTouch TextView MOVE new x:" + newX + ",y:" + newY);
+                        moveAndResizeWindows((newX - sDownX), (newY - sDownY), 0, 0);
+                        sDownX = (int) event.getRawX();
+                        sDownY = (int) event.getRawY();
+                    } else if (event.getAction() == MotionEvent.ACTION_UP) {
+                    }
+                    return true;
+                }
+            });
+
+            resizeBtn.setOnTouchListener(new OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                        sDownX = (int) event.getRawX();
+                        sDownY = (int) event.getRawY();
+                    } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                        int newX = (int) event.getRawX();
+                        int newY = (int) event.getRawY();
+                        Log.d(TAG, "Ritter::PW onTouch resizeBtn MOVE new x:" + newX + ",y:" + newY);
+                        moveAndResizeWindows(0, (newY - sDownY), (newX - sDownX), (sDownY - newY));
+                        sDownX = (int) event.getRawX();
+                        sDownY = (int) event.getRawY();
+                    } else if (event.getAction() == MotionEvent.ACTION_UP) {
+
+                    }
+                    return true;
+                }
+
+            });
+
+            out.addView(title);
+            out.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
+
+            decor.addView(out, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
+        } else {
+            Log.d(TAG, "Ritter PW::generateLayout() mPKGName:" + mPKGName + " don't add title");
+            View in = mLayoutInflater.inflate(layoutResource, null);
+            decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
+        }
+        // end
+        
+       
         ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);
         if (contentParent == null) {
             throw new RuntimeException("Window couldn't find content container view");
@@ -3073,6 +3296,7 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
     }
 
     private void installDecor() {
+        Log.d(TAG,"Ritter::PW installDecor()");
         if (mDecor == null) {
             mDecor = generateDecor();
             mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
@@ -3082,6 +3306,7 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
             }
         }
         if (mContentParent == null) {
+            Log.d(TAG,"Ritter::PW installDecor() mContentParent == null");
             mContentParent = generateLayout(mDecor);
 
             // Set up decor part of UI to ignore fitsSystemWindows if appropriate.
@@ -3089,6 +3314,7 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
 
             mTitleView = (TextView)findViewById(com.android.internal.R.id.title);
             if (mTitleView != null) {
+                Log.d(TAG,"Ritter::PW installDecor() mContentParent == null mTitleView != null");
                 mTitleView.setLayoutDirection(mDecor.getLayoutDirection());
                 if ((getLocalFeatures() & (1 << FEATURE_NO_TITLE)) != 0) {
                     View titleContainer = findViewById(com.android.internal.R.id.title_container);
@@ -3104,6 +3330,7 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
                     mTitleView.setText(mTitle);
                 }
             } else {
+                Log.d(TAG,"Ritter::PW installDecor() mContentParent == null mTitleView == null mActionBar");
                 mActionBar = (ActionBarView) findViewById(com.android.internal.R.id.action_bar);
                 if (mActionBar != null) {
                     mActionBar.setWindowCallback(getCallback());
@@ -3889,4 +4116,210 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
     void sendCloseSystemWindows(String reason) {
         PhoneWindowManager.sendCloseSystemWindows(getContext(), reason);
     }
+
+    private void moveAndResizeWindows(int deltaX, int deltaY, int deltaW, int deltaH) {
+        Log.d(TAG, "Ritter::PW moveAndResizeWindows deltaX:" + deltaX + ",deltaY:" + deltaY
+                + ",deltaW:" + deltaW + ",deltaH:" + deltaH);
+        List<String> rootList = Arrays.asList(WindowManagerGlobal.getInstance().getViewRootNames());
+
+        ArrayList<WindowManager.LayoutParams> paramsList = WindowManagerGlobal.getInstance()
+                .getWindowManagerLayoutParams();
+        Log.d(TAG, "Ritter::PW moveAndResizeWindows paramsList.size:" + paramsList.size());
+
+        Log.d(TAG, "Ritter::PW moveAndResizeWindows rootList.size:" + rootList.size());
+        Log.d(TAG, "Ritter::PW moveAndResizeWindows rootList:" + rootList);
+        Activity activity = (Activity) mContext;
+        String activityName = activity.getLocalClassName();
+        Log.d(TAG,
+                "Ritter::PW moveAndResizeWindows activity.getLocalClassName():"
+                        + activity.getLocalClassName() + ",activity.getComponentName():"
+                        + activity.getComponentName()
+                        + ",activity.getComponentName().getClassName():"
+                        + activity.getComponentName().getClassName());
+        String pkgName = "", className = "";
+        // int curRootIndex = 0 ;
+        for (int i = 0; i < rootList.size(); i++) {
+            ViewRootImpl root = WindowManagerGlobal.getInstance().getRootView(rootList.get(i))
+                    .getViewRootImpl();
+            Rect outRect = new Rect();
+            if (root.getMyWindowStateAttrs(outRect)) {
+                Log.d(TAG, "Ritter::PW moveAndResizeWindows win.mAttrs.x:(" + outRect.left + ","
+                        + outRect.top + "," + (outRect.right - outRect.left) + ","
+                        + (outRect.bottom - outRect.top) + "));");
+            }
+            WindowManager.LayoutParams windowAttributesInViewRootImpl = root.getLayoutParams();
+
+            if (!windowAttributesInViewRootImpl.isInWindowing) {
+
+            }
+
+            windowAttributesInViewRootImpl.x += deltaX;
+            windowAttributesInViewRootImpl.y += deltaY;
+            Log.d(TAG, "Ritter::PW moveAndResizeWindows " + "Down(" + sDownX + "," + sDownY + "),"
+                    + "Delta(" + deltaX + "," + deltaY + ")," + "windowAttributes.x:"
+                    + windowAttributesInViewRootImpl.x + ",windowAttributes.y:"
+                    + windowAttributesInViewRootImpl.y);
+            windowAttributesInViewRootImpl.width += deltaW;
+            windowAttributesInViewRootImpl.height += deltaH;
+
+            if (!windowAttributesInViewRootImpl.isFullscreen) {
+                windowAttributesInViewRootImpl.setWindowingParam();
+            }
+            /**
+             * Ritter_multi Because when the window been touch, the
+             * moveTaskToFront() will be called, then the resume() called,
+             * setLayoutParams() called, it's will get the window's decor view
+             * to set into attrs, so I would better make its x and y changed
+             * too.
+             */
+            /**
+             * There are 2 attrs, one in Window, one in ViewRootImpl.
+             */
+            WindowManager.LayoutParams windowAttributesInWindow = paramsList.get(i);
+            windowAttributesInWindow.x = windowAttributesInViewRootImpl.x;
+            windowAttributesInWindow.y = windowAttributesInViewRootImpl.y;
+            windowAttributesInWindow.width = windowAttributesInViewRootImpl.width;
+            windowAttributesInWindow.height = windowAttributesInViewRootImpl.height;
+
+            if (!windowAttributesInWindow.isFullscreen) {
+                windowAttributesInWindow.setWindowingParam();
+            }
+
+            windowAttributesInViewRootImpl.isInWindowing = true;
+            root.relayoutWindowPublic(windowAttributesInViewRootImpl, View.VISIBLE, false);
+        }
+    }
+
+    // Ritter_multi
+    /**
+     * If use dialog, in some case: like a second activity in a task, the dialog
+     * will be covered. So I use double click instead of dialog.
+     */
+    private void showForceCloseDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
+        builder.setTitle("Force close this APP?")
+        // .setIcon(R.drawable.dialog_logo)
+                // .setView(inputPasswd)
+                .setNegativeButton("Cancel", null);
+        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                killMyCurrentTask();
+            }
+        });
+        builder.show();
+    }
+
+    private void killMyCurrentTask() {
+        Activity activity = (Activity) mContext;
+        final ActivityManager am = (ActivityManager) mContext
+                .getSystemService(Context.ACTIVITY_SERVICE);
+        if (am != null && activity != null) {
+            Toast.makeText(mContext, "Force close activity.getTaskId():" + activity.getTaskId(),
+                    Toast.LENGTH_SHORT).show();
+            am.removeTask(activity.getTaskId(), ActivityManager.REMOVE_TASK_KILL_PROCESS);
+
+            /*
+             * // Accessibility feedback setContentDescription( mContext
+             * .getString(R.string.accessibility_recents_item_dismissed ,
+             * ad.getLabel())); sendAccessibilityEvent(AccessibilityEvent
+             * .TYPE_VIEW_SELECTED); setContentDescription(null);
+             */
+        }
+    }
+
+    private void toggleFullscreen() {
+        Log.d(TAG, "Ritter::PW toggleFullscreen()");
+        List<String> rootList = Arrays.asList(WindowManagerGlobal.getInstance().getViewRootNames());
+
+        ArrayList<WindowManager.LayoutParams> paramsList = WindowManagerGlobal.getInstance()
+                .getWindowManagerLayoutParams();
+        Log.d(TAG, "Ritter::PW toggleFullscreen paramsList.size:" + paramsList.size());
+
+        Log.d(TAG, "Ritter::PW toggleFullscreen rootList.size:" + rootList.size());
+        Log.d(TAG, "Ritter::PW toggleFullscreen rootList:" + rootList);
+        Activity activity = (Activity) mContext;
+        String activityName = activity.getLocalClassName();
+        Log.d(TAG,
+                "Ritter::PW toggleFullscreen activity.getLocalClassName():"
+                        + activity.getLocalClassName() + ",activity.getComponentName():"
+                        + activity.getComponentName()
+                        + ",activity.getComponentName().getClassName():"
+                        + activity.getComponentName().getClassName());
+        String pkgName = "", className = "";
+        // int curRootIndex = 0 ;
+        for (int i = 0; i < rootList.size(); i++) {
+            ViewRootImpl root = WindowManagerGlobal.getInstance().getRootView(rootList.get(i))
+                    .getViewRootImpl();
+            Rect outRect = new Rect();
+            if (root.getMyWindowStateAttrs(outRect)) {
+                Log.d(TAG, "Ritter::PW toggleFullscreen win.mAttrs.x:(" + outRect.left + ","
+                        + outRect.top + "," + (outRect.right - outRect.left) + ","
+                        + (outRect.bottom - outRect.top) + "));");
+            }
+            WindowManager.LayoutParams windowAttributesInViewRootImpl = root.getLayoutParams();
+            WindowManager.LayoutParams windowAttributesInWindow = paramsList.get(i);
+            if (windowAttributesInViewRootImpl.isFullscreen) {
+                Log.d(TAG, "Ritter::PW toggleFullscreen() isFullscreen==true");
+                Log.d(TAG,
+                        "Ritter::PW toggleFullscreen() before getWindowingParam() windowAttributesInViewRootImpl x:"
+                                + windowAttributesInViewRootImpl.x + ",y:"
+                                + windowAttributesInViewRootImpl.y + ",w:"
+                                + windowAttributesInViewRootImpl.width + ",h:"
+                                + windowAttributesInViewRootImpl.height + ",isFullscreen:"
+                                + windowAttributesInViewRootImpl.isFullscreen + ",isInWindowing:"
+                                + windowAttributesInViewRootImpl.isInWindowing);
+                windowAttributesInViewRootImpl.getWindowingParam();
+                Log.d(TAG,
+                        "Ritter::PW toggleFullscreen() after getWindowingParam() windowAttributesInViewRootImpl x:"
+                                + windowAttributesInViewRootImpl.x + ",y:"
+                                + windowAttributesInViewRootImpl.y + ",w:"
+                                + windowAttributesInViewRootImpl.width + ",h:"
+                                + windowAttributesInViewRootImpl.height + ",isFullscreen:"
+                                + windowAttributesInViewRootImpl.isFullscreen + ",isInWindowing:"
+                                + windowAttributesInViewRootImpl.isInWindowing);
+                /**
+                 * Ritter_multi Because when the window been touch, the
+                 * moveTaskToFront() will be called, then the resume() called,
+                 * setLayoutParams() called, it's will get the window's decor
+                 * view to set into attrs, so I would better make its x and y
+                 * changed too.
+                 */
+                /**
+                 * There are 2 attrs, one in Window, one in ViewRootImpl.
+                 */
+                // windowAttributesInWindow.getWindowingParam();
+                windowAttributesInWindow.x = windowAttributesInViewRootImpl.x;
+                windowAttributesInWindow.y = windowAttributesInViewRootImpl.y;
+                windowAttributesInWindow.width = windowAttributesInViewRootImpl.width;
+                windowAttributesInWindow.height = windowAttributesInViewRootImpl.height;
+            } else {
+                int screenWidth = getWindowManager().getDefaultDisplay().getWidth();
+                int screenHeight = getWindowManager().getDefaultDisplay().getHeight();
+                int notificationBarHeight = 50;
+                Log.d(TAG, "Ritter::PW toggleFullscreen() isFullscreen==false (" + screenWidth
+                        + "," + screenHeight + ")");
+                windowAttributesInViewRootImpl.x = 0;
+                windowAttributesInViewRootImpl.y = notificationBarHeight;
+                windowAttributesInViewRootImpl.width = screenWidth;
+                windowAttributesInViewRootImpl.height = screenHeight - notificationBarHeight;
+                /**
+                 * Ritter_multi Because when the window been touch, the
+                 * moveTaskToFront() will be called, then the resume() called,
+                 * setLayoutParams() called, it's will get the window's decor
+                 * view to set into attrs, so I would better make its x and y
+                 * changed too.
+                 */
+                /**
+                 * There are 2 attrs, one in Window, one in ViewRootImpl.
+                 */
+                windowAttributesInWindow.x = windowAttributesInViewRootImpl.x;
+                windowAttributesInWindow.y = windowAttributesInViewRootImpl.y;
+                windowAttributesInWindow.width = windowAttributesInViewRootImpl.width;
+                windowAttributesInWindow.height = windowAttributesInViewRootImpl.height;
+            }
+            root.relayoutWindowPublic(windowAttributesInViewRootImpl, View.VISIBLE, false);
+            windowAttributesInViewRootImpl.isFullscreen = !windowAttributesInViewRootImpl.isFullscreen;
+            windowAttributesInWindow.isFullscreen = !windowAttributesInWindow.isFullscreen;
+        }
+    }
 }
diff --git a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index aeaa18f..ff40933 100644
--- a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -15,6 +15,72 @@
 
 package com.android.internal.policy.impl;
 
+import static android.view.WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW;
+import static android.view.WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
+import static android.view.WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD;
+import static android.view.WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN;
+import static android.view.WindowManager.LayoutParams.FLAG_FULLSCREEN;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_OVERSCAN;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
+import static android.view.WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
+import static android.view.WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
+import static android.view.WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
+import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_SHOW_FOR_ALL_USERS;
+import static android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_CROSSFADE;
+import static android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_JUMPCUT;
+import static android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_ROTATE;
+import static android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING;
+import static android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
+import static android.view.WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL;
+import static android.view.WindowManager.LayoutParams.TYPE_BOOT_PROGRESS;
+import static android.view.WindowManager.LayoutParams.TYPE_DISPLAY_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_DRAG;
+import static android.view.WindowManager.LayoutParams.TYPE_DREAM;
+import static android.view.WindowManager.LayoutParams.TYPE_HIDDEN_NAV_CONSUMER;
+import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD;
+import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_KEYGUARD;
+import static android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
+import static android.view.WindowManager.LayoutParams.TYPE_MAGNIFICATION_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_NAVIGATION_BAR;
+import static android.view.WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL;
+import static android.view.WindowManager.LayoutParams.TYPE_PHONE;
+import static android.view.WindowManager.LayoutParams.TYPE_POINTER;
+import static android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE;
+import static android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION;
+import static android.view.WindowManager.LayoutParams.TYPE_RECENTS_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR;
+import static android.view.WindowManager.LayoutParams.TYPE_SECURE_SYSTEM_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR;
+import static android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL;
+import static android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
+import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;
+import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
+import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_TOAST;
+import static android.view.WindowManager.LayoutParams.TYPE_UNIVERSE_BACKGROUND;
+import static android.view.WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_WALLPAPER;
+import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_ABSENT;
+import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED;
+import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_OPEN;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.Arrays;
+
 import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
 import android.app.AppOpsManager;
@@ -23,6 +89,7 @@ import android.app.ProgressDialog;
 import android.app.SearchManager;
 import android.app.StatusBarManager;
 import android.app.UiModeManager;
+import android.app.WindowAppsManager;
 import android.content.ActivityNotFoundException;
 import android.content.BroadcastReceiver;
 import android.content.ComponentName;
@@ -101,16 +168,6 @@ import com.android.internal.statusbar.IStatusBarService;
 import com.android.internal.telephony.ITelephony;
 import com.android.internal.widget.PointerLocationView;
 
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.PrintWriter;
-
-import static android.view.WindowManager.LayoutParams.*;
-import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_ABSENT;
-import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_OPEN;
-import static android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED;
-
 /**
  * WindowManagerPolicy implementation for the Android phone UI.  This
  * introduces a new method suffix, Lp, for an internal lock of the
@@ -122,12 +179,15 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     static final String TAG = "WindowManager";
     static final boolean DEBUG = false;
     static final boolean localLOGV = false;
-    static final boolean DEBUG_LAYOUT = false;
-    static final boolean DEBUG_INPUT = false;
+    static final boolean DEBUG_LAYOUT = true;
+    static final boolean DEBUG_INPUT = true;
     static final boolean DEBUG_STARTING_WINDOW = false;
     static final boolean SHOW_STARTING_ANIMATIONS = true;
     static final boolean SHOW_PROCESSES_ON_ALT_MENU = false;
 
+    public PhoneWindowManager() {
+        Log.d(TAG, "Ritter::PWM PhoneWindowManager()");
+    }
     // Whether to allow dock apps with METADATA_DOCK_HOME to temporarily take over the Home key.
     // No longer recommended for desk docks; still useful in car docks.
     static final boolean ENABLE_CAR_DOCK_HOME_CAPTURE = true;
@@ -852,6 +912,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     @Override
     public void init(Context context, IWindowManager windowManager,
             WindowManagerFuncs windowManagerFuncs) {
+        Log.d(TAG,"Ritter::PWM init()");
         mContext = context;
         mWindowManager = windowManager;
         mWindowManagerFuncs = windowManagerFuncs;
@@ -2979,13 +3040,15 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 && mNavigationBar != null && mNavigationBar.isVisibleLw());
 
         final int adjust = sim & SOFT_INPUT_MASK_ADJUST;
-
+        Log.d(TAG,"Ritter::PWM layoutWindowLw() isDefaultDisplay:"+isDefaultDisplay);
         if (!isDefaultDisplay) {
             if (attached != null) {
+                Log.d(TAG,"Ritter::PWM layoutWindowLw()B1 attached != null");
                 // If this window is attached to another, our display
                 // frame is the same as the one we are attached to.
                 setAttachedWindowFrames(win, fl, adjust, attached, true, pf, df, of, cf, vf);
             } else {
+                Log.d(TAG,"Ritter::PWM layoutWindowLw()B2 attached == null");
                 // Give the window full screen.
                 pf.left = df.left = of.left = cf.left = mOverscanScreenLeft;
                 pf.top = df.top = of.top = cf.top = mOverscanScreenTop;
@@ -2995,6 +3058,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                         = mOverscanScreenTop + mOverscanScreenHeight;
             }
         } else  if (attrs.type == TYPE_INPUT_METHOD) {
+            Log.d(TAG,"Ritter::PWM layoutWindowLw()A2 isDefaultDisplay && attrs.type == TYPE_INPUT_METHOD");
             pf.left = df.left = of.left = cf.left = vf.left = mDockLeft;
             pf.top = df.top = of.top = cf.top = vf.top = mDockTop;
             pf.right = df.right = of.right = cf.right = vf.right = mDockRight;
@@ -3006,7 +3070,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             attrs.gravity = Gravity.BOTTOM;
             mDockLayer = win.getSurfaceLayer();
         } else {
-
+            Log.d(TAG,"Ritter::PWM layoutWindowLw()A3 isDefaultDisplay");
             // Default policy decor for the default display
             dcf.left = mSystemLeft;
             dcf.top = mSystemTop;
@@ -3038,17 +3102,21 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
                 if (DEBUG_LAYOUT) Slog.v(TAG, "layoutWindowLw(" + attrs.getTitle() 
                             + "): IN_SCREEN, INSET_DECOR");
+                Log.d(TAG,"Ritter::PWM B1 This is the case for a normal activity window");
                 // This is the case for a normal activity window: we want it
                 // to cover all of the screen space, and it can take care of
                 // moving its contents to account for screen decorations that
                 // intrude into that space.
                 if (attached != null) {
+                    Log.d(TAG,"Ritter::PWM C1 attached != null");
                     // If this window is attached to another, our display
                     // frame is the same as the one we are attached to.
                     setAttachedWindowFrames(win, fl, adjust, attached, true, pf, df, of, cf, vf);
                 } else {
+                    Log.d(TAG,"Ritter::PWM C2 attached == null");
                     if (attrs.type == TYPE_STATUS_BAR_PANEL
                             || attrs.type == TYPE_STATUS_BAR_SUB_PANEL) {
+                        Log.d(TAG,"Ritter::PWM D1 Status bar panels");
                         // Status bar panels are the only windows who can go on top of
                         // the status bar.  They are protected by the STATUS_BAR_SERVICE
                         // permission, so they have the same privileges as the status
@@ -3072,6 +3140,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     } else if ((fl & FLAG_LAYOUT_IN_OVERSCAN) != 0
                             && attrs.type >= WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW
                             && attrs.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW) {
+                        Log.d(TAG,"Ritter::PWM BBB D2 Asking to layout into the overscan region");
                         // Asking to layout into the overscan region, so give it that pure
                         // unrestricted area.
                         pf.left = df.left = of.left = mOverscanScreenLeft;
@@ -3084,6 +3153,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             && (attrs.type == WindowManager.LayoutParams.TYPE_KEYGUARD || (
                                 attrs.type >= WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW
                              && attrs.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW))) {
+                        Log.d(TAG,"Ritter::PWM CCC D3 Asking for layout as if the nav bar is hidden");
                         // Asking for layout as if the nav bar is hidden, lets the
                         // application extend into the unrestricted overscan screen area.  We
                         // only do this for application windows to ensure no window that
@@ -3100,6 +3170,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                         of.right = mUnrestrictedScreenLeft + mUnrestrictedScreenWidth;
                         of.bottom = mUnrestrictedScreenTop + mUnrestrictedScreenHeight;
                     } else {
+                        Log.d(TAG,"Ritter::PWM DDD D4");
                         pf.left = df.left = mRestrictedOverscanScreenLeft;
                         pf.top = df.top = mRestrictedOverscanScreenTop;
                         pf.right = df.right = mRestrictedOverscanScreenLeft
@@ -3113,9 +3184,35 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                         of.top = mUnrestrictedScreenTop;
                         of.right = mUnrestrictedScreenLeft + mUnrestrictedScreenWidth;
                         of.bottom = mUnrestrictedScreenTop + mUnrestrictedScreenHeight;
+                        // itter_multi
+                        if (false && attrs != null) {
+                            Log.d(TAG, "Ritter::PWM DDD D4 attrs != null");
+                            Log.d(TAG, "Ritter::PWM DDD D4 attrs.getTitle():" + attrs.getTitle()
+                                    + ",attrs.packageName:" + attrs.packageName);
+                            if (attrs.packageName != null
+                                    && (attrs.packageName.equals("com.intel.aware.sensorbench") || attrs.packageName
+                                            .equals("com.example.hello")
+
+                                    )) {
+                                Log.d(TAG,
+                                        "Ritter::PWM DDD D4 attrs.getTitle():" + attrs.getTitle()
+                                                + ",attrs.packageName:" + attrs.packageName);
+                                pf.left = df.left = mRestrictedOverscanScreenLeft + 300;
+                                pf.top = df.top = mRestrictedOverscanScreenTop + 300;
+                                pf.right = df.right = mRestrictedOverscanScreenLeft
+                                        + mRestrictedOverscanScreenWidth - 300;
+                                pf.bottom = df.bottom = mRestrictedOverscanScreenTop
+                                        + mRestrictedOverscanScreenHeight - 300;
+
+                            }
+                        } else {
+                            Log.d(TAG, "Ritter::PWM DDD D4 attrs == null");
+                        }
+                    
                     }
 
                     if ((fl & FLAG_FULLSCREEN) == 0) {
+                        Log.d(TAG,"Ritter::PWM D5 !fl & FLAG_FULLSCREEN");
                         if (adjust != SOFT_INPUT_ADJUST_RESIZE) {
                             cf.left = mDockLeft;
                             cf.top = mDockTop;
@@ -3128,6 +3225,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             cf.bottom = mContentBottom;
                         }
                     } else {
+                        Log.d(TAG,"Ritter::PWM D6 fl & FLAG_FULLSCREEN");
                         // Full screen windows are always given a layout that is as if the
                         // status bar and other transient decors are gone.  This is to avoid
                         // bad states when moving from a window that is not hding the
@@ -3139,12 +3237,26 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     }
                     applyStableConstraints(sysUiFl, fl, cf);
                     if (adjust != SOFT_INPUT_ADJUST_NOTHING) {
+                        Log.d(TAG,"Ritter::PWM D7 adjust != SOFT_INPUT_ADJUST_NOTHING");
                         vf.left = mCurLeft;
                         vf.top = mCurTop;
                         vf.right = mCurRight;
                         vf.bottom = mCurBottom;
+                        /**
+                         * Author: Ritter_Multi Date: 18/01/2011 Adjusts the
+                         * size of pf, df, cf, vf rects.
+                         */
+                        if (attrs.type != TYPE_STATUS_BAR_PANEL
+                                || attrs.type != TYPE_STATUS_BAR_SUB_PANEL) {
+                            setWindowInFrame(win, attrs, pf, df, cf, vf);
+                        }
                     } else {
                         vf.set(cf);
+                        /**
+                         * Author: Ritter_Multi Date: 18/01/2011 Adjusts the
+                         * size of pf, df, cf, vf rects.
+                         */
+                        setWindowInFrame(win, attrs, pf, df, cf, vf);
                     }
                 }
             } else if ((fl & FLAG_LAYOUT_IN_SCREEN) != 0 || (sysUiFl
@@ -3152,10 +3264,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION)) != 0) {
                 if (DEBUG_LAYOUT) Slog.v(TAG, "layoutWindowLw(" + attrs.getTitle() +
                         "): IN_SCREEN");
+                Log.d(TAG,"Ritter::PWM B2 A window that has requested to fill the entire screen");
                 // A window that has requested to fill the entire screen just
                 // gets everything, period.
                 if (attrs.type == TYPE_STATUS_BAR_PANEL
                         || attrs.type == TYPE_STATUS_BAR_SUB_PANEL) {
+                    Log.d(TAG,"Ritter::PWM C1 STATUS_BAR_PANEL");
                     pf.left = df.left = of.left = cf.left = hasNavBar
                             ? mDockLeft : mUnrestrictedScreenLeft;
                     pf.top = df.top = of.top = cf.top = mUnrestrictedScreenTop;
@@ -3170,6 +3284,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                                     pf.left, pf.top, pf.right, pf.bottom));
                 } else if (attrs.type == TYPE_NAVIGATION_BAR
                         || attrs.type == TYPE_NAVIGATION_BAR_PANEL) {
+                    Log.d(TAG,"Ritter::PWM C2 TYPE_NAVIGATION_BAR");
                     // The navigation bar has Real Ultimate Power.
                     pf.left = df.left = of.left = mUnrestrictedScreenLeft;
                     pf.top = df.top = of.top = mUnrestrictedScreenTop;
@@ -3183,6 +3298,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 } else if ((attrs.type == TYPE_SECURE_SYSTEM_OVERLAY
                                 || attrs.type == TYPE_BOOT_PROGRESS)
                         && ((fl & FLAG_FULLSCREEN) != 0)) {
+                    Log.d(TAG,"Ritter::PWM C3 Fullscreen secure system overlays ");
                     // Fullscreen secure system overlays get what they ask for.
                     pf.left = df.left = of.left = cf.left = mOverscanScreenLeft;
                     pf.top = df.top = of.top = cf.top = mOverscanScreenTop;
@@ -3192,6 +3308,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             + mOverscanScreenHeight;
                 } else if (attrs.type == TYPE_BOOT_PROGRESS
                         || attrs.type == TYPE_UNIVERSE_BACKGROUND) {
+                    Log.d(TAG,"Ritter::PWM C4 Boot progress screen ");
                     // Boot progress screen always covers entire display.
                     pf.left = df.left = of.left = cf.left = mOverscanScreenLeft;
                     pf.top = df.top = of.top = cf.top = mOverscanScreenTop;
@@ -3200,6 +3317,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     pf.bottom = df.bottom = of.bottom = cf.bottom = mOverscanScreenTop
                             + mOverscanScreenHeight;
                 } else if (attrs.type == TYPE_WALLPAPER) {
+                    Log.d(TAG,"Ritter::PWM C5 TYPE_WALLPAPER");
                     // The wallpaper also has Real Ultimate Power.
                     pf.left = df.left = of.left = cf.left = mUnrestrictedScreenLeft;
                     pf.top = df.top = of.top = cf.top = mUnrestrictedScreenTop;
@@ -3210,6 +3328,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 } else if ((fl & FLAG_LAYOUT_IN_OVERSCAN) != 0
                         && attrs.type >= WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW
                         && attrs.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW) {
+                    Log.d(TAG,"Ritter::PWM C6 Asking to layout into the overscan region");
                     // Asking to layout into the overscan region, so give it that pure
                     // unrestricted area.
                     pf.left = df.left = of.left = cf.left = mOverscanScreenLeft;
@@ -3223,6 +3342,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                         && (attrs.type == TYPE_TOAST
                             || (attrs.type >= WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW
                             && attrs.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW))) {
+                    Log.d(TAG,"Ritter::PWM C7 Asking for layout as if the nav bar is hidden");
                     // Asking for layout as if the nav bar is hidden, lets the
                     // application extend into the unrestricted screen area.  We
                     // only do this for application windows (or toasts) to ensure no window that
@@ -3237,6 +3357,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     pf.bottom = df.bottom = of.bottom = cf.bottom = mUnrestrictedScreenTop
                             + mUnrestrictedScreenHeight;
                 } else {
+                    Log.d(TAG,"Ritter::PWM C8 else");
                     pf.left = df.left = of.left = cf.left = mRestrictedScreenLeft;
                     pf.top = df.top = of.top = cf.top = mRestrictedScreenTop;
                     pf.right = df.right = of.right = cf.right = mRestrictedScreenLeft
@@ -3248,11 +3369,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 applyStableConstraints(sysUiFl, fl, cf);
 
                 if (adjust != SOFT_INPUT_ADJUST_NOTHING) {
+                    Log.d(TAG,"Ritter::PWM C9 adjust != SOFT_INPUT_ADJUST_NOTHING");
                     vf.left = mCurLeft;
                     vf.top = mCurTop;
                     vf.right = mCurRight;
                     vf.bottom = mCurBottom;
                 } else {
+                    Log.d(TAG,"Ritter::PWM C10 adjust == SOFT_INPUT_ADJUST_NOTHING");
                     vf.set(cf);
                 }
             } else if (attached != null) {
@@ -3267,6 +3390,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 // Otherwise, a normal window must be placed inside the content
                 // of all screen decorations.
                 if (attrs.type == TYPE_STATUS_BAR_PANEL) {
+                    Log.d(TAG,"Ritter::PWM C1 TYPE_STATUS_BAR_PANEL");
                     // Status bar panels are the only windows who can go on top of
                     // the status bar.  They are protected by the STATUS_BAR_SERVICE
                     // permission, so they have the same privileges as the status
@@ -3278,33 +3402,39 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     pf.bottom = df.bottom = of.bottom = cf.bottom = mRestrictedScreenTop
                             + mRestrictedScreenHeight;
                 } else if (attrs.type == TYPE_TOAST || attrs.type == TYPE_SYSTEM_ALERT) {
+                    Log.d(TAG,"Ritter::PWM C2 TYPE_TOAST || TYPE_SYSTEM_ALERT");
                     // Toasts are stable to interim decor changes.
                     pf.left = df.left = of.left = cf.left = mStableLeft;
                     pf.top = df.top = of.top = cf.top = mStableTop;
                     pf.right = df.right = of.right = cf.right = mStableRight;
                     pf.bottom = df.bottom = of.bottom = cf.bottom = mStableBottom;
                 } else {
+                    Log.d(TAG,"Ritter::PWM C3 else");
                     pf.left = mContentLeft;
                     pf.top = mContentTop;
                     pf.right = mContentRight;
                     pf.bottom = mContentBottom;
                     if (adjust != SOFT_INPUT_ADJUST_RESIZE) {
+                        Log.d(TAG,"Ritter::PWM D1 adjust != SOFT_INPUT_ADJUST_RESIZE");
                         df.left = of.left = cf.left = mDockLeft;
                         df.top = of.top = cf.top = mDockTop;
                         df.right = of.right = cf.right = mDockRight;
                         df.bottom = of.bottom = cf.bottom = mDockBottom;
                     } else {
+                        Log.d(TAG,"Ritter::PWM D2 adjust == SOFT_INPUT_ADJUST_RESIZE");
                         df.left = of.left = cf.left = mContentLeft;
                         df.top = of.top = cf.top = mContentTop;
                         df.right = of.right = cf.right = mContentRight;
                         df.bottom = of.bottom = cf.bottom = mContentBottom;
                     }
                     if (adjust != SOFT_INPUT_ADJUST_NOTHING) {
+                        Log.d(TAG,"Ritter::PWM D3 adjust != SOFT_INPUT_ADJUST_NOTHING");
                         vf.left = mCurLeft;
                         vf.top = mCurTop;
                         vf.right = mCurRight;
                         vf.bottom = mCurBottom;
                     } else {
+                        Log.d(TAG,"Ritter::PWM D4 adjust == SOFT_INPUT_ADJUST_NOTHING");
                         vf.set(cf);
                     }
                 }
@@ -3317,7 +3447,33 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             df.right = df.bottom = of.right = of.bottom = cf.right = cf.bottom
                     = vf.right = vf.bottom = 10000;
         }
-
+        
+        // Ritter_multi
+        // Get window apps from service
+        String APPs = "";
+        WindowAppsManager mWindowAppsManager = (WindowAppsManager) mContext
+                .getSystemService("window_apps");
+        try {
+            APPs = mWindowAppsManager.getWindowApps();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        ArrayList<String> pkgList = new ArrayList<String>(Arrays.asList(APPs.split("#")));
+        // if(win.getAttrs().isInWindowing
+        if (true && win.getAttrs().packageName != null && !win.getAttrs().packageName.isEmpty()
+                && pkgList.contains(win.getAttrs().packageName)) {
+            Log.d(TAG,
+                    "Ritter::PWM Compute frame win.getAttrs().isInWindowing() win.getAttrs().packageName:"
+                            + win.getAttrs().packageName);
+            // win.getAttrs().isInWindowing = false;
+            pf.left = df.left = of.left = cf.left = win.getAttrs().x;
+            pf.top = df.top = of.top = cf.top = win.getAttrs().y;
+            pf.right = df.right = of.right = cf.right = win.getAttrs().x + win.getAttrs().width;
+            pf.bottom = df.bottom = of.bottom = cf.bottom = win.getAttrs().y
+                    + win.getAttrs().height;
+        }
+        // end
+                
         if (DEBUG_LAYOUT) Slog.v(TAG, "Compute frame " + attrs.getTitle()
                 + ": sim=#" + Integer.toHexString(sim)
                 + " attach=" + attached + " type=" + attrs.type 
@@ -3357,6 +3513,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     /** {@inheritDoc} */
     @Override
     public void finishLayoutLw() {
+        Log.d(TAG,"Ritter::PWM finishLayoutLw()");
         return;
     }
 
@@ -3790,6 +3947,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     /** {@inheritDoc} */
     @Override
     public int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn) {
+        Log.d(TAG,"Ritter::PWM interceptKeyBeforeQueueing()");
         if (!mSystemBooted) {
             // If we have not yet booted, don't let key events do anything.
             return 0;
@@ -4110,6 +4268,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     /** {@inheritDoc} */
     @Override
     public int interceptMotionBeforeQueueingWhenScreenOff(int policyFlags) {
+        Log.d(TAG,"Ritter::PWM interceptMotionBeforeQueueingWhenScreenOff()");
         int result = 0;
 
         final boolean isWakeMotion = (policyFlags
@@ -5430,4 +5589,92 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mStatusBarController.dump(pw, prefix);
         mNavigationBarController.dump(pw, prefix);
     }
+
+    /**
+     * Author: Ritter_Multi Date: 18/01/2011 Sets the parent, display, content
+     * and visible Rects to the size of WindoState.mFrame rect.
+     */
+    private void setWindowInFrame(WindowState win, WindowManager.LayoutParams attrs, Rect pf,
+            Rect df, Rect cf, Rect vf) {
+        Log.d(TAG, "Ritter::setWindowInFrame()");
+        if (attrs != null) {
+            if (attrs.packageName != null) {
+                Rect desiredRect = win.getFrameLw();
+                Log.d(TAG, "Ritter::setWindowInFrame() win.getFrameLw():l:" + desiredRect.left
+                        + ",r:" + desiredRect.right + ",t:" + desiredRect.top + ",b:"
+                        + desiredRect.bottom);
+                // Default is to layout directly in the desired rectangle
+                pf.left = df.left = vf.left = cf.left = desiredRect.left;
+                pf.right = df.right = vf.right = cf.right = desiredRect.right;
+                pf.top = df.top = vf.top = cf.top = desiredRect.top;
+                pf.bottom = df.bottom = desiredRect.bottom;
+
+                /**
+                 * Author: Onskreen Date: 05/04/2011 If not an obstructed cs
+                 * window, then behave as it used to. If
+                 * SOFT_INPUT_ADJUST_RESIZE flag found, then reset the content
+                 * and visible frame's bottom rect. It lays out the window's
+                 * bottom position so that IME window doesn't hide the activity
+                 * window underneath it.
+                 */
+
+                /*
+                 * //Only manipulate focused windows if(win.isFocused()) {
+                 *//**
+                 * Author: Onskreen Date: 16/06/2011 Moved the obstructed cs
+                 * window logic to setObstructedWindowInFrame method.
+                 */
+                /*
+                 * setObstructedWindowInFrame(win, attrs, pf, df, cf, vf,
+                 * desiredRect); } else { //In case window was shifted somehow
+                 * and then lost focus, make sure it reshifts //where it
+                 * belongs.
+                 *//**
+                 * Author: Onskreen Date: 16/06/2011 Shift the unfocused
+                 * window which is in the same window frame as already shifted
+                 * up the obstructed window when IME window is visible.
+                 */
+                /*
+                 * if(mWindowsShifted.size() == 0){
+                 * if(mWindowsShifted.contains(win)) { if (DEBUG_LAYOUT)
+                 * Log.v(TAG, "\tAction: Shift down " + mWindowShiftAmount +
+                 * " pixels"); //mWindowsShifted.remove(win);
+                 * mWindowsShifted.clear(); int modifiedTop = pf.top +
+                 * mWindowShiftAmount; pf.top = df.top = cf.top = vf.top =
+                 * modifiedTop; vf.bottom = cf.bottom = desiredRect.bottom +
+                 * modifiedTop; } else { //set the bottom normally vf.bottom =
+                 * cf.bottom = desiredRect.bottom; }
+                 *//**
+                 * Author: Onskreen Date: 06/01/2011 If shifted window loses
+                 * focus, then it should move to its default layout postion and
+                 * removes the window from mWindowsShifted list.
+                 */
+                /*
+                 * } else if (mWindowsShifted.contains(win)) { if (DEBUG_LAYOUT)
+                 * Log.v(TAG, "\tAction: Shift down " + mWindowShiftAmount +
+                 * " pixels"); mWindowsShifted.remove(win); int modifiedTop =
+                 * pf.top + mWindowShiftAmount; pf.top = df.top = cf.top =
+                 * vf.top = modifiedTop; vf.bottom = cf.bottom = pf.bottom =
+                 * df.bottom = desiredRect.bottom + modifiedTop; } else {
+                 * WindowState w = (WindowState) mWindowsShifted.get(0); if(w !=
+                 * null) { IBinder token = win.getToken(); boolean isWF =
+                 * w.isInCornerstonePanelWindowPanel(token); if(isWF) {
+                 * setObstructedWindowInFrame(win, attrs, pf, df, cf, vf,
+                 * desiredRect); } else { //set the bottom normally vf.bottom =
+                 * cf.bottom = desiredRect.bottom; } } else { //set the bottom
+                 * normally vf.bottom = cf.bottom = desiredRect.bottom; } } }
+                 */
+
+                if (DEBUG_LAYOUT) {
+                    Log.v(TAG, "Final Rects for Window: " + win);
+                    Log.v(TAG, "pf: " + pf);
+                    Log.v(TAG, "df: " + df);
+                    Log.v(TAG, "cf: " + cf);
+                    Log.v(TAG, "vf: " + vf);
+                }
+            }
+        }
+    }
+        
+    
 }
diff --git a/frameworks/base/services/input/InputDispatcher.cpp b/frameworks/base/services/input/InputDispatcher.cpp
index 06a57d5..4ca97eb 100644
--- a/frameworks/base/services/input/InputDispatcher.cpp
+++ b/frameworks/base/services/input/InputDispatcher.cpp
@@ -26,13 +26,13 @@
 #define DEBUG_OUTBOUND_EVENT_DETAILS 0
 
 // Log debug messages about the dispatch cycle.
-#define DEBUG_DISPATCH_CYCLE 0
+#define DEBUG_DISPATCH_CYCLE 1
 
 // Log debug messages about registrations.
 #define DEBUG_REGISTRATION 0
 
 // Log debug messages about input event injection.
-#define DEBUG_INJECTION 0
+#define DEBUG_INJECTION 1
 
 // Log debug messages about input focus tracking.
 #define DEBUG_FOCUS 0
@@ -819,7 +819,8 @@ void InputDispatcher::logOutboundKeyDetailsLocked(const char* prefix, const KeyE
 
 bool InputDispatcher::dispatchMotionLocked(
         nsecs_t currentTime, MotionEntry* entry, DropReason* dropReason, nsecs_t* nextWakeupTime) {
-    // Preprocessing.
+	ALOGD("Ritter InputDispatcher::dispatchMotionLocked");
+	// Preprocessing.
     if (! entry->dispatchInProgress) {
         entry->dispatchInProgress = true;
 
@@ -909,6 +910,7 @@ void InputDispatcher::logOutboundMotionDetailsLocked(const char* prefix, const M
 
 void InputDispatcher::dispatchEventLocked(nsecs_t currentTime,
         EventEntry* eventEntry, const Vector<InputTarget>& inputTargets) {
+	ALOGD("Ritter InputDispatcher::dispatchEventLocked inputTargets.size:%d",inputTargets.size());
 #if DEBUG_DISPATCH_CYCLE
     ALOGD("dispatchEventToCurrentInputTargets");
 #endif
@@ -922,9 +924,15 @@ void InputDispatcher::dispatchEventLocked(nsecs_t currentTime,
 
         ssize_t connectionIndex = getConnectionIndexLocked(inputTarget.inputChannel);
         if (connectionIndex >= 0) {
+        	 ALOGD("Ritter event delivery to target with channel '%s' because it "
+        			 "connectionIndex>=0:%d",
+        			 inputTarget.inputChannel->getName().string(),connectionIndex);
             sp<Connection> connection = mConnectionsByFd.valueAt(connectionIndex);
             prepareDispatchCycleLocked(currentTime, connection, eventEntry, &inputTarget);
         } else {
+        	ALOGD("Ritter Dropping event delivery to target with channel '%s' because it "
+        	                    "is no longer registered with the input dispatcher.",
+        	                     inputTarget.inputChannel->getName().string());
 #if DEBUG_FOCUS
             ALOGD("Dropping event delivery to target with channel '%s' because it "
                     "is no longer registered with the input dispatcher.",
@@ -1118,6 +1126,7 @@ Unresponsive:
 int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
         const MotionEntry* entry, Vector<InputTarget>& inputTargets, nsecs_t* nextWakeupTime,
         bool* outConflictingPointerActions) {
+	ALOGD("Ritter InputDispatcher::findTouchedWindowTargetsLocked");
     enum InjectionPermission {
         INJECTION_PERMISSION_UNKNOWN,
         INJECTION_PERMISSION_GRANTED,
@@ -1196,6 +1205,7 @@ int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
     }
 
     if (newGesture || (isSplit && maskedAction == AMOTION_EVENT_ACTION_POINTER_DOWN)) {
+    		ALOGD("Ritter InputDispatcher::findTouchedWindowTargetsLocked Case 1");
         /* Case 1: New splittable pointer going down, or need target for hover or scroll. */
 
         int32_t pointerIndex = getMotionEventActionPointerIndex(action);
@@ -1209,10 +1219,22 @@ int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
 
         // Traverse windows from front to back to find touched window and outside targets.
         size_t numWindows = mWindowHandles.size();
+        ALOGD("Ritter InputDispatcher::findTouchedWindowTargetsLocked Traverse windows from front to back to find touched window mWindowHandles.size:%d"
+                ,mWindowHandles.size());
         for (size_t i = 0; i < numWindows; i++) {
             sp<InputWindowHandle> windowHandle = mWindowHandles.itemAt(i);
             const InputWindowInfo* windowInfo = windowHandle->getInfo();
             if (windowInfo->displayId != displayId) {
+				ALOGD(
+						"Ritter wrong display windowInfo->name:%s,hasFocus:%d,paused:%d,canReceiveKeys:%d",
+						windowInfo->name.string(), windowInfo->hasFocus,
+						windowInfo->paused, windowInfo->canReceiveKeys);
+				ALOGD("Ritter wrong display windowInfo->l:%d,r:%d,t:%d,b:%d",
+						windowInfo->frameLeft, windowInfo->frameRight,
+						windowInfo->frameTop, windowInfo->frameBottom);
+				ALOGD(
+						"Ritter wrong display InputDispatcher::findTouchedWindowTargetsLocked Case 1 windowInfo->visible:%d",
+						windowInfo->visible);
                 continue; // wrong display
             }
 
@@ -1224,6 +1246,16 @@ int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
             }
 
             int32_t flags = windowInfo->layoutParamsFlags;
+			ALOGD(
+					"Ritter windowInfo->name:%s,hasFocus:%d,paused:%d,canReceiveKeys:%d",
+					windowInfo->name.string(), windowInfo->hasFocus,
+					windowInfo->paused, windowInfo->canReceiveKeys);
+			ALOGD("Ritter windowInfo->l:%d,r:%d,t:%d,b:%d",
+					windowInfo->frameLeft, windowInfo->frameRight,
+					windowInfo->frameTop, windowInfo->frameBottom);
+			ALOGD(
+					"Ritter InputDispatcher::findTouchedWindowTargetsLocked Case 1 windowInfo->visible:%d",
+					windowInfo->visible);
             if (windowInfo->visible) {
                 if (! (flags & InputWindowInfo::FLAG_NOT_TOUCHABLE)) {
                     isTouchModal = (flags & (InputWindowInfo::FLAG_NOT_FOCUSABLE
@@ -1271,7 +1303,7 @@ int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
             // Ignore the new window.
             newTouchedWindowHandle = NULL;
         }
-
+        ALOGD("Ritter Figure out whether splitting will be allowed for this window.");
         // Handle the case where we did not find a window.
         if (newTouchedWindowHandle == NULL) {
             // Try to assign the pointer to the first foreground window we find, if there is one.
@@ -1307,6 +1339,7 @@ int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
         }
         mTempTouchState.addOrUpdateWindow(newTouchedWindowHandle, targetFlags, pointerIds);
     } else {
+    	 ALOGD("Ritter InputDispatcher::findTouchedWindowTargetsLocked Case 2");
         /* Case 2: Pointer move, up, cancel or non-splittable pointer down. */
 
         // If the pointer is not currently down, then ignore the event.
@@ -1593,9 +1626,12 @@ Unresponsive:
 
 void InputDispatcher::addWindowTargetLocked(const sp<InputWindowHandle>& windowHandle,
         int32_t targetFlags, BitSet32 pointerIds, Vector<InputTarget>& inputTargets) {
-    inputTargets.push();
+	ALOGD("Ritter InputDispatcher::addWindowTargetLocked");
+	inputTargets.push();
 
     const InputWindowInfo* windowInfo = windowHandle->getInfo();
+    ALOGD("Ritter InputDispatcher::addWindowTargetLocked name:%s,windowInfo->frameLeft:%d,windowInfo->frameTop:%d"
+    			,windowInfo->name.string(),windowInfo->frameLeft,windowInfo->frameTop);
     InputTarget& target = inputTargets.editTop();
     target.inputChannel = windowInfo->inputChannel;
     target.flags = targetFlags;
@@ -4378,6 +4414,7 @@ void InputDispatcher::TouchState::copyFrom(const TouchState& other) {
 
 void InputDispatcher::TouchState::addOrUpdateWindow(const sp<InputWindowHandle>& windowHandle,
         int32_t targetFlags, BitSet32 pointerIds) {
+	ALOGD("Ritter InputDispatcher::TouchState::addOrUpdateWindow() ");
     if (targetFlags & InputTarget::FLAG_SPLIT) {
         split = true;
     }
diff --git a/frameworks/base/services/input/InputWindow.cpp b/frameworks/base/services/input/InputWindow.cpp
index 18cd8eb..9b359eb 100644
--- a/frameworks/base/services/input/InputWindow.cpp
+++ b/frameworks/base/services/input/InputWindow.cpp
@@ -25,6 +25,13 @@ namespace android {
 // --- InputWindowInfo ---
 
 bool InputWindowInfo::touchableRegionContainsPoint(int32_t x, int32_t y) const {
+	ALOGD("Ritter InputWindowInfo::touchableRegionContainsPoint x:%d,y:%d",x,y);
+	ALOGD("Ritter InputWindowInfo::touchableRegionContainsPoint touchableRegion:l:%d,r:%d,t:%d,b:%d"
+			,touchableRegion.getBounds().left()
+			,touchableRegion.getBounds().right()
+			,touchableRegion.getBounds().top()
+			,touchableRegion.getBounds().bottom());
+	ALOGD("Ritter InputWindowInfo::touchableRegionContainsPoint touchableRegion.contains(x, y):%d",touchableRegion.contains(x, y));
     return touchableRegion.contains(x, y);
 }
 
diff --git a/frameworks/base/services/java/com/android/server/SystemServer.java b/frameworks/base/services/java/com/android/server/SystemServer.java
index 8a3bc88..b2e3ccc 100644
--- a/frameworks/base/services/java/com/android/server/SystemServer.java
+++ b/frameworks/base/services/java/com/android/server/SystemServer.java
@@ -16,6 +16,10 @@
 
 package com.android.server;
 
+import java.io.File;
+import java.util.Timer;
+import java.util.TimerTask;
+
 import android.app.ActivityManagerNative;
 import android.bluetooth.BluetoothAdapter;
 import android.content.ComponentName;
@@ -46,7 +50,6 @@ import android.view.WindowManager;
 
 import com.android.internal.R;
 import com.android.internal.os.BinderInternal;
-import com.android.internal.os.Zygote;
 import com.android.internal.os.SamplingProfilerIntegration;
 import com.android.server.accessibility.AccessibilityManagerService;
 import com.android.server.accounts.AccountManagerService;
@@ -74,10 +77,6 @@ import com.android.server.wm.WindowManagerService;
 
 import dalvik.system.VMRuntime;
 
-import java.io.File;
-import java.util.Timer;
-import java.util.TimerTask;
-
 class ServerThread {
     private static final String TAG = "SystemServer";
     private static final String ENCRYPTING_STATE = "trigger_restart_min_framework";
@@ -157,7 +156,9 @@ class ServerThread {
         InputManagerService inputManager = null;
         TelephonyRegistry telephonyRegistry = null;
         ConsumerIrService consumerIr = null;
-
+        // Ritter_multi add
+        WindowAppsService windowAppsService = null;
+        // end
         // Create a handler thread just for the window manager to enjoy.
         HandlerThread wmHandlerThread = new HandlerThread("WindowManager");
         wmHandlerThread.start();
@@ -210,6 +211,11 @@ class ServerThread {
         boolean disableNetwork = SystemProperties.getBoolean("config.disable_network", false);
 
         try {
+            // Ritter_multi
+            Slog.i(TAG, "WindowAppsService Registry");
+            windowAppsService = new WindowAppsService(context);
+            ServiceManager.addService(Context.WINDOW_APPS_SERVICE, windowAppsService);
+            // end
             Slog.i(TAG, "Display Manager");
             display = new DisplayManagerService(context, wmHandler);
             ServiceManager.addService(Context.DISPLAY_SERVICE, display, true);
diff --git a/frameworks/base/services/java/com/android/server/WindowAppsService.java b/frameworks/base/services/java/com/android/server/WindowAppsService.java
new file mode 100644
index 0000000..c12968b
--- /dev/null
+++ b/frameworks/base/services/java/com/android/server/WindowAppsService.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server;
+
+import android.content.Context;
+import android.os.IWindowApps;
+import android.os.RemoteException;
+
+public class WindowAppsService extends IWindowApps.Stub {
+    private Context mContext;
+    private String mPkgName;
+
+    public WindowAppsService(Context context){
+        mContext = context;
+        mPkgName = "";
+    }
+
+    @Override
+    public void setWindowApps(String pkgName) throws RemoteException {
+        // TODO Auto-generated method stub
+        mPkgName = pkgName;
+    }
+
+    @Override
+    public String getWindowApps() throws RemoteException {
+        // TODO Auto-generated method stub
+        return mPkgName;
+    }
+
+}
diff --git a/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java b/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java
index ff03553..7953fb6 100644
--- a/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java
+++ b/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java
@@ -212,28 +212,28 @@ public final class ActivityManagerService extends ActivityManagerNative
     static final boolean DEBUG_BACKGROUND_BROADCAST = DEBUG_BROADCAST || false;
     static final boolean DEBUG_CLEANUP = localLOGV || false;
     static final boolean DEBUG_CONFIGURATION = localLOGV || false;
-    static final boolean DEBUG_FOCUS = false;
+    static final boolean DEBUG_FOCUS = true;
     static final boolean DEBUG_IMMERSIVE = localLOGV || false;
     static final boolean DEBUG_MU = localLOGV || false;
     static final boolean DEBUG_OOM_ADJ = localLOGV || false;
     static final boolean DEBUG_LRU = localLOGV || false;
-    static final boolean DEBUG_PAUSE = localLOGV || false;
+    static final boolean DEBUG_PAUSE = localLOGV || true;
     static final boolean DEBUG_POWER = localLOGV || false;
     static final boolean DEBUG_POWER_QUICK = DEBUG_POWER || false;
     static final boolean DEBUG_PROCESS_OBSERVERS = localLOGV || false;
     static final boolean DEBUG_PROCESSES = localLOGV || false;
     static final boolean DEBUG_PROVIDER = localLOGV || false;
-    static final boolean DEBUG_RESULTS = localLOGV || false;
+    static final boolean DEBUG_RESULTS = localLOGV || true;
     static final boolean DEBUG_SERVICE = localLOGV || false;
     static final boolean DEBUG_SERVICE_EXECUTING = localLOGV || false;
-    static final boolean DEBUG_STACK = localLOGV || false;
-    static final boolean DEBUG_SWITCH = localLOGV || false;
-    static final boolean DEBUG_TASKS = localLOGV || false;
+    static final boolean DEBUG_STACK = localLOGV || true;
+    static final boolean DEBUG_SWITCH = localLOGV || true;
+    static final boolean DEBUG_TASKS = localLOGV || true;
     static final boolean DEBUG_THUMBNAILS = localLOGV || false;
     static final boolean DEBUG_TRANSITION = localLOGV || false;
     static final boolean DEBUG_URI_PERMISSION = localLOGV || false;
-    static final boolean DEBUG_USER_LEAVING = localLOGV || false;
-    static final boolean DEBUG_VISBILITY = localLOGV || false;
+    static final boolean DEBUG_USER_LEAVING = localLOGV || true;
+    static final boolean DEBUG_VISBILITY = localLOGV || true;
     static final boolean DEBUG_PSS = localLOGV || false;
     static final boolean DEBUG_LOCKSCREEN = localLOGV || false;
     static final boolean VALIDATE_TOKENS = false;
@@ -7004,8 +7004,9 @@ public final class ActivityManagerService extends ActivityManagerNative
     @Override
     public boolean removeTask(int taskId, int flags) {
         synchronized (this) {
-            enforceCallingPermission(android.Manifest.permission.REMOVE_TASKS,
-                    "removeTask()");
+           //Ritter_multi old            
+            //enforceCallingPermission(android.Manifest.permission.REMOVE_TASKS,
+            //        "removeTask()");
             long ident = Binder.clearCallingIdentity();
             try {
                 TaskRecord tr = recentTaskForIdLocked(taskId);
@@ -7038,9 +7039,17 @@ public final class ActivityManagerService extends ActivityManagerNative
      */
     @Override
     public void moveTaskToFront(int task, int flags, Bundle options) {
-        enforceCallingPermission(android.Manifest.permission.REORDER_TASKS,
-                "moveTaskToFront()");
-
+       
+        //Ritter_Multi
+        /*enforceCallingPermission(android.Manifest.permission.REORDER_TASKS,
+                         "moveTaskToFront()");
+        +*/
+        if (options == null) {
+            // Ritter not check permisson
+        } else {
+            enforceCallingPermission(android.Manifest.permission.REORDER_TASKS, "moveTaskToFront()");
+        }
+        
         if (DEBUG_STACK) Slog.d(TAG, "moveTaskToFront: moving task=" + task);
         synchronized(this) {
             if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(),
@@ -7050,6 +7059,12 @@ public final class ActivityManagerService extends ActivityManagerNative
             }
             final long origId = Binder.clearCallingIdentity();
             try {
+                /**
+                 * Ritter_multi Before move task, set mMoveTaskBackTaskInvisible
+                 * = false.
+                 */
+                mStackSupervisor.mMoveTaskBackTaskInvisible = false;
+                // end
                 mStackSupervisor.findTaskToMoveToFrontLocked(task, flags, options);
             } finally {
                 Binder.restoreCallingIdentity(origId);
@@ -8270,6 +8285,7 @@ public final class ActivityManagerService extends ActivityManagerNative
     }
 
     public void goingToSleep() {
+        Log.d(TAG,"Ritter::AS goToSleep()");
         if (checkCallingPermission(android.Manifest.permission.DEVICE_POWER)
                 != PackageManager.PERMISSION_GRANTED) {
             throw new SecurityException("Requires permission "
@@ -14073,6 +14089,7 @@ public final class ActivityManagerService extends ActivityManagerNative
      */
     boolean updateConfigurationLocked(Configuration values,
             ActivityRecord starting, boolean persistent, boolean initLocale) {
+        Log.d(TAG,"Ritter::AMS updateConfigurationLocked()");
         // do nothing if we are headless
         if (mHeadless) return true;
 
@@ -16056,6 +16073,7 @@ public final class ActivityManagerService extends ActivityManagerNative
 
     @Override
     public boolean switchUser(final int userId) {
+        Log.d(TAG,"Ritter::AMS switchUser()");
         if (checkCallingPermission(android.Manifest.permission.INTERACT_ACROSS_USERS_FULL)
                 != PackageManager.PERMISSION_GRANTED) {
             String msg = "Permission Denial: switchUser() from pid="
@@ -16645,4 +16663,18 @@ public final class ActivityManagerService extends ActivityManagerNative
         info.applicationInfo = getAppInfoForUser(info.applicationInfo, userId);
         return info;
     }
+    
+    // Ritter_Multi
+    @Override
+    public void moveHomeToTop() throws RemoteException {
+        Log.d(TAG, "Ritter::AMS moveHomeToTop()");
+        mStackSupervisor.moveHomeToTop();
+    }
+    
+    /*   //Ritter_Multi
+    @Override
+    public void moveTaskToTop_AM(int taskID) throws RemoteException {
+        Log.d(TAG,"Ritter::AMS moveTaskToTop_AM() taskID:"+taskID);
+        moveTaskToFront(taskID,0,null);
+    }*/
 }
diff --git a/frameworks/base/services/java/com/android/server/am/ActivityStack.java b/frameworks/base/services/java/com/android/server/am/ActivityStack.java
index 07c2201..e92129a 100755
--- a/frameworks/base/services/java/com/android/server/am/ActivityStack.java
+++ b/frameworks/base/services/java/com/android/server/am/ActivityStack.java
@@ -16,8 +16,6 @@
 
 package com.android.server.am;
 
-import static com.android.server.am.ActivityManagerService.TAG;
-import static com.android.server.am.ActivityManagerService.localLOGV;
 import static com.android.server.am.ActivityManagerService.DEBUG_CLEANUP;
 import static com.android.server.am.ActivityManagerService.DEBUG_CONFIGURATION;
 import static com.android.server.am.ActivityManagerService.DEBUG_PAUSE;
@@ -28,29 +26,33 @@ import static com.android.server.am.ActivityManagerService.DEBUG_TASKS;
 import static com.android.server.am.ActivityManagerService.DEBUG_TRANSITION;
 import static com.android.server.am.ActivityManagerService.DEBUG_USER_LEAVING;
 import static com.android.server.am.ActivityManagerService.DEBUG_VISBILITY;
+import static com.android.server.am.ActivityManagerService.TAG;
 import static com.android.server.am.ActivityManagerService.VALIDATE_TOKENS;
-
+import static com.android.server.am.ActivityManagerService.localLOGV;
 import static com.android.server.am.ActivityStackSupervisor.DEBUG_ADD_REMOVE;
 import static com.android.server.am.ActivityStackSupervisor.DEBUG_APP;
 import static com.android.server.am.ActivityStackSupervisor.DEBUG_SAVED_STATE;
 import static com.android.server.am.ActivityStackSupervisor.DEBUG_STATES;
 import static com.android.server.am.ActivityStackSupervisor.HOME_STACK_ID;
 
-import com.android.internal.os.BatteryStatsImpl;
-import com.android.server.Watchdog;
-import com.android.server.am.ActivityManagerService.ItemMatcher;
-import com.android.server.wm.AppTransition;
-import com.android.server.wm.TaskGroup;
-import com.android.server.wm.WindowManagerService;
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Objects;
 
 import android.app.Activity;
 import android.app.ActivityManager;
+import android.app.ActivityManager.RunningTaskInfo;
 import android.app.ActivityOptions;
 import android.app.AppGlobals;
 import android.app.IActivityController;
 import android.app.IThumbnailReceiver;
 import android.app.ResultInfo;
-import android.app.ActivityManager.RunningTaskInfo;
+import android.app.WindowAppsManager;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -72,16 +74,16 @@ import android.os.SystemClock;
 import android.os.Trace;
 import android.os.UserHandle;
 import android.util.EventLog;
+import android.util.Log;
 import android.util.Slog;
 import android.view.Display;
 
-import java.io.FileDescriptor;
-import java.io.PrintWriter;
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
+import com.android.internal.os.BatteryStatsImpl;
+import com.android.server.Watchdog;
+import com.android.server.am.ActivityManagerService.ItemMatcher;
+import com.android.server.wm.AppTransition;
+import com.android.server.wm.TaskGroup;
+import com.android.server.wm.WindowManagerService;
 
 /**
  * State and management of a single stack of activities.
@@ -343,6 +345,7 @@ final class ActivityStack {
     }
 
     final ActivityRecord topRunningActivityLocked(ActivityRecord notTop) {
+        Log.d(TAG,"Ritter::AS BACK_KEY topRunningActivityLocked()");
         for (int taskNdx = mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
             ActivityRecord r = mTaskHistory.get(taskNdx).topRunningActivityLocked(notTop);
             if (r != null) {
@@ -667,6 +670,7 @@ final class ActivityStack {
     }
 
     void goToSleep() {
+        Log.d(TAG,"Ritter::AS goToSleep()");
         ensureActivitiesVisibleLocked(null, 0);
 
         // Make sure any stopped but visible activities are now sleeping.
@@ -722,6 +726,7 @@ final class ActivityStack {
     }
 
     final void startPausingLocked(boolean userLeaving, boolean uiSleeping) {
+        Log.d(TAG,"Ritter::AS startPausingLocked()");
         if (mPausingActivity != null) {
             Slog.e(TAG, "Trying to pause when pause is already pending for "
                   + mPausingActivity, new RuntimeException("here").fillInStackTrace());
@@ -758,8 +763,35 @@ final class ActivityStack {
                         prev.userId, System.identityHashCode(prev),
                         prev.shortComponentName);
                 mService.updateUsageStats(prev, false);
-                prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,
-                        userLeaving, prev.configChangeFlags);
+
+                // Ritter_Multi old
+                // prev.app.thread.schedulePauseActivity(prev.appToken,
+                // prev.finishing,
+                // userLeaving, prev.configChangeFlags);
+
+                // Ritter_Multi new
+                // Get window apps from service
+                String APPs = "";
+                WindowAppsManager mWindowAppsManager = (WindowAppsManager) mContext
+                        .getSystemService("window_apps");
+                try {
+                    APPs = mWindowAppsManager.getWindowApps();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+                ArrayList<String> pkgList = new ArrayList<String>(Arrays.asList(APPs.split("#")));
+                // if (prev.packageName.equals("com.example.hello")
+                // || prev.packageName.equals("com.example.activity")
+                // || prev.packageName.equals("com.android.launcher2")) {
+                if ((!prev.packageName.isEmpty() && pkgList.contains(prev.packageName))
+                        || prev.packageName.equals("com.android.launcher2")) {
+                    completePauseLocked();
+                } else {
+                    prev.app.thread.schedulePauseActivity(prev.appToken, prev.finishing,
+                            userLeaving, prev.configChangeFlags);
+                }
+                // end
+                
             } catch (Exception e) {
                 // Ignore exception, if process died other code will cleanup.
                 Slog.w(TAG, "Exception thrown during pause", e);
@@ -862,6 +894,7 @@ final class ActivityStack {
     }
 
     private void completePauseLocked() {
+        Log.d(TAG,"Ritter::AS completePauseLocked()");
         ActivityRecord prev = mPausingActivity;
         if (DEBUG_PAUSE) Slog.v(TAG, "Complete pause: " + prev);
 
@@ -907,6 +940,7 @@ final class ActivityStack {
         }
 
         final ActivityStack topStack = mStackSupervisor.getFocusedStack();
+        Log.d(TAG,"Ritter::AS completePauseLocked()");
         if (!mService.isSleepingOrShuttingDown()) {
             mStackSupervisor.resumeTopActivitiesLocked(topStack, prev, null);
         } else {
@@ -954,6 +988,7 @@ final class ActivityStack {
      * this function updates the rest of our state to match that fact.
      */
     private void completeResumeLocked(ActivityRecord next) {
+        Log.d(TAG,"Ritter::AS completeResumeLocked()");
         next.idle = false;
         next.results = null;
         next.newIntents = null;
@@ -1039,7 +1074,19 @@ final class ActivityStack {
         if (DEBUG_VISBILITY) Slog.v(
                 TAG, "ensureActivitiesVisible behind " + top
                 + " configChanges=0x" + Integer.toHexString(configChanges));
-
+        /**
+         * Ritter_multi If this is called by moveTaskToFront() by touch window,
+         * return immediately.
+         */
+        if (mStackSupervisor.mMoveTaskBackTaskInvisible) {
+            Log.d(TAG,
+                    "Ritter::AS ensureActivitiesVisible: mStackSupervisor.mMoveTaskBackTaskInvisible == true return");
+            return false;
+        } else {
+            Log.d(TAG,
+                    "Ritter::AS ensureActivitiesVisible: mStackSupervisor.mMoveTaskBackTaskInvisible == false");
+        }
+        
         if (mTranslucentActivityWaiting != top) {
             mUndrawnActivitiesBelowTopTranslucent.clear();
             if (mTranslucentActivityWaiting != null) {
@@ -1053,14 +1100,56 @@ final class ActivityStack {
         // If the top activity is not fullscreen, then we need to
         // make sure any activities under it are now visible.
         boolean aboveTop = true;
+            
         boolean showHomeBehindStack = false;
         boolean behindFullscreen = !mStackSupervisor.isFrontStack(this) &&
                 !(forceHomeShown && isHomeStack());
+        
+        Log.d(TAG,
+                "Ritter::AS ensureActivitiesVisibleLocked: behindFullscreen = !mStackSupervisor.isFrontStack(this) && !(forceHomeShown && isHomeStack()");
+        Log.d(TAG, "Ritter::AS ensureActivitiesVisibleLocked:behindFullscreen:" + behindFullscreen);
+        Log.d(TAG,
+                "Ritter::AS ensureActivitiesVisibleLocked: !mStackSupervisor.isFrontStack(this):"
+                        + !mStackSupervisor.isFrontStack(this) + ",forceHomeShown:"
+                        + forceHomeShown + ",isHomeStack():" + isHomeStack());
+
+        // Ritter_multi
+        // Get window apps from service
+        String APPs = "";
+        WindowAppsManager mWindowAppsManager = (WindowAppsManager) mContext
+                .getSystemService("window_apps");
+        try {
+            APPs = mWindowAppsManager.getWindowApps();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        ArrayList<String> pkgList = new ArrayList<String>(Arrays.asList(APPs.split("#")));
+        // end
+        
         for (int taskNdx = mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
             final TaskRecord task = mTaskHistory.get(taskNdx);
             final ArrayList<ActivityRecord> activities = task.mActivities;
+            Log.d(TAG,"Ritter::AS ensureActivitiesVisibleLocked:taskNdx:"+taskNdx+",task.stringName:"+task.stringName+" =============");
             for (int activityNdx = activities.size() - 1; activityNdx >= 0; --activityNdx) {
                 final ActivityRecord r = activities.get(activityNdx);
+                Log.d(TAG,"Ritter::AS ensureActivitiesVisibleLocked:activityNdx:"+activityNdx+",r.packageName:"+r.packageName+" +++++++++++++");
+                Log.d(TAG, "Ritter::AS ensureActivitiesVisibleLocked: task.mOnTopOfHome:"
+                        + task.mOnTopOfHome + ",r.fullscreen:" + r.fullscreen);
+
+                // Ritter_multi
+                // if(r.packageName.equals("com.example.hello")
+                // ||r.packageName.equals("com.example.activity")
+                // ||r.packageName.equals("com.android.systemui")
+                // ){
+                if ((!r.packageName.isEmpty() && pkgList.contains(r.packageName))
+                        || r.packageName.equals("com.android.systemui")) {
+                    r.fullscreen = false;
+                    showHomeBehindStack = true;
+
+                    // behindFullscreen = false;
+                }
+                // end
+                
                 if (r.finishing) {
                     continue;
                 }
@@ -1121,6 +1210,7 @@ final class ActivityStack {
                                 if (mTranslucentActivityWaiting != null) {
                                     mUndrawnActivitiesBelowTopTranslucent.add(r);
                                 }
+                                Log.d(TAG,"Ritter::AS ensureActivitiesVisibleLocked: setAppVisibility true 2");
                                 mWindowManager.setAppVisibility(r.appToken, true);
                                 r.sleeping = false;
                                 r.app.pendingUiClean = true;
@@ -1159,6 +1249,7 @@ final class ActivityStack {
                         if (DEBUG_VISBILITY) Slog.v(TAG, "Making invisible: " + r);
                         r.visible = false;
                         try {
+                            Log.d(TAG,"Ritter::AS ensureActivitiesVisibleLocked: setAppVisibility false 3");
                             mWindowManager.setAppVisibility(r.appToken, false);
                             switch (r.state) {
                                 case STOPPING:
@@ -1250,6 +1341,7 @@ final class ActivityStack {
     }
 
     final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {
+        Log.d(TAG,"Ritter::AS resumeTopActivityLocked()BBB");
         if (ActivityManagerService.DEBUG_LOCKSCREEN) mService.logLockScreen("");
 
         // Find the first activity that is not finishing.
@@ -1268,7 +1360,7 @@ final class ActivityStack {
             if (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();
             return mStackSupervisor.resumeHomeActivity(prev);
         }
-
+        Log.d(TAG,"Ritter::AS resumeTopActivityLocked()BBB next:"+next);
         next.delayedResume = false;
 
         // If the top activity is the resumed one, nothing to do.
@@ -1286,9 +1378,23 @@ final class ActivityStack {
 
         final TaskRecord nextTask = next.task;
         final TaskRecord prevTask = prev != null ? prev.task : null;
+        
+        // Ritter_multi
+        if (prev != null) {
+            Log.d(TAG, "Ritter::AS resumeTopActivityLocked()BBB prev:" + prev);
+        } else {
+            Log.d(TAG, "Ritter::AS resumeTopActivityLocked()BBB prev==null");
+        }
+        if (prevTask != null) {
+            Log.d(TAG, "Ritter::AS resumeTopActivityLocked()BBB prevTask:" + prevTask);
+        } else {
+            Log.d(TAG, "Ritter::AS resumeTopActivityLocked()BBB prevTask==null");
+        }
+        
         if (prevTask != null && prevTask.mOnTopOfHome && prev.finishing && prev.frontOfTask) {
             if (DEBUG_STACK)  mStackSupervisor.validateTopActivitiesLocked();
             if (prevTask == nextTask) {
+                Log.d(TAG,"Ritter::AS resumeTopActivityLocked()BBB 1 prevTask == nextTask");
                 ArrayList<ActivityRecord> activities = prevTask.mActivities;
                 final int numActivities = activities.size();
                 for (int activityNdx = 0; activityNdx < numActivities; ++activityNdx) {
@@ -1301,13 +1407,34 @@ final class ActivityStack {
                     }
                 }
             } else if (prevTask != topTask()) {
+                Log.d(TAG,"Ritter::AS resumeTopActivityLocked()BBB 2 prevTask != topTask()");
                 // This task is going away but it was supposed to return to the home task.
                 // Now the task above it has to return to the home task instead.
                 final int taskNdx = mTaskHistory.indexOf(prevTask) + 1;
                 mTaskHistory.get(taskNdx).mOnTopOfHome = true;
             } else {
-                if (DEBUG_STATES) Slog.d(TAG, "resumeTopActivityLocked: Launching home next");
+                // Ritter_multi preTask!=nextTask || prevTask == topTask()
+                // This is the key part when BACK_KEY pressed and Home show up
+                // reason
+                if (true || DEBUG_STATES)
+                    Log.d(TAG, "Ritter::AS resumeTopActivityLocked: Launching home next");
+                // Ritter_Multi old
                 return mStackSupervisor.resumeHomeActivity(prev);
+
+                // Ritter_multi new
+//                ArrayList<ActivityRecord> activities = nextTask.mActivities;
+//                final int numActivities = activities.size();
+//                for (int activityNdx = 0; activityNdx < numActivities; ++activityNdx) {
+//                    final ActivityRecord r = activities.get(activityNdx);
+//                    // r is usually the same as next, but what if two activities
+//                    // were launched
+//                    // before prev finished?
+//                    if (!r.finishing) {
+//                        r.frontOfTask = true;
+//                        break;
+//                    }
+//                }
+                
             }
         }
 
@@ -1384,12 +1511,16 @@ final class ActivityStack {
                 mLastStartedActivity = next;
             }
         }
-
+        Log.d(TAG,"Ritter::AS We need to start pausing the current activity");
+        Log.d(TAG,"Ritter::AS userLeaving:"+userLeaving);
         // We need to start pausing the current activity so the top one
         // can be resumed...
         boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving);
+        Log.d(TAG,"Ritter::AS pauseBackStacks:"+pausing);
         if (mResumedActivity != null) {
+            Log.d(TAG,"Ritter::AS mResumedActivity != null");
             pausing = true;
+            // Ritter_Multi this part can be modified
             startPausingLocked(userLeaving, false);
             if (DEBUG_STATES) Slog.d(TAG, "resumeTopActivityLocked: Pausing " + mResumedActivity);
         }
@@ -1422,6 +1553,7 @@ final class ActivityStack {
         }
 
         if (prev != null && prev != next) {
+            Log.d(TAG,"Ritter::AS prev != null && prev != next");
             if (!prev.waitingVisible && next != null && !next.nowVisible) {
                 prev.waitingVisible = true;
                 mStackSupervisor.mWaitingVisibleActivities.add(prev);
@@ -1437,6 +1569,8 @@ final class ActivityStack {
                 // previous should actually be hidden depending on whether the
                 // new one is found to be full-screen or not.
                 if (prev.finishing) {
+                    Log.d(TAG,"Ritter::AS resumeTopActivityLocked: set prev visibility:"+prev+" false");
+                    Log.d(TAG,"Ritter::AS resumeTopActivityLocked: setAppVisibility false 1");  
                     mWindowManager.setAppVisibility(prev.appToken, false);
                     if (DEBUG_SWITCH) Slog.v(TAG, "Not waiting for visible to hide: "
                             + prev + ", waitingVisible="
@@ -1479,6 +1613,7 @@ final class ActivityStack {
                             : AppTransition.TRANSIT_TASK_CLOSE, false);
                 }
                 mWindowManager.setAppWillBeHidden(prev.appToken);
+                Log.d(TAG,"Ritter::AS resumeTopActivityLocked: setAppVisibility false 2");
                 mWindowManager.setAppVisibility(prev.appToken, false);
             } else {
                 if (DEBUG_TRANSITION) Slog.v(TAG, "Prepare open transition: prev=" + prev);
@@ -1493,6 +1628,7 @@ final class ActivityStack {
             }
             if (false) {
                 mWindowManager.setAppWillBeHidden(prev.appToken);
+                Log.d(TAG,"Ritter::AS resumeTopActivityLocked: setAppVisibility false 3");
                 mWindowManager.setAppVisibility(prev.appToken, false);
             }
         } else {
@@ -1513,7 +1649,7 @@ final class ActivityStack {
         ActivityStack lastStack = mStackSupervisor.getLastStack();
         if (next.app != null && next.app.thread != null) {
             if (DEBUG_SWITCH) Slog.v(TAG, "Resume running: " + next);
-
+            Log.d(TAG,"Ritter::AS resumeTopActivityLocked: setAppVisibility true 4");
             // This activity is now becoming visible.
             mWindowManager.setAppVisibility(next.appToken, true);
 
@@ -1559,6 +1695,7 @@ final class ActivityStack {
                         "Activity config changed during resume: " + next
                         + ", new next: " + nextNext);
                 if (nextNext != next) {
+                    Log.d(TAG,"Ritter::AS Do Over!!!???");
                     // Do over!
                     mStackSupervisor.scheduleResumeTopActivities();
                 }
@@ -1603,6 +1740,7 @@ final class ActivityStack {
 
                 if (DEBUG_STATES) Slog.d(TAG, "resumeTopActivityLocked: Resumed " + next);
             } catch (Exception e) {
+                Log.d(TAG,"Ritter::AS Whoops, need to restart this activity!A");
                 // Whoops, need to restart this activity!
                 if (DEBUG_STATES) Slog.v(TAG, "Resume failed; resetting state to "
                         + lastState + ": " + next);
@@ -1692,6 +1830,7 @@ final class ActivityStack {
 
     final void startActivityLocked(ActivityRecord r, boolean newTask,
             boolean doResume, boolean keepCurTransition, Bundle options) {
+        Log.d(TAG,"Ritter::AS startActivityLocked()");
         TaskRecord rTask = r.task;
         final int taskId = rTask.taskId;
         if (taskForIdLocked(taskId) == null || newTask) {
@@ -1755,6 +1894,7 @@ final class ActivityStack {
         r.putInHistory();
         r.frontOfTask = newTask;
         if (!isHomeStack() || numActivities() > 0) {
+            Log.d(TAG,"Ritter::AS startActivityLocked() !isHomeStack() || numActivities() > 0");
             // We want to show the starting preview window if we are
             // switching to a new task, or the next activity's process is
             // not currently running.
@@ -1769,9 +1909,11 @@ final class ActivityStack {
             if (DEBUG_TRANSITION) Slog.v(TAG,
                     "Prepare open transition: starting " + r);
             if ((r.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
+                Log.d(TAG,"Ritter::AS startActivityLocked() Intent.FLAG_ACTIVITY_NO_ANIMATION");
                 mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, keepCurTransition);
                 mNoAnimActivities.add(r);
             } else {
+                Log.d(TAG,"Ritter::AS startActivityLocked() !Intent.FLAG_ACTIVITY_NO_ANIMATION");
                 mWindowManager.prepareAppTransition(newTask
                         ? AppTransition.TRANSIT_TASK_OPEN
                         : AppTransition.TRANSIT_ACTIVITY_OPEN, keepCurTransition);
@@ -1820,6 +1962,7 @@ final class ActivityStack {
                         prev != null ? prev.appToken : null, showStartingIcon);
             }
         } else {
+            Log.d(TAG,"Ritter::AS startActivityLocked() this is the first activity, don't do any fancy animations");
             // If this is the first activity, don't do any fancy animations,
             // because there is nothing for it to animate on top of.
             mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,
@@ -2231,6 +2374,7 @@ final class ActivityStack {
     }
 
     final void stopActivityLocked(ActivityRecord r) {
+        Log.d(TAG,"Ritter::AS stopActivityLocked r.packageName:"+r.packageName);
         if (DEBUG_SWITCH) Slog.d(TAG, "Stopping: " + r);
         if ((r.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_HISTORY) != 0
                 || (r.info.flags&ActivityInfo.FLAG_NO_HISTORY) != 0) {
@@ -2259,6 +2403,7 @@ final class ActivityStack {
                 if (DEBUG_VISBILITY) Slog.v(
                         TAG, "Stopping visible=" + r.visible + " for " + r);
                 if (!r.visible) {
+                    Log.d(TAG,"Ritter::AS stopActivityLocked: setAppVisibility false 1");
                     mWindowManager.setAppVisibility(r.appToken, false);
                 }
                 r.app.thread.scheduleStopActivity(r.appToken, r.visible, r.configChangeFlags);
@@ -2289,6 +2434,7 @@ final class ActivityStack {
      */
     final boolean requestFinishActivityLocked(IBinder token, int resultCode,
             Intent resultData, String reason, boolean oomAdj) {
+        Log.d(TAG,"Ritter::AS BACK_KEY requestFinishActivityLocked()");
         ActivityRecord r = isInStackLocked(token);
         if (DEBUG_RESULTS || DEBUG_STATES) Slog.v(
                 TAG, "Finishing activity token=" + token + " r="
@@ -2370,6 +2516,7 @@ final class ActivityStack {
     }
 
     final void finishActivityResultsLocked(ActivityRecord r, int resultCode, Intent resultData) {
+        Log.d(TAG,"Ritter::AS BACK_KEY finishActivityResultsLocked()");
         // send the result
         ActivityRecord resultTo = r.resultTo;
         if (resultTo != null) {
@@ -2402,6 +2549,7 @@ final class ActivityStack {
      */
     final boolean finishActivityLocked(ActivityRecord r, int resultCode, Intent resultData,
             String reason, boolean oomAdj) {
+        Log.d(TAG,"Ritter:AS BACK_KEY finishActivityLocked()");
         if (r.finishing) {
             Slog.w(TAG, "Duplicate finish request for " + r);
             return false;
@@ -2444,11 +2592,13 @@ final class ActivityStack {
             boolean endTask = index <= 0;
             if (DEBUG_VISBILITY || DEBUG_TRANSITION) Slog.v(TAG,
                     "Prepare close transition: finishing " + r);
-            mWindowManager.prepareAppTransition(endTask
-                    ? AppTransition.TRANSIT_TASK_CLOSE
-                    : AppTransition.TRANSIT_ACTIVITY_CLOSE, false);
+            //Ritter_multi old
+            //mWindowManager.prepareAppTransition(endTask
+            //        ? AppTransition.TRANSIT_TASK_CLOSE
+            //        : AppTransition.TRANSIT_ACTIVITY_CLOSE, false);
 
             // Tell window manager to prepare for this one to be removed.
+            Log.d(TAG,"Ritter::AS finishActivityLocked: setAppVisibility false");
             mWindowManager.setAppVisibility(r.appToken, false);
 
             if (mPausingActivity == null) {
@@ -2474,6 +2624,7 @@ final class ActivityStack {
     static final int FINISH_AFTER_VISIBLE = 2;
 
     final ActivityRecord finishCurrentActivityLocked(ActivityRecord r, int mode, boolean oomAdj) {
+        Log.d(TAG,"Ritter::AMS finishCurrentActivityLocked()");
         // First things first: if this activity is currently visible,
         // and the resumed activity is not yet visible, then hold off on
         // finishing until the resumed one becomes visible.
@@ -2735,6 +2886,7 @@ final class ActivityStack {
     }
 
     final void destroyActivitiesLocked(ProcessRecord owner, boolean oomAdj, String reason) {
+        Log.d(TAG,"Ritter::AMS destroyActivitiesLocked()");
         boolean lastIsOpaque = false;
         boolean activityRemoved = false;
         for (int taskNdx = mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
@@ -2872,6 +3024,7 @@ final class ActivityStack {
     }
 
     final void activityDestroyedLocked(IBinder token) {
+        Log.d(TAG,"Ritter::AMS activityDestroyedLocked()");
         final long origId = Binder.clearCallingIdentity();
         try {
             ActivityRecord r = ActivityRecord.forToken(token);
@@ -3024,6 +3177,7 @@ final class ActivityStack {
     }
 
     final boolean findTaskToMoveToFrontLocked(int taskId, int flags, Bundle options) {
+        Log.d(TAG,"Ritter::AS findTaskToMoveToFrontLocked() flags:"+flags);
         final TaskRecord task = taskForIdLocked(taskId);
         if (task != null) {
             if ((flags & ActivityManager.MOVE_TASK_NO_USER_ACTION) == 0) {
@@ -3034,6 +3188,17 @@ final class ActivityStack {
                 // we'll just indicate that this task returns to the home task.
                 task.mOnTopOfHome = true;
             }
+            
+            // Ritter_multi
+            if ((flags & ActivityManager.MOVE_TASK_BACK_TASKS_INVISIBLE) != 0) {
+                Log.d(TAG,
+                        "Ritter::AS findTaskToMoveToFrontLocked() mStackSupervisor.mMoveTaskBackTaskInvisible = true");
+                mStackSupervisor.mMoveTaskBackTaskInvisible = true;
+            } else {
+                Log.d(TAG,
+                        "Ritter::AS findTaskToMoveToFrontLocked() mStackSupervisor.mMoveTaskBackTaskInvisible = false");
+            }
+            
             moveTaskToFrontLocked(task, null, options);
             return true;
         }
@@ -3041,6 +3206,7 @@ final class ActivityStack {
     }
 
     final void moveTaskToFrontLocked(TaskRecord tr, ActivityRecord reason, Bundle options) {
+        Log.d(TAG,"Ritter::AS moveTaskToFrontLocked()");
         if (DEBUG_SWITCH) Slog.v(TAG, "moveTaskToFront: " + tr);
 
         final int numTasks = mTaskHistory.size();
@@ -3098,7 +3264,7 @@ final class ActivityStack {
      */
     final boolean moveTaskToBackLocked(int taskId, ActivityRecord reason) {
         Slog.i(TAG, "moveTaskToBack: " + taskId);
-
+        Log.d(TAG,"Ritter::AMS moveTaskToBackLocked()");
         // If we have a watcher, preflight the move before committing to it.  First check
         // for *other* available tasks, but if none are available, then try again allowing the
         // current task to be selected.
@@ -3194,6 +3360,7 @@ final class ActivityStack {
      */
     final boolean ensureActivityConfigurationLocked(ActivityRecord r,
             int globalChanges) {
+        Log.d(TAG,"Ritter::AS ensureActivityConfigurationLocked()");
         if (mConfigWillChange) {
             if (DEBUG_SWITCH || DEBUG_CONFIGURATION) Slog.v(TAG,
                     "Skipping config check (will change): " + r);
diff --git a/frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java b/frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java
index 93de0a6..6b6507f 100755
--- a/frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java
+++ b/frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java
@@ -20,7 +20,6 @@ import static android.Manifest.permission.START_ANY_ACTIVITY;
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static android.content.Intent.FLAG_ACTIVITY_TASK_ON_HOME;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
-import static com.android.server.am.ActivityManagerService.localLOGV;
 import static com.android.server.am.ActivityManagerService.DEBUG_CONFIGURATION;
 import static com.android.server.am.ActivityManagerService.DEBUG_FOCUS;
 import static com.android.server.am.ActivityManagerService.DEBUG_PAUSE;
@@ -31,17 +30,24 @@ import static com.android.server.am.ActivityManagerService.DEBUG_TASKS;
 import static com.android.server.am.ActivityManagerService.DEBUG_USER_LEAVING;
 import static com.android.server.am.ActivityManagerService.FIRST_SUPERVISOR_STACK_MSG;
 import static com.android.server.am.ActivityManagerService.TAG;
+import static com.android.server.am.ActivityManagerService.localLOGV;
+
+import java.io.FileDescriptor;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
 
 import android.app.Activity;
 import android.app.ActivityManager;
+import android.app.ActivityManager.RunningTaskInfo;
 import android.app.ActivityOptions;
 import android.app.AppGlobals;
 import android.app.IActivityManager;
+import android.app.IActivityManager.WaitResult;
 import android.app.IApplicationThread;
 import android.app.IThumbnailReceiver;
 import android.app.PendingIntent;
-import android.app.ActivityManager.RunningTaskInfo;
-import android.app.IActivityManager.WaitResult;
 import android.app.ResultInfo;
 import android.content.ComponentName;
 import android.content.Context;
@@ -67,6 +73,7 @@ import android.os.RemoteException;
 import android.os.SystemClock;
 import android.os.UserHandle;
 import android.util.EventLog;
+import android.util.Log;
 import android.util.Slog;
 import android.util.SparseIntArray;
 
@@ -77,18 +84,12 @@ import com.android.server.am.ActivityStack.ActivityState;
 import com.android.server.wm.StackBox;
 import com.android.server.wm.WindowManagerService;
 
-import java.io.FileDescriptor;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.List;
-
 public final class ActivityStackSupervisor {
-    static final boolean DEBUG = ActivityManagerService.DEBUG || false;
+    static final boolean DEBUG = ActivityManagerService.DEBUG || true;
     static final boolean DEBUG_ADD_REMOVE = DEBUG || false;
     static final boolean DEBUG_APP = DEBUG || false;
     static final boolean DEBUG_SAVED_STATE = DEBUG || false;
-    static final boolean DEBUG_STATES = DEBUG || false;
+    static final boolean DEBUG_STATES = DEBUG || true;
     static final boolean DEBUG_IDLE = DEBUG || false;
 
     public static final int HOME_STACK_ID = 0;
@@ -205,7 +206,11 @@ public final class ActivityStackSupervisor {
 
     /** Stack id of the front stack when user switched, indexed by userId. */
     SparseIntArray mUserStackInFront = new SparseIntArray(2);
-
+    /** Ritter_multi
+     * A flag to indicate move task by touch situation.
+    **/
+    public boolean mMoveTaskBackTaskInvisible = false;
+    
     public ActivityStackSupervisor(ActivityManagerService service, Context context,
             Looper looper) {
         mService = service;
@@ -237,21 +242,26 @@ public final class ActivityStackSupervisor {
     }
 
     ActivityStack getFocusedStack() {
+        Log.d(TAG,"Ritter::ASS getFocusedStack()");
         if (mFocusedStack == null) {
+            Log.d(TAG,"Ritter::ASS getFocusedStack() return HOME");
             return mHomeStack;
         }
         switch (mStackState) {
             case STACK_STATE_HOME_IN_FRONT:
             case STACK_STATE_HOME_TO_FRONT:
+                Log.d(TAG,"Ritter::ASS getFocusedStack() return HOME");
                 return mHomeStack;
             case STACK_STATE_HOME_IN_BACK:
             case STACK_STATE_HOME_TO_BACK:
             default:
+                Log.d(TAG,"Ritter::ASS getFocusedStack() return FOCUS");
                 return mFocusedStack;
         }
     }
 
     ActivityStack getLastStack() {
+        Log.d(TAG,"Ritter::ASS getLastStack() mFocusedStack:"+getFocusedStack().getStackId());
         switch (mStackState) {
             case STACK_STATE_HOME_IN_FRONT:
             case STACK_STATE_HOME_TO_BACK:
@@ -264,6 +274,7 @@ public final class ActivityStackSupervisor {
     }
 
     boolean isFrontStack(ActivityStack stack) {
+        Log.d(TAG,"Ritter::ASS isFrontStack()");
         return !(stack.isHomeStack() ^ getFocusedStack().isHomeStack());
     }
 
@@ -332,6 +343,7 @@ public final class ActivityStackSupervisor {
     }
 
     void removeTask(TaskRecord task) {
+        Log.d(TAG,"Ritter::ASS removeTask() mFocusedStack:"+getFocusedStack().getStackId());
         mWindowManager.removeTask(task.taskId);
         final ActivityStack stack = task.stack;
         final ActivityRecord r = stack.mResumedActivity;
@@ -367,6 +379,7 @@ public final class ActivityStackSupervisor {
     }
 
     boolean attachApplicationLocked(ProcessRecord app, boolean headless) throws Exception {
+        Log.d(TAG,"Ritter::ASS attachApplicationLocked()");
         boolean didSomething = false;
         final String processName = app.processName;
         for (int stackNdx = mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
@@ -519,9 +532,11 @@ public final class ActivityStackSupervisor {
     }
 
     ActivityRecord topRunningActivityLocked() {
+        Log.d(TAG,"Ritter::ASS BACK_KEY topRunningActivityLocked()");
         final ActivityStack focusedStack = getFocusedStack();
         ActivityRecord r = focusedStack.topRunningActivityLocked(null);
         if (r != null) {
+            Log.d(TAG,"Ritter::ASS BACK_KEY topRunningActivityLocked() return focusedStack");
             return r;
         }
 
@@ -530,6 +545,7 @@ public final class ActivityStackSupervisor {
             if (stack != focusedStack && isFrontStack(stack)) {
                 r = stack.topRunningActivityLocked(null);
                 if (r != null) {
+                    Log.d(TAG,"Ritter::ASS BACK_KEY topRunningActivityLocked() return !focusedStack");
                     return r;
                 }
             }
@@ -875,7 +891,8 @@ public final class ActivityStackSupervisor {
             throws RemoteException {
 
         r.startFreezingScreenLocked(app, 0);
-        if (false) Slog.d(TAG, "realStartActivity: setting app visibility true");
+        if (true) Slog.d(TAG, "realStartActivity: setting app visibility true");
+        Log.d(TAG,"Ritter:ASS realStartActivityLocked: setAppVisibility true");
         mWindowManager.setAppVisibility(r.appToken, true);
 
         // schedule launch ticks to collect information about slow apps.
@@ -1044,6 +1061,7 @@ public final class ActivityStackSupervisor {
 
     void startSpecificActivityLocked(ActivityRecord r,
             boolean andResume, boolean checkConfig) {
+        Log.d(TAG,"Ritter::ASS startSpecificActivityLocked() r.processName:"+r.processName);
         // Is this activity's application already running?
         ProcessRecord app = mService.getProcessRecordLocked(r.processName,
                 r.info.applicationInfo.uid, true);
@@ -1080,6 +1098,7 @@ public final class ActivityStackSupervisor {
             String resultWho, int requestCode,
             int callingPid, int callingUid, String callingPackage, int startFlags, Bundle options,
             boolean componentSpecified, ActivityRecord[] outActivity) {
+        Log.d(TAG,"Ritter::ASS startActivityLocked()");
         int err = ActivityManager.START_SUCCESS;
 
         ProcessRecord callerApp = null;
@@ -1260,7 +1279,8 @@ public final class ActivityStackSupervisor {
 
     ActivityStack adjustStackFocus(ActivityRecord r) {
         final TaskRecord task = r.task;
-        if (r.isApplicationActivity() || (task != null && task.isApplicationTask())) {
+        if (r.isApplicationActivity() || (task != null && task.isApplicationTask())
+                ||r.isRecentsActivity()) {
             if (task != null) {
                 final ActivityStack taskStack = task.stack;
                 if (mFocusedStack != taskStack) {
@@ -1302,10 +1322,13 @@ public final class ActivityStackSupervisor {
     }
 
     void setFocusedStack(ActivityRecord r) {
+        Log.d(TAG,"Ritter::ASS BACK_KEY setFocusedStack()");
+        Log.d(TAG,"Ritter::ASS setFocusedStack() mFocusedStack:"+getFocusedStack().getStackId());
         if (r == null) {
             return;
         }
-        if (!r.isApplicationActivity() || (r.task != null && !r.task.isApplicationTask())) {
+        if (!r.isApplicationActivity() || (r.task != null && !r.task.isApplicationTask())
+                &&!r.isRecentsActivity()) {
             if (mStackState != STACK_STATE_HOME_IN_FRONT) {
                 if (DEBUG_STACK || DEBUG_FOCUS) Slog.d(TAG, "setFocusedStack: mStackState old=" +
                         stackStateToString(mStackState) + " new=" +
@@ -1332,6 +1355,7 @@ public final class ActivityStackSupervisor {
     final int startActivityUncheckedLocked(ActivityRecord r,
             ActivityRecord sourceRecord, int startFlags, boolean doResume,
             Bundle options) {
+        Log.d(TAG,"Ritter:ASS startActivityUncheckedLocked() r.packageName:"+r.packageName);
         final Intent intent = r.intent;
         final int callingUid = r.launchedFromUid;
 
@@ -1454,6 +1478,11 @@ public final class ActivityStackSupervisor {
                     if (DEBUG_TASKS) Slog.d(TAG, "Bring to front target: " + targetStack
                             + " from " + intentActivity);
                     moveHomeStack(targetStack.isHomeStack());
+                    // Ritter_multi new
+                    // if(!r.packageName.equals("com.android.systemui")){
+                    // moveHomeStack(targetStack.isHomeStack());
+                    //                   }
+                    
                     if (intentActivity.task.intent == null) {
                         // This task was started because of movement of
                         // the activity based on affinity...  now that we
@@ -1682,6 +1711,10 @@ public final class ActivityStackSupervisor {
                 && (launchFlags&Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {
             targetStack = adjustStackFocus(r);
             moveHomeStack(targetStack.isHomeStack());
+            // Ritter_multi new
+            // if(!r.packageName.equals("com.android.systemui")){
+            // moveHomeStack(targetStack.isHomeStack());
+            //           }
             if (reuseTask == null) {
                 r.setTask(targetStack.createTaskRecord(getNextTaskId(),
                         newTaskInfo != null ? newTaskInfo : r.info,
@@ -1857,10 +1890,22 @@ public final class ActivityStackSupervisor {
             }
             ensureActivitiesVisibleLocked(null, 0);
         }
+        /**
+         * Ritter_multi After moveTaskToFront() triggered by touch finish, set
+         * mMoveTaskBackTaskInvisible=false to make the
+         * ensureActivitiesVisibleLocked() works normal.
+         */
+        mMoveTaskBackTaskInvisible = false;
 
         // Atomically retrieve all of the other things to do.
         stops = processStoppingActivitiesLocked(true);
+        if (stops != null) {
+            Log.d(TAG, "Ritter::ASS activityIdleInternalLocked: stops.size:" + stops.size());
+        } else {
+            Log.d(TAG, "Ritter::ASS activityIdleInternalLocked: stops==null");
+        }
         NS = stops != null ? stops.size() : 0;
+        Log.d(TAG,"Ritter::ASS activityIdleInternalLocked: NS:"+NS);
         if ((NF=mFinishingActivities.size()) > 0) {
             finishes = new ArrayList<ActivityRecord>(mFinishingActivities);
             mFinishingActivities.clear();
@@ -1909,12 +1954,19 @@ public final class ActivityStackSupervisor {
 
         // Stop any activities that are scheduled to do so but have been
         // waiting for the next one to start.
+        Log.d(TAG, "Ritter::ASS activityIdleInternalLocked: NS:" + NS);
+        Log.d(TAG,
+                "Ritter::ASS activityIdleInternalLocked: Stop any activities that are scheduled to do so but have been");
+        Log.d(TAG, "Ritter::ASS activityIdleInternalLocked: waiting for the next one to start");
         for (int i = 0; i < NS; i++) {
             r = stops.get(i);
             final ActivityStack stack = r.task.stack;
             if (r.finishing) {
+                Log.d(TAG,"Ritter::ASS stack.finishCurrentActivityLocked NS:"+NS);
                 stack.finishCurrentActivityLocked(r, ActivityStack.FINISH_IMMEDIATELY, false);
             } else {
+                Log.d(TAG,"Ritter::ASS stack.stopActivityLocked NS:"+NS);
+                //Ritter_Multi no modify
                 stack.stopActivityLocked(r);
             }
         }
@@ -2016,21 +2068,28 @@ public final class ActivityStackSupervisor {
     }
 
     boolean resumeTopActivitiesLocked() {
+        Log.d(TAG,"Ritter::ASS resumeTopActivitiesLocked()");
         return resumeTopActivitiesLocked(null, null, null);
     }
 
     boolean resumeTopActivitiesLocked(ActivityStack targetStack, ActivityRecord target,
             Bundle targetOptions) {
+        Log.d(TAG,"Ritter::ASS resumeTopActivitiesLocked()2");
         if (targetStack == null) {
+            Log.d(TAG,"Ritter::ASS resumeTopActivitiesLocked()2 targetStack == null");
             targetStack = getFocusedStack();
         }
+        Log.d(TAG,"Ritter::ASS resumeTopActivitiesLocked()2 targetStack.getStackId:"+targetStack.getStackId());
         boolean result = false;
         for (int stackNdx = mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
             final ActivityStack stack = mStacks.get(stackNdx);
             if (isFrontStack(stack)) {
+                Log.d(TAG,"Ritter::ASS resumeTopActivitiesLocked()2 isFrontStack(stack)");
                 if (stack == targetStack) {
+                    Log.d(TAG,"Ritter::ASS resumeTopActivitiesLocked()2 stack == targetStack stack.id:"+stack.getStackId());
                     result = stack.resumeTopActivityLocked(target, targetOptions);
                 } else {
+                    Log.d(TAG,"Ritter::ASS resumeTopActivitiesLocked()2 stack != targetStack stack.id:"+stack.getStackId());
                     stack.resumeTopActivityLocked(null);
                 }
             }
@@ -2047,6 +2106,7 @@ public final class ActivityStackSupervisor {
     }
 
     void findTaskToMoveToFrontLocked(int taskId, int flags, Bundle options) {
+        Log.d(TAG, "Ritter::ASS findTaskToMoveToFrontLocked flags:"+flags);
         for (int stackNdx = mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
             if (mStacks.get(stackNdx).findTaskToMoveToFrontLocked(taskId, flags, options)) {
                 if (DEBUG_STACK) Slog.d(TAG, "findTaskToMoveToFront: moved to front of stack=" +
@@ -2084,6 +2144,7 @@ public final class ActivityStackSupervisor {
     }
 
     void moveTaskToStack(int taskId, int stackId, boolean toTop) {
+        Log.d(TAG,"Ritter::ASS moveTaskToStack()");
         final TaskRecord task = anyTaskForIdLocked(taskId);
         if (task == null) {
             return;
@@ -2176,6 +2237,7 @@ public final class ActivityStackSupervisor {
     }
 
     void comeOutOfSleepIfNeededLocked() {
+        Log.d(TAG,"Ritter::ASS comeOutOfSleepIfNeededLocked()");
         removeSleepTimeouts();
         if (mGoingToSleep.isHeld()) {
             mGoingToSleep.release();
@@ -2242,6 +2304,7 @@ public final class ActivityStackSupervisor {
     }
 
     boolean reportResumedActivityLocked(ActivityRecord r) {
+        Log.d(TAG,"Ritter::ASS reportResumedActivityLocked()");
         final ActivityStack stack = r.task.stack;
         if (isFrontStack(stack)) {
             mService.updateUsageStats(r, true);
@@ -2263,14 +2326,32 @@ public final class ActivityStackSupervisor {
     }
 
     void ensureActivitiesVisibleLocked(ActivityRecord starting, int configChanges) {
+        Log.d(TAG,"Ritter::ASS ensureActivitiesVisibleLocked()");
+        
+        //Ritter_multi
+        //if(starting.packageName.equals("com.android.systemui")){
+        //Log.d(TAG,"Ritter::ASS ensureActivitiesVisibleLocked() starting.packageName.equals(com.android.systemui) return");
+        //    return;
+        //}
+        if (starting != null && starting.packageName != null) {
+            Log.d(TAG, "Ritter::ASS ensureActivitiesVisibleLocked() starting pkgName:"
+                    + starting.packageName);
+        } else {
+            Log.d(TAG,
+                    "Ritter::ASS ensureActivitiesVisibleLocked() starting != null && starting.packageName!=null");
+        }
         // First the front stacks. In case any are not fullscreen and are in front of home.
         boolean showHomeBehindStack = false;
         for (int stackNdx = mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
+            Log.d(TAG,"Ritter::ASS ensureActivitiesVisibleLocked:stackNdx:"+stackNdx+",---------");
             final ActivityStack stack = mStacks.get(stackNdx);
             if (isFrontStack(stack)) {
+                Log.d(TAG,"Ritter::ASS ensureActivitiesVisibleLocked: isFrontStack(stack)==true");
                 showHomeBehindStack =
                         stack.ensureActivitiesVisibleLocked(starting, configChanges);
+                Log.d(TAG,"Ritter::ASS ensureActivitiesVisibleLocked: isFrontStack:showHomeBehindStack:"+showHomeBehindStack);
             }
+            Log.d(TAG,"Ritter::ASS ensureActivitiesVisibleLocked: showHomeBehindStack:"+showHomeBehindStack);
         }
         // Now do back stacks.
         for (int stackNdx = mStacks.size() - 1; stackNdx >= 0; --stackNdx) {
@@ -2310,6 +2391,7 @@ public final class ActivityStackSupervisor {
     }
 
     final ArrayList<ActivityRecord> processStoppingActivitiesLocked(boolean remove) {
+        Log.d(TAG,"Ritter::ASS processStoppingActivitiesLocked()");
         int N = mStoppingActivities.size();
         if (N <= 0) return null;
 
@@ -2331,6 +2413,7 @@ public final class ActivityStackSupervisor {
                     // normal flow and hide it once we determine that it is
                     // hidden by the activities in front of it.
                     if (localLOGV) Slog.v(TAG, "Before stopping, can hide: " + s);
+                    Log.d(TAG,"Ritter::ASS processStoppingActivitiesLocked: setAppVisibility false 1");
                     mWindowManager.setAppVisibility(s.appToken, false);
                 }
             }
@@ -2578,6 +2661,7 @@ public final class ActivityStackSupervisor {
     }
 
     final void scheduleResumeTopActivities() {
+        Log.d(TAG,"Ritter:ASS scheduleResumeTopActivities()");
         mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
     }
 
diff --git a/frameworks/base/services/java/com/android/server/am/CompatModePackages.java b/frameworks/base/services/java/com/android/server/am/CompatModePackages.java
index 4d5577b..e8aab1a 100644
--- a/frameworks/base/services/java/com/android/server/am/CompatModePackages.java
+++ b/frameworks/base/services/java/com/android/server/am/CompatModePackages.java
@@ -11,8 +11,6 @@ import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlSerializer;
 
-import com.android.internal.util.FastXmlSerializer;
-
 import android.app.ActivityManager;
 import android.app.AppGlobals;
 import android.content.pm.ApplicationInfo;
@@ -22,9 +20,12 @@ import android.os.Handler;
 import android.os.Message;
 import android.os.RemoteException;
 import android.util.AtomicFile;
+import android.util.Log;
 import android.util.Slog;
 import android.util.Xml;
 
+import com.android.internal.util.FastXmlSerializer;
+
 public final class CompatModePackages {
     private final String TAG = ActivityManagerService.TAG;
     private final boolean DEBUG_CONFIGURATION = ActivityManagerService.DEBUG_CONFIGURATION;
@@ -246,6 +247,7 @@ public final class CompatModePackages {
     }
 
     private void setPackageScreenCompatModeLocked(ApplicationInfo ai, int mode) {
+        Log.d(TAG,"Ritter::CMP setPackageScreenCompatModeLocked()");
         final String packageName = ai.packageName;
 
         int curFlags = getPackageFlags(packageName);
diff --git a/frameworks/base/services/java/com/android/server/am/TaskRecord.java b/frameworks/base/services/java/com/android/server/am/TaskRecord.java
index 3d568ff..7de5e2e 100644
--- a/frameworks/base/services/java/com/android/server/am/TaskRecord.java
+++ b/frameworks/base/services/java/com/android/server/am/TaskRecord.java
@@ -19,6 +19,9 @@ package com.android.server.am;
 import static com.android.server.am.ActivityManagerService.TAG;
 import static com.android.server.am.ActivityStackSupervisor.DEBUG_ADD_REMOVE;
 
+import java.io.PrintWriter;
+import java.util.ArrayList;
+
 import android.app.Activity;
 import android.app.ActivityManager;
 import android.app.ActivityOptions;
@@ -28,11 +31,9 @@ import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.graphics.Bitmap;
 import android.os.UserHandle;
+import android.util.Log;
 import android.util.Slog;
 
-import java.io.PrintWriter;
-import java.util.ArrayList;
-
 final class TaskRecord extends ThumbnailHolder {
     final int taskId;       // Unique identifier for this task.
     final String affinity;  // The affinity name for this task, or null.
@@ -150,6 +151,7 @@ final class TaskRecord extends ThumbnailHolder {
     }
 
     ActivityRecord topRunningActivityLocked(ActivityRecord notTop) {
+        Log.d(TAG,"Ritter::TR  BACK_KEY topRunningActivityLocked()");
         for (int activityNdx = mActivities.size() - 1; activityNdx >= 0; --activityNdx) {
             ActivityRecord r = mActivities.get(activityNdx);
             if (!r.finishing && r != notTop && stack.okToShow(r)) {
diff --git a/frameworks/base/services/java/com/android/server/wm/InputMonitor.java b/frameworks/base/services/java/com/android/server/wm/InputMonitor.java
index 3d2ec45..13bd888 100644
--- a/frameworks/base/services/java/com/android/server/wm/InputMonitor.java
+++ b/frameworks/base/services/java/com/android/server/wm/InputMonitor.java
@@ -33,6 +33,7 @@ import android.view.WindowManager;
 import java.util.Arrays;
 
 final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
+    static final String TAG = "InputMonitor";
     private final WindowManagerService mService;
     
     // Current window with input focus for keys and other non-touch events.  May be null.
@@ -168,15 +169,20 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
     private void addInputWindowHandleLw(final InputWindowHandle inputWindowHandle,
             final WindowState child, int flags, int privateFlags, final int type,
             final boolean isVisible, final boolean hasFocus, final boolean hasWallpaper) {
+        Log.d(TAG,"Ritter::addInputWindowHandleLw() inputWindowHandle.name:"+child.toString());
         // Add a window to our list of input windows.
         inputWindowHandle.name = child.toString();
         final boolean modal = (flags & (WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                 | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE)) == 0;
         if (modal && child.mAppToken != null) {
+            Log.d(TAG,"Ritter::addInputWindowHandleLw() aaa");
             // Limit the outer touch to the activity stack region.
             flags |= WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
-            inputWindowHandle.touchableRegion.set(child.getStackBounds());
+            // Ritter_Multi
+            //inputWindowHandle.touchableRegion.set(child.getStackBounds());
+            inputWindowHandle.touchableRegion.set(child.mFrame);
         } else {
+            Log.d(TAG,"Ritter::addInputWindowHandleLw() bbb");
             // Not modal or full screen modal
             child.getTouchableRegion(inputWindowHandle.touchableRegion);
         }
@@ -199,7 +205,8 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
         inputWindowHandle.frameTop = frame.top;
         inputWindowHandle.frameRight = frame.right;
         inputWindowHandle.frameBottom = frame.bottom;
-
+        Log.d(TAG,"Ritter::addInputWindowHandleLw() inputWindowHandle.l:"+frame.left
+                               +",r:"+frame.right+",t:"+frame.top+",b:"+frame.bottom);
         if (child.mGlobalScale != 1) {
             // If we are scaling the window, input coordinates need
             // to be inversely scaled to map from what is on screen
@@ -225,6 +232,7 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
 
     /* Updates the cached window information provided to the input dispatcher. */
     public void updateInputWindowsLw(boolean force) {
+        Log.d(TAG,"Ritter::updateInputWindowsLw()");
         if (!force && !mUpdateInputWindowsNeeded) {
             return;
         }
@@ -263,17 +271,20 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
 
         // Add all windows on the default display.
         final int numDisplays = mService.mDisplayContents.size();
+        Log.d(TAG,"Ritter::updateInputWindowsLw() Add all windows on the default display. numDisplays:"+numDisplays);
         for (int displayNdx = 0; displayNdx < numDisplays; ++displayNdx) {
             WindowList windows = mService.mDisplayContents.valueAt(displayNdx).getWindowList();
+            Log.d(TAG,"Ritter::updateInputWindowsLw() windows:"+windows.size());
             for (int winNdx = windows.size() - 1; winNdx >= 0; --winNdx) {
                 final WindowState child = windows.get(winNdx);
                 final InputChannel inputChannel = child.mInputChannel;
                 final InputWindowHandle inputWindowHandle = child.mInputWindowHandle;
                 if (inputChannel == null || inputWindowHandle == null || child.mRemoved) {
                     // Skip this window because it cannot possibly receive input.
+                    Log.d(TAG,"Ritter::updateInputWindowsLw() Skip this window because it cannot possibly receive input :"+child.toString());
                     continue;
                 }
-
+                Log.d(TAG,"Ritter::updateInputWindowsLw() windows.name:"+child.toString());
                 final int flags = child.mAttrs.flags;
                 final int privateFlags = child.mAttrs.privateFlags;
                 final int type = child.mAttrs.type;
@@ -294,6 +305,7 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
                         && child.mBaseLayer < aboveUniverseLayer && onDefaultDisplay) {
                     final WindowState u = universeBackground.mWin;
                     if (u.mInputChannel != null && u.mInputWindowHandle != null) {
+                        Log.d(TAG,"Ritter::updateInputWindowsLw() AAA");
                         addInputWindowHandleLw(u.mInputWindowHandle, u, u.mAttrs.flags,
                                 u.mAttrs.privateFlags, u.mAttrs.type,
                                 true, u == mInputFocus, false);
@@ -302,6 +314,7 @@ final class InputMonitor implements InputManagerService.WindowManagerCallbacks {
                 }
 
                 if (child.mWinAnimator != universeBackground) {
+                    Log.d(TAG,"Ritter::updateInputWindowsLw() BBB");
                     addInputWindowHandleLw(inputWindowHandle, child, flags, privateFlags, type,
                             isVisible, hasFocus, hasWallpaper);
                 }
diff --git a/frameworks/base/services/java/com/android/server/wm/Session.java b/frameworks/base/services/java/com/android/server/wm/Session.java
index 87cabc9..64e198f 100644
--- a/frameworks/base/services/java/com/android/server/wm/Session.java
+++ b/frameworks/base/services/java/com/android/server/wm/Session.java
@@ -16,11 +16,7 @@
 
 package com.android.server.wm;
 
-import android.view.IWindowId;
-import com.android.internal.view.IInputContext;
-import com.android.internal.view.IInputMethodClient;
-import com.android.internal.view.IInputMethodManager;
-import com.android.server.wm.WindowManagerService.H;
+import java.io.PrintWriter;
 
 import android.content.ClipData;
 import android.content.Context;
@@ -35,9 +31,11 @@ import android.os.Process;
 import android.os.RemoteException;
 import android.os.ServiceManager;
 import android.os.UserHandle;
+import android.util.Log;
 import android.util.Slog;
 import android.view.Display;
 import android.view.IWindow;
+import android.view.IWindowId;
 import android.view.IWindowSession;
 import android.view.InputChannel;
 import android.view.Surface;
@@ -45,7 +43,10 @@ import android.view.SurfaceControl;
 import android.view.SurfaceSession;
 import android.view.WindowManager;
 
-import java.io.PrintWriter;
+import com.android.internal.view.IInputContext;
+import com.android.internal.view.IInputMethodClient;
+import com.android.internal.view.IInputMethodManager;
+import com.android.server.wm.WindowManagerService.H;
 
 /**
  * This class represents an active client session.  There is generally one
@@ -187,6 +188,12 @@ final class Session extends IWindowSession.Stub
             Rect outVisibleInsets, Configuration outConfig, Surface outSurface) {
         if (false) Slog.d(WindowManagerService.TAG, ">>>>>> ENTERED relayout from "
                 + Binder.getCallingPid());
+        if(attrs!=null)Log.d("Session","Ritter::Session relayout() attrs x:"+attrs.x
+                                +",y:"+attrs.y
+                                +",width:"+attrs.width
+                                +",height:"+attrs.height
+                                +",pkgName:"+attrs.packageName
+                                +",isInWindowing:"+attrs.isInWindowing);
         int res = mService.relayoutWindow(this, window, seq, attrs,
                 requestedWidth, requestedHeight, viewFlags, flags,
                 outFrame, outOverscanInsets, outContentInsets, outVisibleInsets,
@@ -500,4 +507,25 @@ final class Session extends IWindowSession.Stub
     public String toString() {
         return mStringName;
     }
+    
+    
+    // Ritter_Multi
+    @Override
+    public void moveHomeToTop_WS() {
+        mService.moveHomeToTop();
+    }
+
+    // Ritter_Multi
+    @Override
+    public void moveTaskToTop_WS(int taskID) {
+        mService.callAMSMoveTaskToTop(taskID);
+    }
+
+    // Ritter_multi new
+    @Override
+    public boolean getMyWindowStateAttrs(IWindow window, Rect outRect) {
+        boolean res = mService.getMyWindowStateAttrs(this, window, outRect);
+        return res;
+    }
+    
 }
\ No newline at end of file
diff --git a/frameworks/base/services/java/com/android/server/wm/WindowManagerService.java b/frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
index b6c6770..b2b47ed 100644
--- a/frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
+++ b/frameworks/base/services/java/com/android/server/wm/WindowManagerService.java
@@ -16,41 +16,64 @@
 
 package com.android.server.wm;
 
-import static android.view.WindowManager.LayoutParams.*;
-
-import static com.android.server.am.ActivityStackSupervisor.HOME_STACK_ID;
-
+import static android.view.WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW;
+import static android.view.WindowManager.LayoutParams.FIRST_SUB_WINDOW;
+import static android.view.WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
+import static android.view.WindowManager.LayoutParams.FLAG_DIM_BEHIND;
+import static android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;
+import static android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
+import static android.view.WindowManager.LayoutParams.FLAG_SECURE;
+import static android.view.WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
+import static android.view.WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
+import static android.view.WindowManager.LayoutParams.LAST_SUB_WINDOW;
+import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_COMPATIBLE_WINDOW;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION;
+import static android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING;
+import static android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION;
+import static android.view.WindowManager.LayoutParams.TYPE_BOOT_PROGRESS;
+import static android.view.WindowManager.LayoutParams.TYPE_DREAM;
+import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD;
+import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_KEYGUARD;
+import static android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM;
+import static android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION;
+import static android.view.WindowManager.LayoutParams.TYPE_RECENTS_OVERLAY;
+import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG;
+import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
+import static android.view.WindowManager.LayoutParams.TYPE_UNIVERSE_BACKGROUND;
+import static android.view.WindowManager.LayoutParams.TYPE_WALLPAPER;
 import static android.view.WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
+import static com.android.server.am.ActivityStackSupervisor.HOME_STACK_ID;
 
-import android.app.AppOpsManager;
-import android.util.TimeUtils;
-import android.view.IWindowId;
-
-import com.android.internal.app.IBatteryStats;
-import com.android.internal.policy.PolicyManager;
-import com.android.internal.policy.impl.PhoneWindowManager;
-import com.android.internal.util.FastPrintWriter;
-import com.android.internal.view.IInputContext;
-import com.android.internal.view.IInputMethodClient;
-import com.android.internal.view.IInputMethodManager;
-import com.android.internal.view.WindowManagerPolicyThread;
-import com.android.server.AttributeCache;
-import com.android.server.EventLogTags;
-import com.android.server.UiThread;
-import com.android.server.Watchdog;
-import com.android.server.am.BatteryStatsService;
-import com.android.server.display.DisplayManagerService;
-import com.android.server.input.InputManagerService;
-import com.android.server.power.PowerManagerService;
-import com.android.server.power.ShutdownThread;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileDescriptor;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.net.Socket;
+import java.text.DateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
 
 import android.Manifest;
+import android.animation.ValueAnimator;
+import android.app.ActivityManager;
 import android.app.ActivityManager.StackBoxInfo;
 import android.app.ActivityManagerNative;
+import android.app.AppOpsManager;
 import android.app.IActivityManager;
 import android.app.StatusBarManager;
+import android.app.WindowAppsManager;
 import android.app.admin.DevicePolicyManager;
-import android.animation.ValueAnimator;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -93,10 +116,11 @@ import android.util.DisplayMetrics;
 import android.util.EventLog;
 import android.util.FloatMath;
 import android.util.Log;
-import android.util.SparseArray;
 import android.util.Pair;
 import android.util.Slog;
+import android.util.SparseArray;
 import android.util.SparseIntArray;
+import android.util.TimeUtils;
 import android.util.TypedValue;
 import android.view.Choreographer;
 import android.view.Display;
@@ -108,6 +132,7 @@ import android.view.IMagnificationCallbacks;
 import android.view.IOnKeyguardExitResult;
 import android.view.IRotationWatcher;
 import android.view.IWindow;
+import android.view.IWindowId;
 import android.view.IWindowManager;
 import android.view.IWindowSession;
 import android.view.InputChannel;
@@ -117,53 +142,51 @@ import android.view.InputEventReceiver;
 import android.view.KeyEvent;
 import android.view.MagnificationSpec;
 import android.view.MotionEvent;
-import android.view.Surface.OutOfResourcesException;
 import android.view.Surface;
+import android.view.Surface.OutOfResourcesException;
 import android.view.SurfaceControl;
 import android.view.SurfaceSession;
 import android.view.View;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
+import android.view.WindowManager.LayoutParams;
 import android.view.WindowManagerGlobal;
 import android.view.WindowManagerPolicy;
-import android.view.WindowManager.LayoutParams;
 import android.view.WindowManagerPolicy.FakeWindow;
 import android.view.WindowManagerPolicy.PointerEventListener;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 import android.view.animation.Transformation;
 
-import java.io.BufferedWriter;
-import java.io.DataInputStream;
-import java.io.File;
-import java.io.FileDescriptor;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.net.Socket;
-import java.text.DateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
+import com.android.internal.app.IBatteryStats;
+import com.android.internal.policy.PolicyManager;
+import com.android.internal.policy.impl.PhoneWindowManager;
+import com.android.internal.util.FastPrintWriter;
+import com.android.internal.view.IInputContext;
+import com.android.internal.view.IInputMethodClient;
+import com.android.internal.view.IInputMethodManager;
+import com.android.internal.view.WindowManagerPolicyThread;
+import com.android.server.AttributeCache;
+import com.android.server.EventLogTags;
+import com.android.server.UiThread;
+import com.android.server.Watchdog;
+import com.android.server.am.BatteryStatsService;
+import com.android.server.display.DisplayManagerService;
+import com.android.server.input.InputManagerService;
+import com.android.server.power.PowerManagerService;
+import com.android.server.power.ShutdownThread;
 
 /** {@hide} */
 public class WindowManagerService extends IWindowManager.Stub
         implements Watchdog.Monitor, WindowManagerPolicy.WindowManagerFuncs,
                 DisplayManagerService.WindowManagerFuncs, DisplayManager.DisplayListener {
     static final String TAG = "WindowManager";
-    static final boolean DEBUG = false;
+    static final boolean DEBUG = true;
     static final boolean DEBUG_ADD_REMOVE = false;
     static final boolean DEBUG_FOCUS = false;
     static final boolean DEBUG_FOCUS_LIGHT = DEBUG_FOCUS || false;
     static final boolean DEBUG_ANIM = false;
-    static final boolean DEBUG_LAYOUT = false;
+    static final boolean DEBUG_LAYOUT = true;
     static final boolean DEBUG_RESIZE = false;
     static final boolean DEBUG_LAYERS = false;
     static final boolean DEBUG_INPUT = false;
@@ -726,6 +749,7 @@ public class WindowManagerService extends IWindowManager.Stub
     private WindowManagerService(Context context, PowerManagerService pm,
             DisplayManagerService displayManager, InputManagerService inputManager,
             boolean haveInputMethods, boolean showBootMsgs, boolean onlyCore) {
+        Log.d(TAG,"Ritter::WMS WindowManagerService()");
         mContext = context;
         mHaveInputMethods = haveInputMethods;
         mAllowBootMessages = showBootMsgs;
@@ -745,6 +769,7 @@ public class WindowManagerService extends IWindowManager.Stub
         mDisplayManager.registerDisplayListener(this, null);
         Display[] displays = mDisplayManager.getDisplays();
         for (Display display : displays) {
+            Log.d(TAG,"Ritter::WMS WindowManagerService after call createWatermarkInTransaction()");
             createDisplayContentLocked(display);
         }
 
@@ -2105,6 +2130,7 @@ public class WindowManagerService extends IWindowManager.Stub
     public int addWindow(Session session, IWindow client, int seq,
             WindowManager.LayoutParams attrs, int viewVisibility, int displayId,
             Rect outContentInsets, InputChannel outInputChannel) {
+        Log.d(TAG,"Ritter::WMS addWindow()");
         int[] appOp = new int[1];
         int res = mPolicy.checkAddPermission(attrs, appOp);
         if (res != WindowManagerGlobal.ADD_OKAY) {
@@ -2223,6 +2249,218 @@ public class WindowManagerService extends IWindowManager.Stub
 
             win = new WindowState(this, session, client, token,
                     attachedWindow, appOp[0], seq, attrs, viewVisibility, displayContent);
+            
+            /**
+             * Author: Ritter_Multi Date: 12/01/2011 Sets the WindowPanel rect
+             * for apptokens.
+             */
+            if (token.appWindowToken != null) {
+                if (attrs != null) {
+                    Log.d(TAG, "Ritter::WMS addWindow() attrs.getTitle():" + attrs.getTitle()
+                            + ",attrs.packageName:" + attrs.packageName);
+
+                    List<String> rootList = Arrays.asList(WindowManagerGlobal.getInstance()
+                            .getViewRootNames());
+                    ArrayList<WindowManager.LayoutParams> paramsList = WindowManagerGlobal
+                            .getInstance().getWindowManagerLayoutParams();
+                    Log.d(TAG, "Ritter::WMS addWindow() paramsList.size:" + paramsList.size());
+                    Log.d(TAG, "Ritter::WMS addWindow() rootList.size:" + rootList.size());
+                    Log.d(TAG, "Ritter::WMS addWindow() rootList:" + rootList);
+                    Log.d(TAG, "Ritter::WMS addWindow() win.mChildWindows.size():"
+                            + win.mChildWindows.size());
+                    if (win.mAttachedWindow != null) {
+                        Log.d(TAG,
+                                "Ritter::WMS addWindow() win.mAttachedWindow.mChildWindows.size():"
+                                        + win.mAttachedWindow.mChildWindows.size());
+                        Log.d(TAG,
+                                "Ritter::WMS addWindow() win.mAttachedWindow.mAttrs.packageName:"
+                                        + win.mAttachedWindow.mAttrs.packageName);
+                    } else {
+                        Log.d(TAG, "Ritter::WMS addWindow() win.mAttachedWindow == null");
+                    }
+                    if (win.mAppToken != null) {
+                        if (win.mAppToken.startingWindow != null) {
+                            if (win.mAppToken.startingWindow.mAttrs != null) {
+                                Log.d(TAG,
+                                        "Ritter::WMS addWindow() win.mAppToken.startingWindow.mAttrs.packageName != null"
+                                                + win.mAppToken.startingWindow.mAttrs.packageName);
+                            } else {
+                                Log.d(TAG,
+                                        "Ritter::WMS addWindow() win.mAppToken.startingWindow.mAttrs == null");
+                            }
+                        } else {
+                            Log.d(TAG,
+                                    "Ritter::WMS addWindow() win.mAppToken.startingWindow == null");
+                        }
+                    } else {
+                        Log.d(TAG, "Ritter::WMS addWindow() win.mAppToken == null");
+                    }
+
+                    if (win.mAppToken != null) {
+                        if (win.mAppToken.allAppWindows != null) {
+                            Log.d(TAG, "Ritter::WMS addWindow() win.mAppToken.allAppWindows.size()"
+                                    + win.mAppToken.allAppWindows.size());
+                        } else {
+                            Log.d(TAG,
+                                    "Ritter::WMS addWindow() win.mAppToken.allAppWindows == null");
+                        }
+                    } else {
+                        Log.d(TAG, "Ritter::WMS addWindow() win.mAppToken == null");
+                    }
+
+                    if (win.mRootToken != null) {
+                        if (win.mRootToken.windows != null) {
+                            Log.d(TAG, "Ritter::WMS addWindow() win.mRootToken.windows.size()"
+                                    + win.mRootToken.windows.size());
+                        } else {
+                            Log.d(TAG, "Ritter::WMS addWindow() win.mRootToken.windows == null");
+                        }
+                    } else {
+                        Log.d(TAG, "Ritter::WMS addWindow() win.mRootToken == null");
+                    }
+
+                    AppWindowToken target = win.mAppToken;
+                    final int taskId = target.groupId;
+                    Task targetTask = mTaskIdToTask.get(taskId);
+                    if (targetTask == null) {
+                        Log.d(TAG, "findAppWindowInsertionPointLocked: no Task for " + target
+                                + " taskId=" + taskId);
+                        return 0;
+                    }
+                    DisplayContent displayContent2 = targetTask.getDisplayContent();
+                    if (displayContent2 == null) {
+                        Slog.w(TAG, "findAppWindowInsertionPointLocked: no DisplayContent for "
+                                + target);
+                        return 0;
+                    }
+                    final WindowList windows = displayContent2.getWindowList();
+                    Log.d(TAG, "Ritter::WMS addWindow() task windows.size():" + windows.size());
+                    for (int i = 0; i < windows.size(); i++) {
+                        WindowState ws = windows.get(i);
+                        Log.d(TAG, "Ritter::WMS addWindow() WindowState ws:"
+                                + ws.mAttrs.packageName + ",x:" + ws.mAttrs.x + ",y:" + ws.mAttrs.y
+                                + ",w:" + ws.mAttrs.width + ",h:" + ws.mAttrs.height);
+                    }
+
+                    boolean isFirstAppWindowTokenInTask = true;
+                    WindowState firstWindowState = null;
+                    AppTokenList taskAppTokens = targetTask.mAppTokens;
+                    Log.d(TAG,
+                            "Ritter::WMS addWindow() task taskAppTokens.size():"
+                                    + taskAppTokens.size());
+                    for (int i = 0; i < taskAppTokens.size(); i++) {
+                        AppWindowToken appWindowToken = taskAppTokens.get(i);
+                        Log.d(TAG, "Ritter::WMS addWindow() task appWindowToken.windows.size():"
+                                + appWindowToken.windows.size());
+                        if (appWindowToken.windows.size() > 0) {
+                            firstWindowState = appWindowToken.windows.get(0);
+                            if (firstWindowState != null) {
+                                if (taskAppTokens.size() > 1) {
+                                    isFirstAppWindowTokenInTask = false;
+                                }
+                                Log.d(TAG,
+                                        "Ritter::WMS addWindow() appWindowToken firstWindowState != null ws:"
+                                                + firstWindowState.mAttrs.packageName + ",x:"
+                                                + firstWindowState.mAttrs.x + ",y:"
+                                                + firstWindowState.mAttrs.y + ",w:"
+                                                + firstWindowState.mAttrs.width + ",h:"
+                                                + firstWindowState.mAttrs.height);
+                            } else {
+                                Log.d(TAG,
+                                        "Ritter::WMS addWindow() appWindowToken startingWindow == null");
+                            }
+                        }
+                    }
+
+                    // ActivityRecord activityRecord =
+                    // ActivityRecord.forToken(win.mToken.token);
+                    /*
+                     * Log.d(TAG,
+                     * "Ritter::WMS addWindow() activityRecord.taskAffinity:"
+                     * +activityRecord.taskAffinity); Log.d(TAG,
+                     * "Ritter::WMS addWindow() activityRecord.task.mActivities.size():"
+                     * + activityRecord.task.mActivities.size());
+                     */
+                    // if (activityRecord.task.mActivities.size()==1 ) {
+
+                    // Get window apps from service
+                    String APPs = "";
+                    WindowAppsManager mWindowAppsManager = (WindowAppsManager) mContext
+                            .getSystemService("window_apps");
+                    try {
+                        APPs = mWindowAppsManager.getWindowApps();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                    ArrayList<String> pkgList = new ArrayList<String>(
+                            Arrays.asList(APPs.split("#")));
+
+                    if (attrs.packageName != null && !attrs.packageName.isEmpty()
+                            && pkgList.contains(attrs.packageName)) {
+                        // (attrs.packageName
+                        // .equals("com.example.activity")|| attrs.packageName
+                        // .equals("com.example.hello"))) {
+                        win.mAttrs.isInWindowing = true;
+                        win.mAttrs.isFullscreen = false;
+                        if (isFirstAppWindowTokenInTask) {
+                            Log.d(TAG,
+                                    "Ritter::WMS addWindow() win.mFrame.set(new Rect(300,300,600,1000)); win.mAttrs.isInWindowing:"
+                                            + win.mAttrs.isInWindowing);
+                            win.mFrame.set(new Rect(270, 480, 810, 1440));
+                            /*
+                             * ViewRootImpl root =
+                             * WindowManagerGlobal.getInstance
+                             * ().getRootView(rootList
+                             * .get(rootList.size()-1)).getViewRootImpl();
+                             * WindowManager.LayoutParams windowAttributes =
+                             * root.getLayoutParams(); Log.d(TAG,
+                             * "Ritter::WMS addWindow() win.mFrame.set(new Rect(300,300,600,1000)) B windowAttributes.x:("
+                             * +windowAttributes.x+"," +windowAttributes.y+","
+                             * +windowAttributes.width+","
+                             * +windowAttributes.height
+                             * +")); windowAttributes.packageName:"
+                             * +windowAttributes.packageName);
+                             */
+                            win.mAttrs.x = 270;
+                            win.mAttrs.y = 480;
+                            win.mAttrs.width = 810 - 270;
+                            win.mAttrs.height = 1440 - 480;
+                            win.mAttrs.setWindowingParam();
+                            // windowAttributes.copyFrom(win.mAttrs);
+                            /*
+                             * Log.d(TAG,
+                             * "Ritter::WMS addWindow() win.mFrame.set(new Rect(300,300,600,1000)) A windowAttributes.x:("
+                             * +windowAttributes.x+"," +windowAttributes.y+","
+                             * +windowAttributes.width+","
+                             * +windowAttributes.height
+                             * +")); windowAttributes.packageName:"
+                             * +windowAttributes.packageName);
+                             */
+                        } else {
+                            Log.d(TAG, "Ritter::WMS addWindow() win.mFrame.set(new Rect("
+                                    + firstWindowState.mAttrs.x + "," + firstWindowState.mAttrs.y
+                                    + ","
+                                    + (firstWindowState.mAttrs.x + firstWindowState.mAttrs.width)
+                                    + ","
+                                    + (firstWindowState.mAttrs.y + firstWindowState.mAttrs.height)
+                                    + ")); win.mAttrs.isInWindowing:" + win.mAttrs.isInWindowing);
+                            win.mFrame.set(new Rect(firstWindowState.mAttrs.x,
+                                    firstWindowState.mAttrs.y, firstWindowState.mAttrs.x
+                                            + firstWindowState.mAttrs.width,
+                                    firstWindowState.mAttrs.y + firstWindowState.mAttrs.height));
+                            win.mAttrs.copyFrom(firstWindowState.mAttrs);
+                            win.mAttrs.setWindowingParam();
+                        }
+                    } else {
+                        Log.d(TAG,
+                                "Ritter::WMS addWindow() normal win.mFrame.set(new Rect(0,50,1200,1824));");
+                        win.mFrame.set(new Rect(0, 50,
+                                displayContent.getDisplayInfo().logicalWidth, displayContent
+                                        .getDisplayInfo().logicalHeight - 96));
+                    }
+                }
+            }
+            // end
             if (win.mDeathRecipient == null) {
                 // Client has apparently died, so there is no reason to
                 // continue.
@@ -2259,7 +2497,11 @@ public class WindowManagerService extends IWindowManager.Stub
                 mTokenMap.put(attrs.token, token);
             }
             win.attach();
+            Log.d(TAG,"Ritter::"+mWindowMap.size());
+            Log.d(TAG, "Ritter::WMS addWindow() before put mWindowMap.size():"+ mWindowMap.size()+",client.asBinder():"+client.asBinder().toString());
+            
             mWindowMap.put(client.asBinder(), win);
+            Log.d(TAG, "Ritter::WMS addWindow() after put mWindowMap.size():"+ mWindowMap.size()+",client.asBinder():"+client.asBinder().toString());
             if (win.mAppOp != AppOpsManager.OP_NONE) {
                 if (mAppOps.startOpNoThrow(win.mAppOp, win.getOwningUid(), win.getOwningPackage())
                         != AppOpsManager.MODE_ALLOWED) {
@@ -2358,7 +2600,10 @@ public class WindowManagerService extends IWindowManager.Stub
         }
 
         Binder.restoreCallingIdentity(origId);
-
+        Log.d(TAG, "Ritter::WMS addWindow() end win.mAttrs.x:" + win.mAttrs.x + ",mAttrs.y:"
+                + win.mAttrs.y + ",mAttrs.w:" + win.mAttrs.width + ",mAttrs.h:" + win.mAttrs.height
+                + ",mAttrs.isInWindowing:" + win.mAttrs.isInWindowing + ",mAttrs.pkgName:"
+                + win.mAttrs.packageName);
         return res;
     }
 
@@ -2750,6 +2995,13 @@ public class WindowManagerService extends IWindowManager.Stub
             int requestedHeight, int viewVisibility, int flags,
             Rect outFrame, Rect outOverscanInsets, Rect outContentInsets,
             Rect outVisibleInsets, Configuration outConfig, Surface outSurface) {
+        
+        Log.d(TAG, "Ritter::WMS relayoutWindow() requestedWidth:" + requestedWidth
+                + ",requestedHeight:" + requestedHeight);
+        if (attrs != null)
+            Log.d(TAG, "Ritter::WMS relayoutWindow() attrs x:" + attrs.x + ",y:" + attrs.y
+                    + ",width:" + attrs.width + ",height:" + attrs.height + ",pkgName:"
+                    + attrs.packageName + ",isInWindowing:" + attrs.isInWindowing);
         boolean toBeDisplayed = false;
         boolean inTouchMode;
         boolean configChanged;
@@ -2778,6 +3030,7 @@ public class WindowManagerService extends IWindowManager.Stub
             if (win.mRequestedWidth != requestedWidth
                     || win.mRequestedHeight != requestedHeight) {
                 win.mLayoutNeeded = true;
+                Log.d(TAG,"Ritter::WMS relayoutWindow() win.mLayoutNeeded = true;");
                 win.mRequestedWidth = requestedWidth;
                 win.mRequestedHeight = requestedHeight;
             }
@@ -2795,9 +3048,40 @@ public class WindowManagerService extends IWindowManager.Stub
             int attrChanges = 0;
             int flagChanges = 0;
             if (attrs != null) {
+                
+                Log.d(TAG, "Ritter::WMS relayoutWindow() attrs != null copyFrom");
+                Log.d(TAG, "Ritter::WMS relayoutWindow() attrs != null win.mAttrs.type:"
+                        + win.mAttrs.type + ",win.mAttrs.packageName:" + win.mAttrs.packageName);
+                Log.d(TAG, "Ritter::WMS relayoutWindow() attrs != null attrs.type:" + attrs.type
+                        + ",attrs.packageName:" + attrs.packageName);
                 if (win.mAttrs.type != attrs.type) {
-                    throw new IllegalArgumentException(
-                            "Window type can not be changed after the window is added.");
+                    //Ritter_multi old
+                    //throw new IllegalArgumentException(
+                    //        "Window type can not be changed after the window is added.");
+                    // Ritter_multi new
+                    /**
+                     * I don't know why, when close the task contains multi
+                     * windows, the type will change and throw exception crash.
+                     * So, only allow this logic when not in multi window
+                     * situation.
+                     */
+                    // Get window apps from service
+                    String APPs = "";
+                    WindowAppsManager mWindowAppsManager = (WindowAppsManager) mContext
+                            .getSystemService("window_apps");
+                    try {
+                        APPs = mWindowAppsManager.getWindowApps();
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
+                    ArrayList<String> pkgList = new ArrayList<String>(
+                            Arrays.asList(APPs.split("#")));
+
+                    if (!pkgList.contains(attrs.packageName)) {
+                        throw new IllegalArgumentException(
+                                "Window type can not be changed after the window is added.");
+                    }
+            
                 }
                 flagChanges = win.mAttrs.flags ^= attrs.flags;
                 attrChanges = win.mAttrs.copyFrom(attrs);
@@ -2815,6 +3099,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
             if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
                 winAnimator.mAlpha = attrs.alpha;
+                Log.d(TAG,"Ritter::WMS relayoutWindow() win.mLayoutNeeded = true2");
             }
 
             final boolean scaledWindow =
@@ -3797,6 +4082,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     @Override
     public void setFocusedApp(IBinder token, boolean moveFocusNow) {
+        Log.d(TAG,"Ritter::WMS setFocusedApp()");
         if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,
                 "setFocusedApp()")) {
             throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
@@ -3836,6 +4122,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     @Override
     public void prepareAppTransition(int transit, boolean alwaysKeepCurrent) {
+        Log.d(TAG,"Ritter::WMS prepareAppTransition()");
         if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,
                 "prepareAppTransition()")) {
             throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
@@ -4143,6 +4430,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     @Override
     public void setAppWillBeHidden(IBinder token) {
+        Log.d(TAG,"Ritter::WMS setAppWillBeHidden()");
         if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,
                 "setAppWillBeHidden()")) {
             throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
@@ -4170,6 +4458,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     boolean setTokenVisibilityLocked(AppWindowToken wtoken, WindowManager.LayoutParams lp,
             boolean visible, int transit, boolean performLayout) {
+        Log.d(TAG,"Ritter::WMS setTokenVisibilityLocked()");
         boolean delayed = false;
 
         if (wtoken.clientHidden == visible) {
@@ -4285,6 +4574,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     @Override
     public void setAppVisibility(IBinder token, boolean visible) {
+        Log.d(TAG,"Ritter::WMS setAppVisibility()");
         if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,
                 "setAppVisibility()")) {
             throw new SecurityException("Requires MANAGE_APP_TOKENS permission");
@@ -4783,6 +5073,7 @@ public class WindowManagerService extends IWindowManager.Stub
     }
 
     public void moveTaskToTop(int taskId) {
+        Log.d(TAG,"Ritter::WMS moveTaskToTop() taskId:"+taskId);
         final long origId = Binder.clearCallingIdentity();
         try {
             synchronized(mWindowMap) {
@@ -4806,6 +5097,7 @@ public class WindowManagerService extends IWindowManager.Stub
     }
 
     public void moveTaskToBottom(int taskId) {
+        Log.d(TAG,"Ritter::WMS moveTaskToBottom() taskId:"+taskId);
         final long origId = Binder.clearCallingIdentity();
         try {
             synchronized(mWindowMap) {
@@ -8188,6 +8480,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     private final void performLayoutLockedInner(final DisplayContent displayContent,
                                     boolean initial, boolean updateInputWindows) {
+        Log.d(TAG,"Ritter::WMS performLayoutLockedInner()");
         if (!displayContent.layoutNeeded) {
             return;
         }
@@ -8287,7 +8580,20 @@ public class WindowManagerService extends IWindowManager.Stub
                     }
                     win.mLayoutNeeded = false;
                     win.prelayout();
+                    Log.d(TAG,
+                            "Ritter::WMS performLayoutLockedInner() Before mPolicy.layoutWindowLw win.mAttrs.x:"
+                                    + win.mAttrs.x + ",mAttrs.y:" + win.mAttrs.y + ",mAttrs.w:"
+                                    + win.mAttrs.width + ",mAttrs.h:" + win.mAttrs.height
+                                    + ",mAttrs.isInWindowing:" + win.mAttrs.isInWindowing
+                                    + ",mAttrs.pkgName:" + win.mAttrs.packageName);
                     mPolicy.layoutWindowLw(win, win.mAttrs, null);
+                    Log.d(TAG,
+                            "Ritter::WMS performLayoutLockedInner() After mPolicy.layoutWindowLw win.mAttrs.x:"
+                                    + win.mAttrs.x + ",mAttrs.y:" + win.mAttrs.y + ",mAttrs.w:"
+                                    + win.mAttrs.width + ",mAttrs.h:" + win.mAttrs.height
+                                    + ",mAttrs.isInWindowing:" + win.mAttrs.isInWindowing
+                                    + ",mAttrs.pkgName:" + win.mAttrs.packageName);
+
                     win.mLayoutSeq = seq;
                     if (DEBUG_LAYOUT) Slog.v(TAG, "  LAYOUT: mFrame="
                             + win.mFrame + " mContainingFrame="
@@ -8932,7 +9238,9 @@ public class WindowManagerService extends IWindowManager.Stub
         try {
 
             if (mWatermark != null) {
-                mWatermark.positionSurface(defaultDw, defaultDh);
+                Log.d(TAG,
+                        "Ritter::WMS performLayoutAndPlaceSurfacesLockedInner() mWatermark != null");
+                // mWatermark.positionSurface(defaultDw, defaultDh);
             }
             if (mStrictModeFlash != null) {
                 mStrictModeFlash.positionSurface(defaultDw, defaultDh);
@@ -9276,8 +9584,15 @@ public class WindowManagerService extends IWindowManager.Stub
                 final Rect overscanInsets = win.mLastOverscanInsets;
                 final Rect contentInsets = win.mLastContentInsets;
                 final Rect visibleInsets = win.mLastVisibleInsets;
-                final boolean reportDraw
-                        = winAnimator.mDrawState == WindowStateAnimator.DRAW_PENDING;
+                
+                // Ritter_multi
+                // I don't know why, but if I set reportDraw=true, the Window
+                // will resize in real time.
+                // final boolean reportDraw
+                //          = winAnimator.mDrawState == WindowStateAnimator.DRAW_PENDING;
+                final boolean reportDraw = true;
+                // end
+                
                 final Configuration newConfig = configChanged ? win.mConfiguration : null;
                 if (win.mClient instanceof IWindow.Stub) {
                     // To prevent deadlock simulate one-way call if win.mClient is a local object.
@@ -9745,6 +10060,7 @@ public class WindowManagerService extends IWindowManager.Stub
     }
 
     private boolean updateFocusedWindowLocked(int mode, boolean updateInputWindows) {
+        Log.d(TAG,"Ritter:WMS updateFocusedWindowLocked()");
         WindowState newFocus = computeFocusedWindowLocked();
         if (mCurrentFocus != newFocus) {
             Trace.traceBegin(Trace.TRACE_TAG_WINDOW_MANAGER, "wmUpdateFocus");
@@ -10061,39 +10377,43 @@ public class WindowManagerService extends IWindowManager.Stub
     }
 
     void createWatermarkInTransaction() {
+        Log.d(TAG,"Ritter::WMS createWatermarkInTransaction()");
         if (mWatermark != null) {
             return;
         }
 
-        File file = new File("/system/etc/setup.conf");
-        FileInputStream in = null;
-        DataInputStream ind = null;
-        try {
-            in = new FileInputStream(file);
-            ind = new DataInputStream(in);
-            String line = ind.readLine();
+//        File file = new File("/system/etc/setup.conf");
+//        FileInputStream in = null;
+//        DataInputStream ind = null;
+//        try {
+//            in = new FileInputStream(file);
+//            ind = new DataInputStream(in);
+//            String line = ind.readLine();
+        String line = "What%the%fuck";
             if (line != null) {
                 String[] toks = line.split("%");
                 if (toks != null && toks.length > 0) {
+                    Log.d(TAG,"Ritter::WMS createWatermarkInTransaction() toks != null && toks.length > 0");
                     mWatermark = new Watermark(getDefaultDisplayContentLocked().getDisplay(),
                             mRealDisplayMetrics, mFxSession, toks);
                 }
             }
-        } catch (FileNotFoundException e) {
-        } catch (IOException e) {
-        } finally {
-            if (ind != null) {
-                try {
-                    ind.close();
-                } catch (IOException e) {
-                }
-            } else if (in != null) {
-                try {
-                    in.close();
-                } catch (IOException e) {
-                }
-            }
-        }
+//        } catch (FileNotFoundException e) {
+//        } catch (IOException e) {
+//        } finally {
+//            if (ind != null) {
+//                try {
+//                    ind.close();
+//                } catch (IOException e) {
+//                }
+//            } else if (in != null) {
+//                try {
+//                    in.close();
+//                } catch (IOException e) {
+//                }
+//            }
+//        }
+            Log.d(TAG,"Ritter::WMS createWatermarkInTransaction() after new Watermark()");
     }
 
     @Override
@@ -10879,4 +11199,48 @@ public class WindowManagerService extends IWindowManager.Stub
     public Object getWindowManagerLock() {
         return mWindowMap;
     }
+    
+    
+    // Ritter_Multi
+    public void moveHomeToTop() {
+        Log.d(TAG, "Ritter::WMS moveHomeToTop()");
+        try {
+            mActivityManager.moveHomeToTop();
+        } catch (RemoteException e) {
+        }
+    }
+
+    // Ritter_Multi
+    public void callAMSMoveTaskToTop(int taskID) {
+        Log.d(TAG, "Ritter::WMS callAMSMoveTaskToTop() taskID:" + taskID);
+        try {
+            // mActivityManager.moveTaskToTop_AM(taskID);
+            // mActivityManager.moveTaskToFront(taskID,0,null);
+            // mActivityManager.moveTaskToFront(taskID,ActivityManager.MOVE_TASK_WITH_HOME,null);
+            mActivityManager.moveTaskToFront(taskID,
+                    ActivityManager.MOVE_TASK_BACK_TASKS_INVISIBLE, null);
+        } catch (RemoteException e) {
+        }
+    }
+
+    public boolean getMyWindowStateAttrs(Session session, IWindow client, Rect outRect) {
+        Log.d(TAG, "Ritter::WMS getMyWindowStateAttrs()");
+        boolean res = false;
+        synchronized (mWindowMap) {
+            Log.d(TAG, "Ritter::WMS getMyWindowStateAttrs() mWindowMap.size():" + mWindowMap.size()
+                    + ",client.asBinder():" + client.asBinder().toString());
+            WindowState win = windowForClientLocked(session, client, false);
+            if (win != null) {
+                Log.d(TAG, "Ritter::WMS getMyWindowStateAttrs() win.mAttrs.x:(" + win.mAttrs.x
+                        + "," + win.mAttrs.y + "," + win.mAttrs.width + "," + win.mAttrs.height
+                        + ")); packageName:" + win.mAttrs.packageName + ",isInWindowing:"
+                        + win.mAttrs.isInWindowing);
+                outRect.set(win.mAttrs.x, win.mAttrs.y, win.mAttrs.x + win.mAttrs.width,
+                        win.mAttrs.y + win.mAttrs.height);
+                res = true;
+            }
+        }
+        return res;
+    }
+    
 }
diff --git a/frameworks/base/services/java/com/android/server/wm/WindowState.java b/frameworks/base/services/java/com/android/server/wm/WindowState.java
index 2d08792..9348257 100644
--- a/frameworks/base/services/java/com/android/server/wm/WindowState.java
+++ b/frameworks/base/services/java/com/android/server/wm/WindowState.java
@@ -16,25 +16,21 @@
 
 package com.android.server.wm;
 
-import static com.android.server.wm.WindowManagerService.DEBUG_VISIBILITY;
-import static com.android.server.wm.WindowManagerService.DEBUG_LAYOUT;
-
 import static android.view.WindowManager.LayoutParams.FIRST_SUB_WINDOW;
-import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_COMPATIBLE_WINDOW;
 import static android.view.WindowManager.LayoutParams.LAST_SUB_WINDOW;
+import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_COMPATIBLE_WINDOW;
 import static android.view.WindowManager.LayoutParams.PRIVATE_FLAG_NO_MOVE_ANIMATION;
 import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD;
 import static android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG;
 import static android.view.WindowManager.LayoutParams.TYPE_KEYGUARD;
 import static android.view.WindowManager.LayoutParams.TYPE_WALLPAPER;
+import static com.android.server.wm.WindowManagerService.DEBUG_LAYOUT;
+import static com.android.server.wm.WindowManagerService.DEBUG_VISIBILITY;
 
-import android.app.AppOpsManager;
-import android.os.RemoteCallbackList;
-import android.util.TimeUtils;
-import android.view.IWindowFocusObserver;
-import android.view.IWindowId;
-import com.android.server.input.InputWindowHandle;
+import java.io.PrintWriter;
+import java.util.ArrayList;
 
+import android.app.AppOpsManager;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Matrix;
@@ -43,21 +39,25 @@ import android.graphics.Rect;
 import android.graphics.RectF;
 import android.graphics.Region;
 import android.os.IBinder;
+import android.os.RemoteCallbackList;
 import android.os.RemoteException;
 import android.os.UserHandle;
+import android.util.Log;
 import android.util.Slog;
+import android.util.TimeUtils;
 import android.view.DisplayInfo;
 import android.view.Gravity;
 import android.view.IApplicationToken;
 import android.view.IWindow;
+import android.view.IWindowFocusObserver;
+import android.view.IWindowId;
 import android.view.InputChannel;
 import android.view.View;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.view.WindowManagerPolicy;
 
-import java.io.PrintWriter;
-import java.util.ArrayList;
+import com.android.server.input.InputWindowHandle;
 
 class WindowList extends ArrayList<WindowState> {
 }
@@ -306,6 +306,9 @@ final class WindowState implements WindowManagerPolicy.WindowState {
     WindowState(WindowManagerService service, Session s, IWindow c, WindowToken token,
            WindowState attachedWindow, int appOp, int seq, WindowManager.LayoutParams a,
            int viewVisibility, final DisplayContent displayContent) {
+        Log.d(TAG, "Ritter::WS WindowState() attrs x:" + a.x + "" + ",y:" + a.y + ",w:" + a.width
+                + ",h:" + a.height + ",pkgName:" + a.packageName + ",isInWindowing:"
+                + a.isInWindowing);
         mService = service;
         mSession = s;
         mClient = c;
@@ -460,15 +463,19 @@ final class WindowState implements WindowManagerPolicy.WindowState {
 
     @Override
     public void computeFrameLw(Rect pf, Rect df, Rect of, Rect cf, Rect vf, Rect dcf) {
+        Log.d(TAG,"Ritter::WS computeFrameLw()");
         mHaveFrame = true;
 
         TaskStack stack = mAppToken != null ? getStack() : null;
         if (stack != null && stack.hasSibling()) {
+            Log.d(TAG, "Ritter::WS computeFrameLw() A1 stack != null && stack.hasSibling()");
             mContainingFrame.set(getStackBounds(stack));
             if (mUnderStatusBar) {
+                Slog.v(TAG, "Ritter::WS B1 computeFrameLw() mUnderStatusBar");
                 mContainingFrame.top = pf.top;
             }
         } else {
+            Log.d(TAG, "Ritter::WS A2 computeFrameLw() mUnderStatusBar");
             mContainingFrame.set(pf);
         }
 
@@ -478,7 +485,8 @@ final class WindowState implements WindowManagerPolicy.WindowState {
         final int ph = mContainingFrame.height();
 
         int w,h;
-        if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
+        //Ritter_multi old
+        /*if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
             if (mAttrs.width < 0) {
                 w = pw;
             } else if (mEnforceSizeCompat) {
@@ -508,8 +516,66 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             } else {
                 h = mRequestedHeight;
             }
-        }
+        }*/
+        
+        //Ritter_multi new
+        if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
+            Log.d(TAG,
+                    "Ritter::WS computeFrameLw() (mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0 AAA");
+            if (mAttrs.width < 0) {
+                w = pw;
+                Log.d(TAG, "Ritter::WS computeFrameLw() AAA 1 w:" + w);
+            } else if (mEnforceSizeCompat) {
+                w = (int) (mAttrs.width * mGlobalScale + .5f);
+                Log.d(TAG, "Ritter::WS computeFrameLw() AAA 2 w:" + w);
+            } else {
+                w = mAttrs.width;
+                Log.d(TAG, "Ritter::WS computeFrameLw() AAA 3 w:" + w);
+            }
+            if (mAttrs.height < 0) {
+                h = ph;
+                Log.d(TAG, "Ritter::WS computeFrameLw() AAA 4 h:" + h);
+            } else if (mEnforceSizeCompat) {
+                h = (int) (mAttrs.height * mGlobalScale + .5f);
+                Log.d(TAG, "Ritter::WS computeFrameLw() AAA 5 h:" + h);
+            } else {
+                h = mAttrs.height;
+                Log.d(TAG, "Ritter::WS computeFrameLw() AAA 6 h:" + h);
+            }
+        } else {
+            Log.d(TAG,
+                    "Ritter::WS computeFrameLw() (mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0 else BBB");
+            if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
+                w = pw;
+                Log.d(TAG, "Ritter::WS computeFrameLw() BBB 1 w:" + w);
+            } else if (mEnforceSizeCompat) {
+                w = (int) (mRequestedWidth * mGlobalScale + .5f);
+                Log.d(TAG, "Ritter::WS computeFrameLw() BBB 2 w:" + w);
+            } else {
+                w = mRequestedWidth;
+                Log.d(TAG, "Ritter::WS computeFrameLw() BBB 3 w:" + w);
+            }
 
+            if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
+                h = ph;
+                Log.d(TAG, "Ritter::WS computeFrameLw() BBB 4h:" + h);
+            } else if (mEnforceSizeCompat) {
+                h = (int) (mRequestedHeight * mGlobalScale + .5f);
+                Log.d(TAG, "Ritter::WS computeFrameLw() BBB 5 h:" + h);
+            } else {
+                h = mRequestedHeight;
+                Log.d(TAG, "Ritter::WS computeFrameLw() BBB 6 h:" + h);
+            }
+
+            if (false && (mAttrs.packageName != null && mAttrs.packageName.contains("com.example."))) {
+                w = mRequestedWidth;
+                h = mRequestedHeight;
+                Log.d(TAG, "Ritter::WS computeFrameLw() BBB 7 w:" + w + ",h:" + h
+                        + ",mAttrs.packageName:" + mAttrs.packageName);
+            }
+
+        }
+        // end
         if (!mParentFrame.equals(pf)) {
             //Slog.i(TAG, "Window " + this + " content frame from " + mParentFrame
             //        + " to " + pf);
@@ -541,16 +607,68 @@ final class WindowState implements WindowManagerPolicy.WindowState {
             x = mAttrs.x;
             y = mAttrs.y;
         }
-
+        Log.d(TAG, "Ritter::WS computeFrameLw() A before Gravity.apply x:" + x + ",y:" + y
+                + ",mAttrs.gravity:" + mAttrs.gravity + ",mAttrs.pkgName:" + mAttrs.packageName);
+        Log.d(TAG, "Ritter::WS computeFrameLw() A before Gravity.apply mAttrs.x:" + mAttrs.x
+                + ",mAttrs.y:" + mAttrs.y + ",mAttrs.w:" + mAttrs.width + ",mAttrs.h:"
+                + mAttrs.height);
+        Log.d(TAG,
+                "Ritter::WS computeFrameLw() A before Gravity.apply mFrame:"
+                        + mFrame.toShortString());
+        Log.d(TAG, "Ritter::WS computeFrameLw() A before Gravity.apply mAttrs.horizontalMargin:"
+                + mAttrs.horizontalMargin + ",mAttrs.verticalMargin:" + mAttrs.verticalMargin);
+        Log.d(TAG, "Ritter::WS computeFrameLw() A before Gravity.apply pw:" + pw + ",ph:" + ph);
+        Log.d(TAG, "Ritter::WS computeFrameLw() A before Gravity.apply w:" + w + ",h:" + h);
+        
         Gravity.apply(mAttrs.gravity, w, h, mContainingFrame,
                 (int) (x + mAttrs.horizontalMargin * pw),
                 (int) (y + mAttrs.verticalMargin * ph), mFrame);
 
         //System.out.println("Out: " + mFrame);
-
+        Log.d(TAG,"Ritter::WS computeFrameLw() B after Gravity.apply mAttrs.x:"+mAttrs.x+",mAttrs.y:"+mAttrs.y+",mAttrs.w:"+mAttrs.width+",mAttrs.h:"+mAttrs.height);
+        Log.d(TAG,"Ritter::WS computeFrameLw() B after Gravity.apply mFrame:"+mFrame.toShortString());
+                 //System.out.println("Out: " + mFrame);
         // Now make sure the window fits in the overall display.
         Gravity.applyDisplay(mAttrs.gravity, df, mFrame);
-
+        Log.d(TAG, "Ritter::WS computeFrameLw() C after Gravity.applyDisplay mAttrs.x:" + mAttrs.x
+                + ",mAttrs.y:" + mAttrs.y + ",mAttrs.w:" + mAttrs.width + ",mAttrs.h:"
+                + mAttrs.height);
+        Log.d(TAG,
+                "Ritter::WS computeFrameLw() C after Gravity.applyDisplay mFrame:"
+                        + mFrame.toShortString());
+        Log.d(TAG,
+                "Ritter::WS computeFrameLw() C after Gravity.applyDisplay mAttrs.isInWindowing :"
+                        + mAttrs.isInWindowing);
+
+        // Ritter_multi new
+        if (false && mAttrs.packageName != null && mAttrs.packageName.contains("com.example.")) {
+            if (mAttrs.isInWindowing) {
+                mAttrs.x = mFrame.left;
+                mAttrs.y = mFrame.top;
+                mAttrs.width = mFrame.right - mFrame.left;
+                mAttrs.height = mFrame.bottom - mFrame.top;
+                Log.d(TAG, "Ritter::WS computeFrameLw() mAttrs.isInWindowing pkgName:"
+                        + mAttrs.packageName + ",mAttrs.isInWindowing:" + mAttrs.isInWindowing);
+            } else {
+                //mAttrs.x = mFrame.left;
+                //mAttrs.width = mFrame.right - mFrame.left;
+                //mAttrs.y = mFrame.top;
+                //mAttrs.height = mFrame.bottom - mFrame.top;
+                //mFrame.left = mAttrs.x;
+                //mFrame.right = mAttrs.x + mAttrs.width;
+                //mFrame.top = mAttrs.y;
+                //mFrame.bottom = mAttrs.y + mAttrs.height;
+                Log.d(TAG,
+                          "Ritter::WS computeFrameLw() mAttrs.isInWindowing pkgName:"
+                          + mAttrs.packageName);
+            }
+        }
+        Log.d(TAG, "Ritter::WS computeFrameLw() D after mAttrs.x:" + mAttrs.x + ",mAttrs.y:"
+                + mAttrs.y + ",mAttrs.w:" + mAttrs.width + ",mAttrs.h:" + mAttrs.height);
+        Log.d(TAG,
+                "Ritter::WS computeFrameLw() D after mAttrs.isInWindowing mFrame:"
+                        + mFrame.toShortString());
+        // end
         // Make sure the content and visible frames are inside of the
         // final window frame.
         mContentFrame.set(Math.max(mContentFrame.left, mFrame.left),
diff --git a/packages/apps/WindowApps/Android.mk b/packages/apps/WindowApps/Android.mk
new file mode 100755
index 0000000..ecca83a
--- /dev/null
+++ b/packages/apps/WindowApps/Android.mk
@@ -0,0 +1,30 @@
+#
+# Copyright (C) 2008 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+LOCAL_PATH := $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-subdir-java-files)
+
+LOCAL_PACKAGE_NAME := WindowApps
+
+LOCAL_PROGUARD_FLAG_FILES := proguard.flags
+
+LOCAL_CERTIFICATE := platform
+
+include $(BUILD_PACKAGE)
diff --git a/packages/apps/WindowApps/AndroidManifest.xml b/packages/apps/WindowApps/AndroidManifest.xml
new file mode 100644
index 0000000..70069f5
--- /dev/null
+++ b/packages/apps/WindowApps/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.windowapps"
+    >
+
+    <application
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme" >
+        <activity
+            android:name="com.example.windowapps.MainActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/packages/apps/WindowApps/CleanSpec.mk b/packages/apps/WindowApps/CleanSpec.mk
new file mode 100755
index 0000000..fae7663
--- /dev/null
+++ b/packages/apps/WindowApps/CleanSpec.mk
@@ -0,0 +1,49 @@
+# Copyright (C) 2007 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# If you don't need to do a full clean build but would like to touch
+# a file or delete some intermediate files, add a clean step to the end
+# of the list.  These steps will only be run once, if they haven't been
+# run before.
+#
+# E.g.:
+#     $(call add-clean-step, touch -c external/sqlite/sqlite3.h)
+#     $(call add-clean-step, rm -rf $(PRODUCT_OUT)/obj/STATIC_LIBRARIES/libz_intermediates)
+#
+# Always use "touch -c" and "rm -f" or "rm -rf" to gracefully deal with
+# files that are missing or have been moved.
+#
+# Use $(PRODUCT_OUT) to get to the "out/target/product/blah/" directory.
+# Use $(OUT_DIR) to refer to the "out" directory.
+#
+# If you need to re-do something that's already mentioned, just copy
+# the command and add it to the bottom of the list.  E.g., if a change
+# that you made last week required touching a file and a change you
+# made today requires touching the same file, just copy the old
+# touch step and add it to the end of the list.
+#
+# ************************************************
+# NEWER CLEAN STEPS MUST BE AT THE END OF THE LIST
+# ************************************************
+
+# For example:
+#$(call add-clean-step, rm -rf $(OUT_DIR)/target/common/obj/APPS/AndroidTests_intermediates)
+#$(call add-clean-step, rm -rf $(OUT_DIR)/target/common/obj/JAVA_LIBRARIES/core_intermediates)
+#$(call add-clean-step, find $(OUT_DIR) -type f -name "IGTalkSession*" -print0 | xargs -0 rm -f)
+#$(call add-clean-step, rm -rf $(PRODUCT_OUT)/data/*)
+
+# ************************************************
+# NEWER CLEAN STEPS MUST BE AT THE END OF THE LIST
+# ************************************************
\ No newline at end of file
diff --git a/packages/apps/WindowApps/proguard.flags b/packages/apps/WindowApps/proguard.flags
new file mode 100755
index 0000000..0429cec
--- /dev/null
+++ b/packages/apps/WindowApps/proguard.flags
@@ -0,0 +1,36 @@
+-optimizationpasses 5
+-dontusemixedcaseclassnames
+-dontskipnonpubliclibraryclasses
+-dontpreverify
+-verbose
+-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
+
+-keep public class * extends android.app.Activity
+-keep public class * extends android.app.Application
+-keep public class * extends android.app.Service
+-keep public class * extends android.content.BroadcastReceiver
+-keep public class * extends android.content.ContentProvider
+-keep public class * extends android.app.backup.BackupAgentHelper
+-keep public class * extends android.preference.Preference
+-keep public class com.android.vending.licensing.ILicensingService
+
+-keepclasseswithmembernames class * {
+    native <methods>;
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet);
+}
+
+-keepclasseswithmembernames class * {
+    public <init>(android.content.Context, android.util.AttributeSet, int);
+}
+
+-keepclassmembers enum * {
+    public static **[] values();
+    public static ** valueOf(java.lang.String);
+}
+
+-keep class * implements android.os.Parcelable {
+  public static final android.os.Parcelable$Creator *;
+}
\ No newline at end of file
diff --git a/packages/apps/WindowApps/res/drawable-hdpi/ic_launcher.png b/packages/apps/WindowApps/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..288b66551d1efd1f13dd06f20a67534d2df57946
GIT binary patch
literal 7658
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
Y0e~A6&YDG)xBvhE07*qoM6N<$f<`;WUjP6A

literal 0
HcmV?d00001

diff --git a/packages/apps/WindowApps/res/drawable-mdpi/ic_launcher.png b/packages/apps/WindowApps/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..6ae570b4db4da165fada0650079061cb56aa8793
GIT binary patch
literal 3777
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

literal 0
HcmV?d00001

diff --git a/packages/apps/WindowApps/res/drawable-xhdpi/ic_launcher.png b/packages/apps/WindowApps/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..d4fb7cd9d868f1d7d9964f1686dcbc018ef9495a
GIT binary patch
literal 12516
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

literal 0
HcmV?d00001

diff --git a/packages/apps/WindowApps/res/drawable-xxhdpi/ic_launcher.png b/packages/apps/WindowApps/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..85a6081587e2c2b9793d796ee7b07e12fdf860db
GIT binary patch
literal 24777
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

literal 0
HcmV?d00001

diff --git a/packages/apps/WindowApps/res/layout/activity_main.xml b/packages/apps/WindowApps/res/layout/activity_main.xml
new file mode 100644
index 0000000..325968d
--- /dev/null
+++ b/packages/apps/WindowApps/res/layout/activity_main.xml
@@ -0,0 +1,28 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    tools:context=".MainActivity" >
+
+    <Button
+        android:id="@+id/btn_save"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:onClick="onBtnSaveClick"
+        android:text="@string/save" />
+
+    <Button
+        android:id="@+id/btn_get"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:onClick="onBtnGetClick"
+        android:text="@string/get" />
+
+    <ListView
+        android:id="@+id/lv"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content" >
+    </ListView>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/packages/apps/WindowApps/res/layout/list.xml b/packages/apps/WindowApps/res/layout/list.xml
new file mode 100644
index 0000000..11f01c1
--- /dev/null
+++ b/packages/apps/WindowApps/res/layout/list.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="horizontal" >
+
+    <ImageView
+        android:id="@+id/img"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_vertical" />
+
+    <TextView
+        android:id="@+id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:textSize="18dip" />
+
+    <CheckBox
+        android:id="@+id/cb"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:checkMark="?android:attr/listChoiceIndicatorMultiple"
+        android:clickable="false"
+        android:focusable="false"
+        android:focusableInTouchMode="false" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/packages/apps/WindowApps/res/menu/main.xml b/packages/apps/WindowApps/res/menu/main.xml
new file mode 100644
index 0000000..c002028
--- /dev/null
+++ b/packages/apps/WindowApps/res/menu/main.xml
@@ -0,0 +1,9 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android" >
+
+    <item
+        android:id="@+id/action_settings"
+        android:orderInCategory="100"
+        android:showAsAction="never"
+        android:title="@string/action_settings"/>
+
+</menu>
diff --git a/packages/apps/WindowApps/res/values-sw600dp/dimens.xml b/packages/apps/WindowApps/res/values-sw600dp/dimens.xml
new file mode 100644
index 0000000..44f01db
--- /dev/null
+++ b/packages/apps/WindowApps/res/values-sw600dp/dimens.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!--
+         Customize dimensions originally defined in res/values/dimens.xml (such as
+         screen margins) for sw600dp devices (e.g. 7" tablets) here.
+    -->
+
+</resources>
diff --git a/packages/apps/WindowApps/res/values-sw720dp-land/dimens.xml b/packages/apps/WindowApps/res/values-sw720dp-land/dimens.xml
new file mode 100644
index 0000000..61e3fa8
--- /dev/null
+++ b/packages/apps/WindowApps/res/values-sw720dp-land/dimens.xml
@@ -0,0 +1,9 @@
+<resources>
+
+    <!--
+         Customize dimensions originally defined in res/values/dimens.xml (such as
+         screen margins) for sw720dp devices (e.g. 10" tablets) in landscape here.
+    -->
+    <dimen name="activity_horizontal_margin">128dp</dimen>
+
+</resources>
diff --git a/packages/apps/WindowApps/res/values-v11/styles.xml b/packages/apps/WindowApps/res/values-v11/styles.xml
new file mode 100644
index 0000000..3c02242
--- /dev/null
+++ b/packages/apps/WindowApps/res/values-v11/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!--
+        Base application theme for API 11+. This theme completely replaces
+        AppBaseTheme from res/values/styles.xml on API 11+ devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light">
+        <!-- API 11 theme customizations can go here. -->
+    </style>
+
+</resources>
diff --git a/packages/apps/WindowApps/res/values-v14/styles.xml b/packages/apps/WindowApps/res/values-v14/styles.xml
new file mode 100644
index 0000000..a91fd03
--- /dev/null
+++ b/packages/apps/WindowApps/res/values-v14/styles.xml
@@ -0,0 +1,12 @@
+<resources>
+
+    <!--
+        Base application theme for API 14+. This theme completely replaces
+        AppBaseTheme from BOTH res/values/styles.xml and
+        res/values-v11/styles.xml on API 14+ devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Holo.Light.DarkActionBar">
+        <!-- API 14 theme customizations can go here. -->
+    </style>
+
+</resources>
diff --git a/packages/apps/WindowApps/res/values/dimens.xml b/packages/apps/WindowApps/res/values/dimens.xml
new file mode 100644
index 0000000..55c1e59
--- /dev/null
+++ b/packages/apps/WindowApps/res/values/dimens.xml
@@ -0,0 +1,7 @@
+<resources>
+
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+
+</resources>
diff --git a/packages/apps/WindowApps/res/values/strings.xml b/packages/apps/WindowApps/res/values/strings.xml
new file mode 100644
index 0000000..6db70a8
--- /dev/null
+++ b/packages/apps/WindowApps/res/values/strings.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">WindowApps</string>
+    <string name="action_settings">Settings</string>
+    <string name="hello_world">Hello world!</string>
+    <string name="get">Get</string>
+    <string name="set">Set</string>
+    <string name="save">Save</string>
+
+</resources>
diff --git a/packages/apps/WindowApps/res/values/styles.xml b/packages/apps/WindowApps/res/values/styles.xml
new file mode 100644
index 0000000..6ce89c7
--- /dev/null
+++ b/packages/apps/WindowApps/res/values/styles.xml
@@ -0,0 +1,20 @@
+<resources>
+
+    <!--
+        Base application theme, dependent on API level. This theme is replaced
+        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Light">
+        <!--
+            Theme customizations available in newer API levels can go in
+            res/values-vXX/styles.xml, while customizations related to
+            backward-compatibility can go here.
+        -->
+    </style>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="AppBaseTheme">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
diff --git a/packages/apps/WindowApps/src/com/example/windowapps/MainActivity.java b/packages/apps/WindowApps/src/com/example/windowapps/MainActivity.java
new file mode 100644
index 0000000..d52ddf3
--- /dev/null
+++ b/packages/apps/WindowApps/src/com/example/windowapps/MainActivity.java
@@ -0,0 +1,213 @@
+package com.example.windowapps;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import com.example.windowapps.MainActivity.MyAdapter.ViewHolder;
+
+import android.os.Bundle;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.graphics.drawable.Drawable;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.BaseAdapter;
+import android.widget.CheckBox;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import android.app.WindowAppsManager;
+
+public class MainActivity extends Activity {
+    WindowAppsManager mWindowAppsManager;
+    ListView mListView;
+    MyAdapter mAdapter;
+    SharedPreferences mSharedPreferences;
+    ArrayList<String> mPKGList;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        mSharedPreferences = getSharedPreferences("window_apps_strings", 0);
+        String pkgs = mSharedPreferences.getString("pkgs", "");
+        mPKGList = parseString2List(pkgs);
+        Log.d("TAG","Ritter::APP mPKGList.size:"+mPKGList.size());
+        mWindowAppsManager = (WindowAppsManager) this
+                .getSystemService("window_apps");
+
+        mListView = (ListView) findViewById(R.id.lv);
+        mAdapter = new MyAdapter(this);
+        mListView.setAdapter(mAdapter);
+        mListView.setItemsCanFocus(false);
+        mListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+
+        mListView.setOnItemClickListener(new OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view,
+                    int position, long id) {
+                ViewHolder vHollder = (ViewHolder) view.getTag();
+                vHollder.cBox.toggle();
+                mAdapter.mSelectedMap.put(position, vHollder.cBox.isChecked());
+            }
+        });
+
+
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.main, menu);
+        return true;
+    }
+
+    @Override
+    protected void onResume(){
+        super.onResume();
+        //When device reboot, make the service hold values.
+        saveToService();
+    }
+
+    public void onBtnSaveClick(View v) {
+        saveToService();
+    }
+
+    private void saveToService() {
+        StringBuilder sb = new StringBuilder();
+        for (int i = 0; i < mAdapter.mSelectedMap.size(); i++) {
+            if (mAdapter.mSelectedMap.get(i)) {
+                Log.d("TAG", "--onClick --"
+                        + mAdapter.mData.get(i).get("title"));
+                Log.d("TAG", "--onClick --" + mAdapter.mData.get(i).get("pkg"));
+                sb.append(mAdapter.mData.get(i).get("pkg"));
+                sb.append("#");
+            }
+        }
+        if(sb.length()>0){
+            sb.deleteCharAt(sb.length()-1);
+        }
+        Log.d("TAG","Ritter::APP onBtnSaveClick:"+sb.toString());
+        mSharedPreferences.edit().putString("pkgs", sb.toString()).commit();
+
+        try {
+            mWindowAppsManager.setWindowApps(sb.toString());
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    public void onBtnGetClick(View v){
+        String APPs = "";
+        try {
+            APPs = mWindowAppsManager.getWindowApps();
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+        Log.d("TAG","Ritter::APP onBtnGetClick APPS:"+APPs);
+    }
+
+    private ArrayList<String> parseString2List(String s){
+        ArrayList<String> res;
+        res = new ArrayList<String>(Arrays.asList(s.split("#")));
+        return res;
+    }
+
+    class MyAdapter extends android.widget.BaseAdapter {
+        private LayoutInflater mInflater;
+        private List<Map<String, Object>> mData;
+        public Map<Integer, Boolean> mSelectedMap;
+
+        public MyAdapter(Context context) {
+            mInflater = LayoutInflater.from(context);
+            init();
+        }
+
+        private void init() {
+            mData = new ArrayList<Map<String, Object>>();
+            mSelectedMap = new HashMap<Integer, Boolean>();
+
+            PackageManager packageManager = getPackageManager();
+            Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
+            mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
+            List<ResolveInfo> resolveInfos = packageManager
+                    .queryIntentActivities(mainIntent, 0);
+            Collections.sort(resolveInfos,
+                    new ResolveInfo.DisplayNameComparator(packageManager));
+            Log.d("TAG","Ritter::APP init APPS resolveInfos.size():"+resolveInfos.size());
+            for (int i=0;i< resolveInfos.size();i++) {
+                String activityName = resolveInfos.get(i).activityInfo.name;
+                String pkgName = resolveInfos.get(i).activityInfo.packageName;
+                String appLabel = (String) resolveInfos.get(i).loadLabel(packageManager);
+                Drawable icon = resolveInfos.get(i).loadIcon(packageManager);
+                Map<String, Object> map = new HashMap<String, Object>();
+                map.put("img", icon);
+                map.put("title", appLabel);
+                map.put("pkg", pkgName);
+                mData.add(map);
+                if(mPKGList.contains(pkgName)){
+                    mSelectedMap.put(i, true);
+                } else {
+                    mSelectedMap.put(i, false);
+                }
+            }
+        }
+
+        @Override
+        public int getCount() {
+            return mData.size();
+        }
+
+        @Override
+        public Object getItem(int position) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return 0;
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            ViewHolder holder = null;
+            if (convertView == null) {
+                holder = new ViewHolder();
+                convertView = mInflater.inflate(R.layout.list, null);
+                holder.img = (ImageView) convertView.findViewById(R.id.img);
+                holder.title = (TextView) convertView.findViewById(R.id.title);
+                holder.cBox = (CheckBox) convertView.findViewById(R.id.cb);
+                convertView.setTag(holder);
+            } else {
+                holder = (ViewHolder) convertView.getTag();
+            }
+            holder.img.setImageDrawable((Drawable) mData.get(position).get(
+                    "img"));
+            holder.title.setText(mData.get(position).get("title").toString());
+            holder.pkgName = (mData.get(position).get("pkg").toString());
+            holder.cBox.setChecked(mSelectedMap.get(position));
+            return convertView;
+        }
+
+        public final class ViewHolder {
+            public ImageView img;
+            public TextView title;
+            public CheckBox cBox;
+            public String pkgName;
+        }
+    }
+
+}
